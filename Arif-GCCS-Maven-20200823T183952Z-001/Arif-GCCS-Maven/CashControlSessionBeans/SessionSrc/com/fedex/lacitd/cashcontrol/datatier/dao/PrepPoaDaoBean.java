package com.fedex.lacitd.cashcontrol.datatier.dao;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Hashtable;
import java.util.Iterator;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.sql.DataSource;

import com.fedex.lacitd.cashcontrol.biztier.common.Constants;
import com.fedex.lacitd.cashcontrol.biztier.common.GroundDetailsTableVO;
import com.fedex.lacitd.cashcontrol.biztier.common.OACDetailsTableVO;
import com.fedex.lacitd.cashcontrol.biztier.common.PoaOutstInvoicesVO;
import com.fedex.lacitd.cashcontrol.biztier.common.PoaSummaryTableVO;
import com.fedex.lacitd.cashcontrol.biztier.common.PrepaidDetailsTableVO;
import com.fedex.lacitd.cashcontrol.biztier.common.PrepaidDscrTableVO;
import com.fedex.lacitd.cashcontrol.biztier.common.PrepaidVISAFileVO;
import com.fedex.lacitd.cashcontrol.biztier.common.TotalSummaryVO;
import com.fedex.lacitd.cashcontrol.datatier.controller.OacAwbController;
import com.fedex.lacitd.cashcontrol.datatier.controller.OacController;
import com.fedex.lacitd.cashcontrol.datatier.exception.DAOException;
import com.fedex.lacitd.cashcontrol.datatier.valueobject.OacAwbVO;
import com.fedex.lacitd.cashcontrol.datatier.valueobject.PreStatusVO;
import com.fedex.lacitd.cashcontrol.datatier.valueobject.TasksVO;

/**
 * Created 18/11/2003 16:00:06
 * Code generated by the Sun ONE Studio EJB Builder
 *
 * @author ccardenas
 */

//borrame :)
public class PrepPoaDaoBean implements javax.ejb.SessionBean {
    private javax.ejb.SessionContext context;


    /**
     * @see javax.ejb.SessionBean#setSessionContext(javax.ejb.SessionContext)
     */
    public void setSessionContext(javax.ejb.SessionContext aContext) {
        context = aContext;
    }


    /**
     * @see javax.ejb.SessionBean#ejbActivate()
     */
    public void ejbActivate() {

    }


    /**
     * @see javax.ejb.SessionBean#ejbPassivate()
     */
    public void ejbPassivate() {

    }


    /**
     * @see javax.ejb.SessionBean#ejbRemove()
     */
    public void ejbRemove() {

    }


    /**
     * See section 7.10.3 of the EJB 2.0 specification
     */
    public void ejbCreate() {

    }

    public java.util.Hashtable getPoaSummaryTable(String locationCd, String courierId, String currencyCode, Integer pageNumber, Integer rowsByPage, String sortColumn, String sortDirection) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        Hashtable result = null;
        try {
            InitialContext c = new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_POA_SUMMARY_TABLE(?,?,?,?,?,?,?,?,?); END;");
            cs.setString(1, locationCd);
            cs.setString(2, courierId);
            cs.setString(3, currencyCode);
            cs.setInt(4, pageNumber.intValue());
            cs.setInt(5, rowsByPage.intValue());
            cs.setString(6, sortColumn);
            cs.setString(7, sortDirection);
            cs.registerOutParameter(8, oracle.jdbc.OracleTypes.CURSOR);
            cs.registerOutParameter(9, oracle.jdbc.OracleTypes.INTEGER);
            cs.execute();
            Integer numberOfPages = (Integer) cs.getObject(9);
            rs = (ResultSet) cs.getObject(8);
            Collection colPayment = new ArrayList();
            while (rs.next()) {
                PoaSummaryTableVO ppVO = new PoaSummaryTableVO();
                ppVO.setPoaPaymentsId(new Integer(rs.getInt(1)));
                ppVO.setAccountNbr(rs.getString(2));
                ppVO.setCustomerNm(rs.getString(3));
                ppVO.setExchRate(rs.getDouble(4));
                ppVO.setPaymentAmt(rs.getDouble(5));
                ppVO.setPaymentType(rs.getInt(6));
                ppVO.setCoupPymtAmt(rs.getDouble(7));
                ppVO.setOtherDocNbr(rs.getString(8));
                ppVO.setChkinAgentComment(rs.getString(9));
                ppVO.setOtherComment(rs.getString(10));
                ppVO.setRcptNbr(rs.getString(11));
                colPayment.add(ppVO);
            }
            result = new Hashtable();
            result.put("NUMBEROFPAGES", numberOfPages);
            result.put("RESULTSET", colPayment);

            System.out.println("size : " + colPayment.size() );

            return result;
        }
        catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getPoaSummaryTable() method of PrepPoaDaoBean class.", e);
        }
        finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }

            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }

            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }
            rs = null;
            cs = null;
            conn = null;
        }
    }

    public java.util.Collection getPoaUsedCurrencies(String locationCd, String employeeId) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        try {
            /*Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/                          
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_GET_POA_USED_CURRENCIES(?,?,?); END;");

            cs.setString(1, locationCd);
            cs.setString(2, employeeId);
            cs.registerOutParameter(3, oracle.jdbc.OracleTypes.CURSOR);

            cs.execute();

            rs = (ResultSet) cs.getObject(3);
            Collection colDet = new ArrayList();
            while (rs.next()) {
                colDet.add(rs.getString(1));
            }
            return colDet;

        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getPoaUsedCurrencies() method of PrepPoaDaoBean class.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
    }

    public Collection   processVISAFile(Collection colVISA) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        PrepaidVISAFileVO pvf = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();


            cs = conn.prepareCall("BEGIN SP_UPDATE_PREPAID_VISA_DATA(?,?,?,?,?,?,?,?,?,?,?,?,?,?); END;");
            
            Iterator iterVISA = colVISA.iterator();
            while (iterVISA.hasNext()) {
                pvf = (PrepaidVISAFileVO) iterVISA.next();
                cs.clearParameters();
                System.out.println("pvf.getAwbNbr()=="+pvf.getAwbNbr());
                cs.setString(1, pvf.getAwbNbr());
                System.out.println("pvf.getOrigLocation()=="+pvf.getOrigLocation());
                cs.setString(2, pvf.getOrigLocation());
                System.out.println("pvf.getOrigCountry()=="+pvf.getOrigCountry());
                cs.setString(3, pvf.getOrigCountry());
                System.out.println("date=="+new java.sql.Date(pvf.getShipDate().getTime()));
                cs.setDate(4, new java.sql.Date(pvf.getShipDate().getTime()));
                cs.setInt(5, pvf.getProduct());
                cs.setInt(6, pvf.getNumberPkgs());
                cs.setDouble(7, pvf.getWeight());
                System.out.println("pvf.getCustomerNm()=="+pvf.getCustomerNm());
                cs.setString(8, pvf.getCustomerNm());
                cs.setDouble(9, pvf.getFreightAmtInVisa());
                cs.registerOutParameter(10, oracle.jdbc.OracleTypes.INTEGER); //result
                cs.registerOutParameter(11, oracle.jdbc.OracleTypes.VARCHAR); //currency
                cs.registerOutParameter(12, oracle.jdbc.OracleTypes.INTEGER);//delay dscr
                cs.registerOutParameter(13, oracle.jdbc.OracleTypes.INTEGER);//scans local decs
                cs.registerOutParameter(14, oracle.jdbc.OracleTypes.INTEGER);//scans usd decs
                cs.execute();

                if (cs.getInt(10) == 0) {
                    iterVISA.remove(); //if it is in the DB the work with the awb is done.
                } else {
                    pvf.setPaymentCurrency(cs.getString(11));
                    pvf.setDelayDscr(cs.getInt(12) == 1);
                    pvf.setScansLocalDecs(cs.getInt(13));
                    pvf.setScansUsdDecs(cs.getInt(14));
                }
            }

            return colVISA;

        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on processVISAFile() method of PrepPoaDaoBean class...."+ pvf.getAwbNbr()+pvf.getCustomerNm(),e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
    }

    public java.util.Hashtable getPrepaidDetailsTable(String locationCd, String employeeId, String currencyCode, Integer pageNumber, Integer rowsByPage, String sortColumn, String sortDirection) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        Hashtable result = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_PREPAID_DETAILS(?,?,?,?,?,?,?,?,?); END;");

            cs.setString(1, locationCd);
            cs.setString(2, employeeId);
            cs.setString(3, currencyCode);
            cs.setInt(4, pageNumber.intValue());
            cs.setInt(5, rowsByPage.intValue());
            cs.setString(6, sortColumn);
            cs.setString(7, sortDirection);
            cs.registerOutParameter(8, oracle.jdbc.OracleTypes.CURSOR);
            cs.registerOutParameter(9, oracle.jdbc.OracleTypes.INTEGER);

            cs.execute();
            rs = (ResultSet) cs.getObject(8);
            Integer numberOfPages = (Integer) cs.getObject(9);
            Collection colDet = new ArrayList();
            while (rs.next()) {
                PrepaidDetailsTableVO ccrVO = new PrepaidDetailsTableVO();
                ccrVO.setPrepaidId(rs.getInt(1));
                ccrVO.setAwbNumber(rs.getString(2));
                ccrVO.setAwbDate(rs.getDate(3));
                ccrVO.setCustomerNm(rs.getString(4));
                ccrVO.setCashPayment(rs.getDouble(5));
                ccrVO.setOtherPayment(rs.getDouble(6));
                ccrVO.setOtherPaymentType(rs.getInt(7));
                ccrVO.setOtherDocNumber(rs.getString(8));
                ccrVO.setCouponPayment(rs.getDouble(9));
                ccrVO.setScanAmount(rs.getDouble(10));
                ccrVO.setComment(rs.getString(11));
                ccrVO.setStatusId(rs.getInt(12));
                ccrVO.setExchRate(rs.getDouble(13));
                ccrVO.setOtherComment(rs.getString(14));
                ccrVO.setSurChargesTotal(rs.getDouble(15));
                ccrVO.setRcptNbr(rs.getString(16));
                ccrVO.setEmployeeNm(rs.getString(17));
                ccrVO.setCourierId(rs.getString(18));
                ccrVO.setBillAccount(rs.getString(19));

                ccrVO.setCashPaymentPrev(ccrVO.getCashPayment());
                ccrVO.setOtherPaymentPrev(ccrVO.getOtherPayment());
                ccrVO.setOtherPaymentTypePrev(ccrVO.getOtherPaymentType());
                ccrVO.setOtherDocNumberPrev(ccrVO.getOtherDocNumber());
                ccrVO.setCouponPaymentPrev(ccrVO.getCouponPayment());
                ccrVO.setCommentPrev(ccrVO.getComment());
                ccrVO.setStatusIdPrev(ccrVO.getStatusId());
                ccrVO.setOtherCommentPrev(ccrVO.getOtherComment());
                ccrVO.setRcptNbrPrev(ccrVO.getRcptNbr());
                ccrVO.setBillAccountPrev(ccrVO.getBillAccount());
                
              //code needed to be added here for the update to show the miscDate,miscNbr
                if(rs.getDate(20) == null) {
                	ccrVO.setMiscDate(null);
                } else {
                	ccrVO.setMiscDate(new SimpleDateFormat("MM/dd/yyyy").format(rs.getDate(20)));
                }
                ccrVO.setMiscNbr(rs.getString(21));
                
//                String miscQry = "select MISCELLANEOUS_DATE, MISCELLANEOUS_NBR from Prepaid where PREPAID_ID_NBR=" + ccrVO.getPrepaidId();
//                Statement stmnt = conn.createStatement();
//                ResultSet miscRs = stmnt.executeQuery(miscQry);
//
//                while (miscRs.next()) {
//                	String miscNbr = miscRs.getString("MISCELLANEOUS_NBR");
//                	java.util.Date date =  miscRs.getDate("MISCELLANEOUS_DATE");
//                	DateFormat format = new SimpleDateFormat("MM/dd/yyyy");
//                	
//	                	if(date == null){
//	                		ccrVO.setMiscDate(null);
//	                	} else {
//	                		ccrVO.setMiscDate(format.format(date));
//	                	}
//                	ccrVO.setMiscNbr(miscNbr);
//                      }	
                
                colDet.add(ccrVO);
            }
            result = new Hashtable();
            result.put("NUMBEROFPAGES", numberOfPages);
            result.put("RESULTSET", colDet);
            return result;
        }
        catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getPrepaidDetailsTable() method of PrepPoaDaoBean class.", e);
        }
        finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
    }

    public java.util.Hashtable getPrepaidDiscrepanciesTable(java.lang.String locationCd, Integer pageNumber) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        Integer numberOfPages = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_PREPAID_DISCREPANCIES_QUERY(?,?,?,?,?); END;");

            cs.setString(1, locationCd);
            cs.setInt(2, pageNumber.intValue());
            cs.setInt(3, 25); //! Hard coded now
            cs.registerOutParameter(4, oracle.jdbc.OracleTypes.CURSOR);
            cs.registerOutParameter(5, oracle.jdbc.OracleTypes.INTEGER);
            cs.execute();
            rs = (ResultSet) cs.getObject(4);
            numberOfPages = (Integer) cs.getObject(5);
            Collection colDisc = new ArrayList();
            while (rs.next()) {
                PrepaidDscrTableVO ppVO = new PrepaidDscrTableVO();
                ppVO.setPrepaidDscrId(new Integer(rs.getInt(1)));
                ppVO.setProcessDt(rs.getDate(2));
                ppVO.setAwbNbr(rs.getString(3));
                ppVO.setCourierId(rs.getString(4));
                ppVO.setPaymentCurrency(rs.getString(5));
                ppVO.setFreightAmtInVisa(rs.getDouble(6));
                ppVO.setDiscrepancyFound(rs.getString(7));
                ppVO.setDiscrepancyRsn(rs.getString(8));
                ppVO.setShipDate(rs.getDate(9));
                ppVO.setPux16Amount(rs.getDouble(10));
                ppVO.setCouponAmount(rs.getDouble(11));
                ppVO.setComments(rs.getString(12));
                ppVO.setStatusId(rs.getInt(13));
                colDisc.add(ppVO);
            }
            Hashtable result = new Hashtable();
            result.put("RESULTSET", colDisc);
            result.put("NUMBEROFPAGES", numberOfPages);
            return result;
        }
        catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getPrepaidDiscrepanciesTable() method of PrepPoaDaoBean class.", e);
        }
        finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }
            rs = null;
            cs = null;
            conn = null;
        }
    }

    public java.util.Collection getPrepaidUsedCurrencies(String locationCd, String employeeId) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;

        try {
           /*/* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_GET_PREPAID_USED_CURRENCIES(?,?,?); END;");

            cs.setString(1, locationCd);
            cs.setString(2, employeeId);
            cs.registerOutParameter(3, oracle.jdbc.OracleTypes.CURSOR);
            cs.execute();
            rs = (ResultSet) cs.getObject(3);
            Collection colDet = new ArrayList();
            while (rs.next()) {
                colDet.add(rs.getString(1));
            }
            return colDet;

        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getUsedCurrencies() method of PrepPoaDaoBean class.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
    }

    public double getSurchargesTotalByPoaDetail(int poaDetailId) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;

        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("SELECT SUM(POA_SRCHG_AMT) FROM POA_SURCHARGES WHERE POA_DETL_ID_NBR = ?");

            cs.setInt(1, poaDetailId);
            rs = cs.executeQuery();
            if (rs.next()) {
                return rs.getDouble(1);
            } else {
                return 0;
            }
        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getUsedCurrencies() method of PrepPoaDaoBean class.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
    }

    public java.util.Hashtable getPoaOustInvoices(String accountNbr, String invoiceNbr, Integer pageNumber) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        Hashtable result = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_GET_OUTST_INVOICES(?,?,?,?,?,?); END;");

            if (invoiceNbr != null && !"".equals(invoiceNbr))
                cs.setString(1, invoiceNbr);
            else
                cs.setNull(1, oracle.jdbc.OracleTypes.VARCHAR);

            if (accountNbr != null && !"".equals(accountNbr))
                cs.setString(2, accountNbr);
            else
                cs.setNull(2, oracle.jdbc.OracleTypes.VARCHAR);

            cs.setInt(3, pageNumber.intValue());
            cs.setInt(4, 25); //Hard coded!!
            cs.registerOutParameter(5, oracle.jdbc.OracleTypes.CURSOR);
            cs.registerOutParameter(6, oracle.jdbc.OracleTypes.INTEGER);
            cs.execute();

            rs = (ResultSet) cs.getObject(5);
            Integer numberOfPages = (Integer) cs.getObject(6);
            Collection colOutst = new ArrayList();
            while (rs.next()) {
                PoaOutstInvoicesVO poVO = new PoaOutstInvoicesVO();
                poVO.setFedexAccountNbr(rs.getString(1));
                poVO.setCustomerNm(rs.getString(2));
                poVO.setInvoiceNbr(rs.getString(3));
                poVO.setInvoiceDt(rs.getDate(4));
                poVO.setCountryCd(rs.getString(5));
                poVO.setCurrencyCd(rs.getString(6));
                poVO.setExchRate(rs.getDouble(7));
                poVO.setInvoiceAmt(rs.getDouble(8));
                poVO.setAmtDue(rs.getDouble(9));
                poVO.setInvoiceAmtUsd(rs.getDouble(10));
                poVO.setAmtDueUsd(rs.getDouble(11));
                poVO.setFiscal(rs.getString(12));
                poVO.setDispute(rs.getInt(13));
                colOutst.add(poVO);
            }
            result = new Hashtable();
            result.put("RESULTSET", colOutst);
            result.put("NUMBEROFPAGES", numberOfPages);
            return result;

        }
        catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getPoaOustInvoices() method of PrepPoaDaoBean class.", e);
        }
        finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
    }


    public java.util.Collection getLocationsRIHFeed() throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;

        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_GET_LOCATIONS_RIH_FEED(?); END;");

            cs.registerOutParameter(1, oracle.jdbc.OracleTypes.CURSOR);
            cs.execute();
            rs = (ResultSet) cs.getObject(1);
            Collection colDet = new ArrayList();
            while (rs.next()) {
                TasksVO task = new TasksVO();
                task.setLocationCd(rs.getString(1));
                task.setTasksId(new Integer(rs.getInt(2)));
                task.setRunMonTime(rs.getString(3)); //this will hold the date to be queried. It is a workaround to reuse TasksVO class
                colDet.add(task);
            }
            return colDet;

        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getLocationsRIHFeed() method of PrepPoaDaoBean class.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
    }


    /**
     * Method useful to get data from DB about records splitted by currency.
     *
     * @param locationCd
     * @param employeeId
     * @return Collection
     * @throws DAOException
     */
    public java.util.Hashtable getSplitPrepaidTable(String locationCd, String employeeId, Integer pageNumber, Integer rowsByPage, String sortColumn, String sortDirection) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        Hashtable result = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();

            cs = conn.prepareCall("BEGIN SP_SPLIT_PREPAID_PAYMENTS(?,?,?,?,?,?,?,?); END;");
            cs.setString(1, locationCd);
            cs.setString(2, employeeId);
            cs.setInt(3, pageNumber.intValue());
            cs.setInt(4, rowsByPage.intValue());
            cs.setString(5, sortColumn);
            cs.setString(6, sortDirection);
            cs.registerOutParameter(7, oracle.jdbc.OracleTypes.CURSOR);
            cs.registerOutParameter(8, oracle.jdbc.OracleTypes.INTEGER);

            cs.execute();

            rs = (ResultSet) cs.getObject(7);
            Integer numberOfPages = (Integer) cs.getObject(8);
            Collection colDet = new ArrayList();

            while (rs.next()) {
                PrepaidDetailsTableVO ccrVO = new PrepaidDetailsTableVO();
                ccrVO.setPrepaidId(rs.getInt(1));
                ccrVO.setAwbNumber(rs.getString(2));
                ccrVO.setAwbDate(rs.getDate(3));
                ccrVO.setCustomerNm(rs.getString(4));
                ccrVO.setPaymentCurrency(rs.getString(5));
                ccrVO.setCashPayment(rs.getDouble(6));
                ccrVO.setOtherPayment(rs.getDouble(7));
                ccrVO.setOtherPaymentType(rs.getInt(8));
                ccrVO.setOtherDocNumber(rs.getString(9));
                ccrVO.setCouponPayment(rs.getDouble(10));
                ccrVO.setScanAmount(rs.getDouble(11));
                ccrVO.setComment(rs.getString(12));
                ccrVO.setStatusId(rs.getInt(13));
                ccrVO.setExchRate(rs.getDouble(14));
                ccrVO.setOtherComment(rs.getString(15));
                ccrVO.setSurChargesTotal(rs.getDouble(16));
                ccrVO.setRcptNbr(rs.getString(17));
                ccrVO.setEmployeeNm(rs.getString(18));
                ccrVO.setCourierId(rs.getString(19));
                ccrVO.setBillAccount(rs.getString(20));
                
                ccrVO.setCashPaymentPrev(ccrVO.getCashPayment());
                ccrVO.setOtherPaymentPrev(ccrVO.getOtherPayment());
                ccrVO.setOtherPaymentTypePrev(ccrVO.getOtherPaymentType());
                ccrVO.setOtherDocNumberPrev(ccrVO.getOtherDocNumber());
                ccrVO.setCouponPaymentPrev(ccrVO.getCouponPayment());
                ccrVO.setCommentPrev(ccrVO.getComment());
                ccrVO.setStatusIdPrev(ccrVO.getStatusId());
                ccrVO.setOtherCommentPrev(ccrVO.getOtherComment());
                ccrVO.setRcptNbrPrev(ccrVO.getRcptNbr());
                ccrVO.setBillAccountPrev(ccrVO.getBillAccount());
                //changes for the two columns added needed to be done here.
                
                
                colDet.add(ccrVO);
            }
            result = new Hashtable();
            result.put("NUMBEROFPAGES", numberOfPages);
            result.put("RESULTSET", colDet);
            return result;
        }
        catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getPrepaidDetailsTable() method of PrepPoaDaoBean class.", e);
        }
        finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }
            rs = null;
            cs = null;
            conn = null;
        }
    }

    public java.util.Collection getAllPreStatus() throws DAOException {
        Connection conn = null;
        PreparedStatement cs = null;
        ResultSet rs = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareStatement("SELECT STATUS_ID_NBR, STATUS_DESC FROM PRE_STATUS WHERE PRE_PG_FLG=1");

            rs = cs.executeQuery();
            Collection colStatus = new ArrayList();
            while (rs.next()) {
                PreStatusVO preVO = new PreStatusVO();
                preVO.setStatusIdNbr(new Integer(rs.getInt(1)));
                preVO.setStatusDesc(rs.getString(2));
                colStatus.add(preVO);
            }
            return colStatus;

        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getAllPreStatus() method of PrepPoaDaoBean class.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;

        }

    }

    public TotalSummaryVO getPrepaidDetailsTotal(String locationCd,
                                                 String employeeId,
                                                 String currencyCode,
                                                 Integer pageNumber,
                                                 Integer rowsByPage,
                                                 String sortColumn,
                                                 String sortDirection) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        TotalSummaryVO totalSummaryVO = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_CALC_PREPAID_TOTALS(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); END;");

            cs.setString(1, locationCd);
            cs.setString(2, employeeId);
            cs.setString(3, currencyCode);
            cs.setInt(4, pageNumber.intValue());
            cs.setInt(5, rowsByPage.intValue());
            cs.setString(6, sortColumn);
            cs.setString(7, sortDirection);
            cs.registerOutParameter(8, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(9, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(10, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(11, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(12, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(13, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(14, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(15, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(16, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(17, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(18, oracle.jdbc.OracleTypes.INTEGER);
            cs.execute();
            totalSummaryVO = new TotalSummaryVO();
            totalSummaryVO.setCashTotal((Double) cs.getObject(8));
            totalSummaryVO.setCouponTotal((Double) cs.getObject(9));
            totalSummaryVO.setDepositTotal((Double) cs.getObject(10));
            totalSummaryVO.setCreditCardTotal((Double) cs.getObject(11));
            totalSummaryVO.setCheckTotal((Double) cs.getObject(12));
            totalSummaryVO.setCashSubTotal((Double) cs.getObject(13));
            totalSummaryVO.setCouponSubTotal((Double) cs.getObject(14));
            totalSummaryVO.setDepositSubTotal((Double) cs.getObject(15));
            totalSummaryVO.setCreditCardSubTotal((Double) cs.getObject(16));
            totalSummaryVO.setCheckSubTotal((Double) cs.getObject(17));
            totalSummaryVO.setStatusCd((Integer) cs.getObject(18));
            return totalSummaryVO;
        }
        catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getPrepaidDetailTotal() method of PrepPoaDaoBean class.", e);
        }
        finally {
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }

            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            cs = null;
            conn = null;
        }
    }

    public TotalSummaryVO getPrepaidDetailsSplitTotal(String locationCd,
                                                      String employeeId,
                                                      Integer pageNumber,
                                                      Integer rowsByPage,
                                                      String sortColumn,
                                                      String sortDirection) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        TotalSummaryVO totalSummaryVO = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_CALC_SPLIT_PREPAID_TOTALS(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); END;");

            cs.setString(1, locationCd);
            cs.setString(2, employeeId);
            cs.setInt(3, pageNumber.intValue());
            cs.setInt(4, rowsByPage.intValue());
            cs.setString(5, sortColumn);
            cs.setString(6, sortDirection);
            cs.registerOutParameter(7, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(8, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(9, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(10, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(11, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(12, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(13, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(14, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(15, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(16, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(17, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(18, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(19, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(20, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(21, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(22, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(23, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(24, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(25, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(26, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(27, oracle.jdbc.OracleTypes.INTEGER);
            cs.execute();
            totalSummaryVO = new TotalSummaryVO();
            totalSummaryVO.setCashTotal((Double) cs.getObject(7));
            totalSummaryVO.setCouponTotal((Double) cs.getObject(8));
            totalSummaryVO.setDepositTotal((Double) cs.getObject(9));
            totalSummaryVO.setCreditCardTotal((Double) cs.getObject(10));
            totalSummaryVO.setCheckTotal((Double) cs.getObject(11));
            totalSummaryVO.setCashSubTotal((Double) cs.getObject(12));
            totalSummaryVO.setCouponSubTotal((Double) cs.getObject(13));
            totalSummaryVO.setDepositSubTotal((Double) cs.getObject(14));
            totalSummaryVO.setCreditCardSubTotal((Double) cs.getObject(15));
            totalSummaryVO.setCheckSubTotal((Double) cs.getObject(16));
            totalSummaryVO.setUsdCashTotal((Double) cs.getObject(17));
            totalSummaryVO.setUsdCouponTotal((Double) cs.getObject(18));
            totalSummaryVO.setUsdDepositTotal((Double) cs.getObject(19));
            totalSummaryVO.setUsdCreditCardTotal((Double) cs.getObject(20));
            totalSummaryVO.setUsdCheckTotal((Double) cs.getObject(21));
            totalSummaryVO.setUsdCashSubTotal((Double) cs.getObject(22));
            totalSummaryVO.setUsdCouponSubTotal((Double) cs.getObject(23));
            totalSummaryVO.setUsdDepositSubTotal((Double) cs.getObject(24));
            totalSummaryVO.setUsdCreditCardSubTotal((Double) cs.getObject(25));
            totalSummaryVO.setUsdCheckSubTotal((Double) cs.getObject(26));
            totalSummaryVO.setStatusCd((Integer) cs.getObject(27));
            return totalSummaryVO;
        }
        catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getPrepaidDetailSplitTotal() method of PrepPoaDaoBean class.", e);
        }
        finally {
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }

            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            cs = null;
            conn = null;
        }
    }

    /**
     * Method to get data to close from the GROUND table
     *
     * @param locationCd
     * @param employeeId
     * @param currencyCode
     * @param pageNumber
     * @param rowsByPage
     * @param sortColumn
     * @param sortDirection
     * @return HashTable od payments
     * @throws DAOException
     */
    public java.util.Hashtable getGroundDetailsTable(String locationCd, String employeeId, String currencyCode, Integer pageNumber, Integer rowsByPage, String sortColumn, String sortDirection) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        Hashtable result = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_GROUND_DETAILS(?,?,?,?,?,?,?,?,?); END;");

            cs.setString(1, locationCd);
            cs.setString(2, employeeId);
            cs.setString(3, currencyCode);
            cs.setInt(4, pageNumber.intValue());
            cs.setInt(5, rowsByPage.intValue());
            cs.setString(6, sortColumn);
            cs.setString(7, sortDirection);
            cs.registerOutParameter(8, oracle.jdbc.OracleTypes.CURSOR);
            cs.registerOutParameter(9, oracle.jdbc.OracleTypes.INTEGER);

            cs.execute();
            rs = (ResultSet) cs.getObject(8);
            Integer numberOfPages = (Integer) cs.getObject(9);
            Collection colDet = new ArrayList();
            while (rs.next()) {
                GroundDetailsTableVO ccrVO = new GroundDetailsTableVO();
                ccrVO.setGroundId(rs.getInt(1));
                ccrVO.setGroundTrackNumber(rs.getString(2));
                ccrVO.setTrackDate(rs.getDate(3));
                ccrVO.setCashPayment(rs.getDouble(4));
                ccrVO.setOtherPayment(rs.getDouble(5));
                ccrVO.setOtherPaymentType(rs.getInt(6));
                ccrVO.setOtherDocNumber(rs.getString(7));
                ccrVO.setCouponPayment(rs.getDouble(8));
                ccrVO.setComment(rs.getString(9));
                ccrVO.setStatusId(rs.getInt(10));
                ccrVO.setExchRate(rs.getDouble(11));
                ccrVO.setOtherComment(rs.getString(12));
                ccrVO.setRcptNbr(rs.getString(13));
                ccrVO.setEmployeeNm(rs.getString(14));
                ccrVO.setCourierId(rs.getString(15));
                ccrVO.setCustNm(rs.getString(16));

                ccrVO.setCashPaymentPrev(ccrVO.getCashPayment());
                ccrVO.setOtherPaymentPrev(ccrVO.getOtherPayment());
                ccrVO.setOtherPaymentTypePrev(ccrVO.getOtherPaymentType());
                ccrVO.setOtherDocNumberPrev(ccrVO.getOtherDocNumber());
                ccrVO.setCouponPaymentPrev(ccrVO.getCouponPayment());
                ccrVO.setCommentPrev(ccrVO.getComment());
                ccrVO.setStatusIdPrev(ccrVO.getStatusId());
                ccrVO.setOtherCommentPrev(ccrVO.getOtherComment());
                ccrVO.setRcptNbrPrev(ccrVO.getRcptNbr());
                ccrVO.setCustNmPrev(ccrVO.getCustNm());
                
                //to set the value of miscDate,miscNbr to ccrVO
                if(rs.getDate(18) == null) {
                	ccrVO.setMiscDate(null);
                } else {
                	ccrVO.setMiscDate(new SimpleDateFormat("MM/dd/yyyy").format(rs.getDate(18)));
                }
                ccrVO.setMiscNbr(rs.getString(19));                
                
//              //code needed to be added here for the update to show the miscDate,miscNbr
//                String miscQry = "select MISCELLANEOUS_DATE, MISCELLANEOUS_NBR from Ground where GRND_SHP_ID_NBR=" + ccrVO.getGroundId();
//                Statement stmnt = conn.createStatement();
//                ResultSet miscRs = stmnt.executeQuery(miscQry);
//
//                while (miscRs.next()) {
//                	String miscNbr = miscRs.getString("MISCELLANEOUS_NBR");
//                	java.util.Date date =  miscRs.getDate("MISCELLANEOUS_DATE");
//                	DateFormat format = new SimpleDateFormat("MM/dd/yyyy");
//                	
//                	if(date == null){
//                		ccrVO.setMiscDate(null);
//                	} else {
//                		ccrVO.setMiscDate(format.format(date));
//                	}
//                	ccrVO.setMiscNbr(miscNbr);
//               }	                
                
                colDet.add(ccrVO);
            }
            result = new Hashtable();
            result.put("NUMBEROFPAGES", numberOfPages);
            result.put("RESULTSET", colDet);
            return result;
        }
        catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getGroundDetailsTable() method of PrepPoaDaoBean class.", e);
        }
        finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
    }

    /**
     * Method useful to get data from GROUND table about records splitted by currency.
     *
     * @param locationCd
     * @param employeeId
     * @return Collection
     * @throws DAOException
     */
    public java.util.Hashtable getSplitGroundTable(String locationCd, String employeeId, Integer pageNumber, Integer rowsByPage, String sortColumn, String sortDirection) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        Hashtable result = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();

            cs = conn.prepareCall("BEGIN SP_SPLIT_GROUND_PAYMENTS(?,?,?,?,?,?,?,?); END;");
            cs.setString(1, locationCd);
            cs.setString(2, employeeId);
            cs.setInt(3, pageNumber.intValue());
            cs.setInt(4, rowsByPage.intValue());
            cs.setString(5, sortColumn);
            cs.setString(6, sortDirection);
            cs.registerOutParameter(7, oracle.jdbc.OracleTypes.CURSOR);
            cs.registerOutParameter(8, oracle.jdbc.OracleTypes.INTEGER);

            cs.execute();

            rs = (ResultSet) cs.getObject(7);
            Integer numberOfPages = (Integer) cs.getObject(8);
            Collection colDet = new ArrayList();

            while (rs.next()) {
                GroundDetailsTableVO ccrVO = new GroundDetailsTableVO();
                ccrVO.setGroundId(rs.getInt(1));
                ccrVO.setGroundTrackNumber(rs.getString(2));
                ccrVO.setTrackDate(rs.getDate(3));
                ccrVO.setPaymentCurrency(rs.getString(4));
                ccrVO.setCashPayment(rs.getDouble(5));
                ccrVO.setOtherPayment(rs.getDouble(6));
                ccrVO.setOtherPaymentType(rs.getInt(7));
                ccrVO.setOtherDocNumber(rs.getString(8));
                ccrVO.setCouponPayment(rs.getDouble(9));
                ccrVO.setComment(rs.getString(10));
                ccrVO.setStatusId(rs.getInt(11));
                ccrVO.setExchRate(rs.getDouble(12));
                ccrVO.setOtherComment(rs.getString(13));
                ccrVO.setRcptNbr(rs.getString(14));
                ccrVO.setEmployeeNm(rs.getString(15));
                ccrVO.setCourierId(rs.getString(16));
                ccrVO.setCustNm(rs.getString(17));


                ccrVO.setCashPaymentPrev(ccrVO.getCashPayment());
                ccrVO.setOtherPaymentPrev(ccrVO.getOtherPayment());
                ccrVO.setOtherPaymentTypePrev(ccrVO.getOtherPaymentType());
                ccrVO.setOtherDocNumberPrev(ccrVO.getOtherDocNumber());
                ccrVO.setCouponPaymentPrev(ccrVO.getCouponPayment());
                ccrVO.setCommentPrev(ccrVO.getComment());
                ccrVO.setStatusIdPrev(ccrVO.getStatusId());
                ccrVO.setOtherCommentPrev(ccrVO.getOtherComment());
                ccrVO.setRcptNbrPrev(ccrVO.getRcptNbr());
                colDet.add(ccrVO);
            }
            result = new Hashtable();
            result.put("NUMBEROFPAGES", numberOfPages);
            result.put("RESULTSET", colDet);
            return result;
        }
        catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getSplitGroundTable() method of PrepPoaDaoBean class.", e);
        }
        finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }
            rs = null;
            cs = null;
            conn = null;
        }
    }

    /**
     * Method to get the courrencies used on ground payments.
     *
     * @param locationCd
     * @param courier
     * @return Collection of currencies
     * @throws DAOException
     */
    public Collection getGroundUsedCurrencies(String locationCd, String courier) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;

        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_GET_GROUND_USED_CURRENCIES(?,?,?); END;");

            cs.setString(1, locationCd);
            cs.setString(2, courier);
            cs.registerOutParameter(3, oracle.jdbc.OracleTypes.CURSOR);
            cs.execute();
            rs = (ResultSet) cs.getObject(3);
            Collection colDet = new ArrayList();
            while (rs.next()) {
                colDet.add(rs.getString(1));
            }
            return colDet;

        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getGroundUsedCurrencies(String locationCd, String courier) method of PrepPoaDaoBean class.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
    }

    public TotalSummaryVO getGroundDetailsTotal(String locationCd, String employeeId, String currencyCode, Integer pageNumber, Integer rowsByPage) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        TotalSummaryVO totalSummaryVO = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_CALC_GROUND_TOTALS(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); END;");

            cs.setString(1, locationCd);
            cs.setString(2, employeeId);
            cs.setString(3, currencyCode);
            cs.setInt(4, pageNumber.intValue());
            cs.setInt(5, rowsByPage.intValue());
            cs.registerOutParameter(6, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(7, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(8, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(9, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(10, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(11, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(12, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(13, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(14, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(15, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(16, oracle.jdbc.OracleTypes.INTEGER);
            cs.execute();
            totalSummaryVO = new TotalSummaryVO();
            totalSummaryVO.setCashTotal((Double) cs.getObject(6));
            totalSummaryVO.setCouponTotal((Double) cs.getObject(7));
            totalSummaryVO.setDepositTotal((Double) cs.getObject(8));
            totalSummaryVO.setCreditCardTotal((Double) cs.getObject(9));
            totalSummaryVO.setCheckTotal((Double) cs.getObject(10));
            totalSummaryVO.setCashSubTotal((Double) cs.getObject(11));
            totalSummaryVO.setCouponSubTotal((Double) cs.getObject(12));
            totalSummaryVO.setDepositSubTotal((Double) cs.getObject(13));
            totalSummaryVO.setCreditCardSubTotal((Double) cs.getObject(14));
            totalSummaryVO.setCheckSubTotal((Double) cs.getObject(15));
            totalSummaryVO.setStatusCd((Integer) cs.getObject(16));
            return totalSummaryVO;
        }
        catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getGroundDetailsTotal(String locationCd, String employeeId, String currencyCode, Integer pageNumber, Integer rowsByPage) method of PrepPoaDaoBean class.", e);
        }
        finally {
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }

            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            cs = null;
            conn = null;
        }
    }

    public TotalSummaryVO getGroundDetailsSplitTotal(String locationCd, String employeeId, Integer pageNumber, Integer rowsByPage) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        TotalSummaryVO totalSummaryVO = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_CALC_SPLIT_GROUND_TOTALS(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); END;");

            cs.setString(1, locationCd);
            cs.setString(2, employeeId);
            cs.setInt(3, pageNumber.intValue());
            cs.setInt(4, rowsByPage.intValue());
            cs.registerOutParameter(5, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(6, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(7, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(8, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(9, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(10, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(11, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(12, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(13, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(14, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(15, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(16, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(17, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(18, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(19, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(20, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(21, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(22, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(23, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(24, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(25, oracle.jdbc.OracleTypes.INTEGER);
            cs.execute();
            totalSummaryVO = new TotalSummaryVO();
            totalSummaryVO.setCashTotal((Double) cs.getObject(5));
            totalSummaryVO.setCouponTotal((Double) cs.getObject(6));
            totalSummaryVO.setDepositTotal((Double) cs.getObject(7));
            totalSummaryVO.setCreditCardTotal((Double) cs.getObject(8));
            totalSummaryVO.setCheckTotal((Double) cs.getObject(9));
            totalSummaryVO.setCashSubTotal((Double) cs.getObject(10));
            totalSummaryVO.setCouponSubTotal((Double) cs.getObject(11));
            totalSummaryVO.setDepositSubTotal((Double) cs.getObject(12));
            totalSummaryVO.setCreditCardSubTotal((Double) cs.getObject(13));
            totalSummaryVO.setCheckSubTotal((Double) cs.getObject(14));
            totalSummaryVO.setUsdCashTotal((Double) cs.getObject(15));
            totalSummaryVO.setUsdCouponTotal((Double) cs.getObject(16));
            totalSummaryVO.setUsdDepositTotal((Double) cs.getObject(17));
            totalSummaryVO.setUsdCreditCardTotal((Double) cs.getObject(18));
            totalSummaryVO.setUsdCheckTotal((Double) cs.getObject(19));
            totalSummaryVO.setUsdCashSubTotal((Double) cs.getObject(20));
            totalSummaryVO.setUsdCouponSubTotal((Double) cs.getObject(21));
            totalSummaryVO.setUsdDepositSubTotal((Double) cs.getObject(22));
            totalSummaryVO.setUsdCreditCardSubTotal((Double) cs.getObject(23));
            totalSummaryVO.setUsdCheckSubTotal((Double) cs.getObject(24));
            totalSummaryVO.setStatusCd((Integer) cs.getObject(25));
            return totalSummaryVO;
        }
        catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getGroundDetailsSplitTotal(String locationCd, String employeeId, Integer pageNumber, Integer rowsByPage) method of PrepPoaDaoBean class.", e);
        }
        finally {
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }

            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            cs = null;
            conn = null;
        }
    }

    public TotalSummaryVO getPoaDetailsTotal(String locationCd, String employeeId, String currencyCode, Integer pageNumber, Integer rowsByPage) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        TotalSummaryVO totalSummaryVO = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_CALC_POA_TOTALS(?,?,?,?,?,?,?,?,?,?); END;");
            cs.setString(1, locationCd);
            cs.setString(2, employeeId);
            cs.setString(3, currencyCode);
            cs.setInt(4, pageNumber.intValue());
            cs.setInt(5, rowsByPage.intValue());
            cs.registerOutParameter(6, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(7, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(8, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(9, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(10, oracle.jdbc.OracleTypes.FLOAT);
            cs.execute();
            totalSummaryVO = new TotalSummaryVO();
            totalSummaryVO.setCashTotal((Double) cs.getObject(6));
            totalSummaryVO.setCouponTotal((Double) cs.getObject(7));
            totalSummaryVO.setDepositTotal((Double) cs.getObject(8));
            totalSummaryVO.setCreditCardTotal((Double) cs.getObject(9));
            totalSummaryVO.setCheckTotal((Double) cs.getObject(10));
            return totalSummaryVO;
        }
        catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getPoaDetailTotal() method of PrepPoaDaoBean class.", e);
        }
        finally {
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }

            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            cs = null;
            conn = null;
        }
    }

    /**
     * Method to get data to close from the OAC table
     *
     * @param locationCd
     * @param employeeId
     * @param currencyCode
     * @param pageNumber
     * @param rowsByPage
     * @param sortColumn
     * @param sortDirection
     * @return HashTable with data and paging information
     * @throws DAOException
     */
    public java.util.Hashtable getOacDetailsTable(String locationCd, String employeeId, String currencyCode, Integer pageNumber, Integer rowsByPage, String sortColumn, String sortDirection) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        Hashtable result = null;
        OacController oacCntrl = new OacController();

        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_OAC_DETAILS(?,?,?,?,?,?,?,?,?); END;");

            cs.setString(1, locationCd);
            cs.setString(2, employeeId);
            cs.setString(3, currencyCode);
            cs.setInt(4, pageNumber.intValue());
            cs.setInt(5, rowsByPage.intValue());
            cs.setString(6, sortColumn);
            cs.setString(7, sortDirection);
            cs.registerOutParameter(8, oracle.jdbc.OracleTypes.CURSOR);
            cs.registerOutParameter(9, oracle.jdbc.OracleTypes.INTEGER);

            cs.execute();
            rs = (ResultSet) cs.getObject(8);
            Integer numberOfPages = (Integer) cs.getObject(9);
            Collection colDet = new ArrayList();
            while (rs.next()) {
                OACDetailsTableVO ccrVO = new OACDetailsTableVO();
                ccrVO.setOacId(rs.getInt(1));
                ccrVO.setOacDate(rs.getDate(2));
                ccrVO.setCashPayment(rs.getDouble(3));
                ccrVO.setOtherPayment(rs.getDouble(4));
                ccrVO.setOtherPaymentType(rs.getInt(5));
                ccrVO.setOtherDocNumber(rs.getString(6));
                ccrVO.setComment(rs.getString(7));
                ccrVO.setStatusId(rs.getInt(8));
                ccrVO.setExchRate(rs.getDouble(9));
                ccrVO.setOtherComment(rs.getString(10));
                ccrVO.setRcptNbr(rs.getString(11));
                ccrVO.setEmployeeNm(rs.getString(12));
                ccrVO.setCourierId(rs.getString(13));

                ccrVO.setCashPaymentPrev(ccrVO.getCashPayment());
                ccrVO.setOtherPaymentPrev(ccrVO.getOtherPayment());
                ccrVO.setOtherPaymentTypePrev(ccrVO.getOtherPaymentType());
                ccrVO.setOtherDocNumberPrev(ccrVO.getOtherDocNumber());
                ccrVO.setCommentPrev(ccrVO.getComment());
                ccrVO.setStatusIdPrev(ccrVO.getStatusId());
                ccrVO.setOtherCommentPrev(ccrVO.getOtherComment());
                ccrVO.setRcptNbrPrev(ccrVO.getRcptNbr());

                //Set the awbs collection associated to the outbound ancillary row
                Collection oacAwbs = new OacAwbController().getOacAwbOacAwbsByOacId(new Integer(ccrVO.getOacId()));
                Iterator it = oacAwbs.iterator();
                String oacAwbsString[] = new String[oacAwbs.size()];
                for (int i = 0; it.hasNext(); i++) {
                    oacAwbsString[i] = ((OacAwbVO) it.next()).getAwbNbr();
                }
                ccrVO.setAwbs(oacAwbsString);

                colDet.add(ccrVO);
            }
            result = new Hashtable();
            result.put("NUMBEROFPAGES", numberOfPages);
            result.put("RESULTSET", colDet);
            return result;
        }
        catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getOacDetailsTable() method of PrepPoaDaoBean class.", e);
        }
        finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
    }

    /**
     * This method is to get a collection of awbs that are in prepaid table but are not in oac table
     *
     * @param locationCd
     * @param employeeId
     * @param currencyCode
     * @return Collection of awbs
     * @throws DAOException
     */
    public Collection getAwbsToOacs(String locationCd, String employeeId, String currencyCode) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        Collection result = new ArrayList();

        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_GET_AWBS_PRP_TO_OAC(?,?,?,?); END;");

            cs.setString(1, locationCd);
            cs.setString(2, employeeId);
            cs.setString(3, currencyCode);
            cs.registerOutParameter(4, oracle.jdbc.OracleTypes.CURSOR);

            cs.execute();
            rs = (ResultSet) cs.getObject(4);

            while (rs.next()) {
                result.add(rs.getString(1));
            }

            return result;
        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getAwbsToOacs(String locationCd, String employeeId, String currencyCode) method of PrepPoaDaoBean class.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
    }//Close getOacDetailsTable method


    /**
     * Method to get data from oac table with payments with dual currencies
     *
     * @param locationCd
     * @param employeeId
     * @param pageNumber
     * @param rowsByPage
     * @param sortColumn
     * @param sortDirection
     * @return HashMap of payments and paging data
     * @throws DAOException
     */
    public Hashtable getSplitOacTable(String locationCd, String employeeId, Integer pageNumber, Integer rowsByPage, String sortColumn, String sortDirection) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        Hashtable result = null;
        OacController oacCntrl = new OacController();

        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_SPLIT_OAC_PAYMENTS(?,?,?,?,?,?,?,?); END;");

            cs.setString(1, locationCd);
            cs.setString(2, employeeId);
            cs.setInt(3, pageNumber.intValue());
            cs.setInt(4, rowsByPage.intValue());
            cs.setString(5, sortColumn);
            cs.setString(6, sortDirection);
            cs.registerOutParameter(7, oracle.jdbc.OracleTypes.CURSOR);
            cs.registerOutParameter(8, oracle.jdbc.OracleTypes.INTEGER);

            cs.execute();
            rs = (ResultSet) cs.getObject(7);
            Integer numberOfPages = (Integer) cs.getObject(8);
            Collection colDet = new ArrayList();
            while (rs.next()) {
                OACDetailsTableVO ccrVO = new OACDetailsTableVO();
                ccrVO.setOacId(rs.getInt(1));
                ccrVO.setOacDate(rs.getDate(2));
                ccrVO.setPaymentCurrency(rs.getString(3));
                ccrVO.setCashPayment(rs.getDouble(4));
                ccrVO.setOtherPayment(rs.getDouble(5));
                ccrVO.setOtherPaymentType(rs.getInt(6));
                ccrVO.setOtherDocNumber(rs.getString(7));
                ccrVO.setComment(rs.getString(8));
                ccrVO.setStatusId(rs.getInt(9));
                ccrVO.setExchRate(rs.getDouble(10));
                ccrVO.setOtherComment(rs.getString(11));
                ccrVO.setRcptNbr(rs.getString(12));
                ccrVO.setEmployeeNm(rs.getString(13));
                ccrVO.setCourierId(rs.getString(14));

                ccrVO.setCashPaymentPrev(ccrVO.getCashPayment());
                ccrVO.setOtherPaymentPrev(ccrVO.getOtherPayment());
                ccrVO.setOtherPaymentTypePrev(ccrVO.getOtherPaymentType());
                ccrVO.setOtherDocNumberPrev(ccrVO.getOtherDocNumber());
                ccrVO.setCommentPrev(ccrVO.getComment());
                ccrVO.setStatusIdPrev(ccrVO.getStatusId());
                ccrVO.setOtherCommentPrev(ccrVO.getOtherComment());
                ccrVO.setRcptNbrPrev(ccrVO.getRcptNbr());

                //Set the awbs collection associated to the outbound ancillary row
                Collection oacAwbs = new OacAwbController().getOacAwbOacAwbsByOacId(new Integer(ccrVO.getOacId()));
                Iterator it = oacAwbs.iterator();
                String oacAwbsString[] = new String[oacAwbs.size()];
                for (int i = 0; it.hasNext(); i++) {
                    oacAwbsString[i] = ((OacAwbVO) it.next()).getAwbNbr();
                }
                ccrVO.setAwbs(oacAwbsString);

                colDet.add(ccrVO);
            }
            result = new Hashtable();
            result.put("NUMBEROFPAGES", numberOfPages);
            result.put("RESULTSET", colDet);
            return result;
        }
        catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getSplitOacTable() method of PrepPoaDaoBean class.", e);
        }
        finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
    }//Close getSplitOacTable method

    public Collection getOacUsedCurrencies(String locationCd, String employeeId) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;

        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_GET_OAC_USED_CURRENCIES(?,?,?); END;");

            cs.setString(1, locationCd);
            cs.setString(2, employeeId);
            cs.registerOutParameter(3, oracle.jdbc.OracleTypes.CURSOR);
            cs.execute();
            rs = (ResultSet) cs.getObject(3);
            Collection colDet = new ArrayList();
            while (rs.next()) {
                colDet.add(rs.getString(1));
            }
            return colDet;

        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getOacUsedCurrencies(String locationCd, String employeeId) method of PrepPoaDaoBean class.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
    }//Close getOacUsedCurrencies

    /**
     * Method to get totals of payments for the table AOC
     *
     * @param locationCd
     * @param employeeId
     * @param currencyCode
     * @param pageNumber
     * @param rowsByPage
     * @param sortColumn
     * @param sortDirection
     * @return
     * @throws DAOException
     */
    public TotalSummaryVO getOacDetailsTotal(String locationCd,
                                             String employeeId,
                                             String currencyCode,
                                             Integer pageNumber,
                                             Integer rowsByPage,
                                             String sortColumn,
                                             String sortDirection) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        TotalSummaryVO totalSummaryVO = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_CALC_OAC_TOTALS(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); END;");

            cs.setString(1, locationCd);
            cs.setString(2, employeeId);
            cs.setString(3, currencyCode);
            cs.setInt(4, pageNumber.intValue());
            cs.setInt(5, rowsByPage.intValue());
            cs.setString(6, sortColumn);
            cs.setString(7, sortDirection);
            cs.registerOutParameter(8, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(9, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(10, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(11, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(12, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(13, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(14, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(15, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(16, oracle.jdbc.OracleTypes.INTEGER);
            cs.execute();
            totalSummaryVO = new TotalSummaryVO();
            totalSummaryVO.setCashTotal((Double) cs.getObject(8));
            totalSummaryVO.setDepositTotal((Double) cs.getObject(9));
            totalSummaryVO.setCreditCardTotal((Double) cs.getObject(10));
            totalSummaryVO.setCheckTotal((Double) cs.getObject(11));
            totalSummaryVO.setCashSubTotal((Double) cs.getObject(12));
            totalSummaryVO.setDepositSubTotal((Double) cs.getObject(13));
            totalSummaryVO.setCreditCardSubTotal((Double) cs.getObject(14));
            totalSummaryVO.setCheckSubTotal((Double) cs.getObject(15));
            totalSummaryVO.setStatusCd((Integer) cs.getObject(16));
            return totalSummaryVO;
        }
        catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getOacDetailsTotal() method of PrepPoaDaoBean class.", e);
        }
        finally {
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }

            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            cs = null;
            conn = null;
        }
    }//Close method getOacDetailsTotal

    /**
     * Method to get splitted payments from table OAC
     *
     * @param locationCd
     * @param employeeId
     * @param pageNumber
     * @param rowsByPage
     * @param sortColumn
     * @param sortDirection
     * @return TotalSummaryVO
     * @throws DAOException
     */
    public TotalSummaryVO getOacDetailsSplitTotal(String locationCd,
                                                  String employeeId,
                                                  Integer pageNumber,
                                                  Integer rowsByPage,
                                                  String sortColumn,
                                                  String sortDirection) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        TotalSummaryVO totalSummaryVO = null;
        try {
            Hashtable prop=new Hashtable();
            prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);
            prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);
            InitialContext c= new InitialContext(prop);

            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_CALC_SPLIT_OAC_TOTALS(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); END;");

            cs.setString(1, locationCd);
            cs.setString(2, employeeId);
            cs.setInt(3, pageNumber.intValue());
            cs.setInt(4, rowsByPage.intValue());
            cs.setString(5, sortColumn);
            cs.setString(6, sortDirection);
            cs.registerOutParameter(7, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(8, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(9, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(10, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(11, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(12, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(13, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(14, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(15, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(16, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(17, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(18, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(19, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(20, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(21, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(22, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(23, oracle.jdbc.OracleTypes.INTEGER);
            cs.execute();
            totalSummaryVO = new TotalSummaryVO();
            totalSummaryVO.setCashTotal((Double) cs.getObject(7));
            totalSummaryVO.setDepositTotal((Double) cs.getObject(8));
            totalSummaryVO.setCreditCardTotal((Double) cs.getObject(9));
            totalSummaryVO.setCheckTotal((Double) cs.getObject(10));
            totalSummaryVO.setCashSubTotal((Double) cs.getObject(11));
            totalSummaryVO.setDepositSubTotal((Double) cs.getObject(12));
            totalSummaryVO.setCreditCardSubTotal((Double) cs.getObject(13));
            totalSummaryVO.setCheckSubTotal((Double) cs.getObject(14));
            totalSummaryVO.setUsdCashTotal((Double) cs.getObject(15));
            totalSummaryVO.setUsdDepositTotal((Double) cs.getObject(16));
            totalSummaryVO.setUsdCreditCardTotal((Double) cs.getObject(17));
            totalSummaryVO.setUsdCheckTotal((Double) cs.getObject(18));
            totalSummaryVO.setUsdCashSubTotal((Double) cs.getObject(19));
            totalSummaryVO.setUsdDepositSubTotal((Double) cs.getObject(20));
            totalSummaryVO.setUsdCreditCardSubTotal((Double) cs.getObject(21));
            totalSummaryVO.setUsdCheckSubTotal((Double) cs.getObject(22));
            totalSummaryVO.setStatusCd((Integer) cs.getObject(23));
            return totalSummaryVO;
        }
        catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getOacDetailSplitTotal() method of PrepPoaDaoBean class.", e);
        }
        finally {
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }

            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            cs = null;
            conn = null;
        }
    }//Close getOacDetailsSplitTotal
  
    /* Author: Sendil
     * To validate Invoice and Fedex Acct number
     * against the outstanding invoices table
     */
    public boolean isInvoiceFedexAcctMatch(String accountNbr, String invoiceNbr) throws DAOException {
        Connection conn = null;
        PreparedStatement cs = null;
        ResultSet rs = null;
        try {
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareStatement("SELECT * FROM OUTST_INVOICES WHERE ACCT_NBR=? AND INV_NBR=?");
            cs.setString(1,accountNbr);
            cs.setString(2,invoiceNbr);
            
            rs = cs.executeQuery();
            while (rs.next()) {
                return true;
            }
            return false;

        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getInvoiceFedexAcct() method of PrepPoaDaoBean class.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;

        }

    }

}
