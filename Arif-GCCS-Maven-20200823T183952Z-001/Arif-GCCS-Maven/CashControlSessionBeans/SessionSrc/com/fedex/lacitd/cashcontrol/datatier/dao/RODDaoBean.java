package com.fedex.lacitd.cashcontrol.datatier.dao;

import com.fedex.lacitd.cashcontrol.biztier.common.*;
import com.fedex.lacitd.cashcontrol.biztier.facades.SystemUtilsLocal;
import com.fedex.lacitd.cashcontrol.biztier.facades.SystemUtilsLocalHome;
import com.fedex.lacitd.cashcontrol.common.Utils;
import com.fedex.lacitd.cashcontrol.datatier.common.ServiceLocator;
import com.fedex.lacitd.cashcontrol.datatier.controller.EmployeeController;
import com.fedex.lacitd.cashcontrol.datatier.exception.DAOException;
import com.fedex.lacitd.cashcontrol.datatier.exception.ServiceLocatorException;
import com.fedex.lacitd.cashcontrol.datatier.valueobject.*;

import javax.ejb.CreateException;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;
import java.sql.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Hashtable;
import java.util.Iterator;
import oracle.jdbc.*;
import oracle.jdbc.driver.*;

/**
 * Created 10-07-2002 03:27:43 PM
 * Code generated by the Forte For Java EJB Builder
 *
 * @author ccardenas
 */
public class RODDaoBean implements javax.ejb.SessionBean {
    private javax.ejb.SessionContext context;

    /**
     * @see javax.ejb.SessionBean#setSessionContext(javax.ejb.SessionContext)
     */
    public void setSessionContext(javax.ejb.SessionContext aContext) {
        context = aContext;
    }


    /**
     * @see javax.ejb.SessionBean#ejbActivate()
     */
    public void ejbActivate() {

    }


    /**
     * @see javax.ejb.SessionBean#ejbPassivate()
     */
    public void ejbPassivate() {

    }


    /**
     * @see javax.ejb.SessionBean#ejbRemove()
     */
    public void ejbRemove() {

    }


    /**
     * See section 7.10.3 of the EJB 2.0 specification
     */
    public void ejbCreate() {

    }


    public java.util.Collection getAwbToQueryCosmos(java.lang.String locationCd, java.lang.String employeeId) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        try {
            InitialContext c = new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_GET_AWBS_TO_QUERY_COSMOS(?,?,?); END;");


            cs.setString(1, locationCd);
            if (employeeId == null)
                cs.setNull(2, oracle.jdbc.OracleTypes.VARCHAR);
            else
                cs.setString(2, employeeId);

            cs.registerOutParameter(3, oracle.jdbc.OracleTypes.CURSOR);
            cs.execute();
            rs = (ResultSet) cs.getObject(3);
            Collection col = new ArrayList();
            while (rs.next()) {
                RecChangesFromScans recChanges = new RecChangesFromScans();
                recChanges.setRecId(rs.getInt(1));
                recChanges.setRecAwbNumber(rs.getString(2));
                recChanges.setRecTinUniqueId(rs.getString(3));
                recChanges.setRecLastScan(rs.getString(4));

                col.add(recChanges);
            }
            return col;
        } catch (Exception e) {
            throw new DAOException("Awb numbers couldn't be extracted from the database.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
    }

    public java.util.Hashtable getCourierCashRecapTable(String locationCd, String employeeId, String currencyCode, Integer pageNumber, Integer rowsByPage, String sortColumn, String sortDirection) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        Hashtable result = null;
        try {
         /*   Hashtable prop=new Hashtable();
            prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);
            prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();

            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_COURIER_CASH_RECAP(?,?,?,?,?,?,?,?,?); END;");
            cs.setString(1, locationCd);
            cs.setString(2, employeeId);
            cs.setString(3, currencyCode);
            cs.setInt(4, pageNumber.intValue());
            cs.setInt(5, rowsByPage.intValue());
            cs.setString(6, sortColumn);
            cs.setString(7, sortDirection);
            cs.registerOutParameter(8, oracle.jdbc.OracleTypes.CURSOR);
            cs.registerOutParameter(9, oracle.jdbc.OracleTypes.INTEGER);
            cs.execute();
            rs = (ResultSet) cs.getObject(8);
            Integer numberOfPages = (Integer) cs.getObject(9);
            Collection colDet = new ArrayList();
            while (rs.next()) {
                CourierCashRecapTableVO ccrVO = new CourierCashRecapTableVO();
                ccrVO.setRecId(rs.getInt(1));
                ccrVO.setRecAwbNumber(rs.getString(2));
                ccrVO.setCustomerNm(rs.getString(3));
                ccrVO.setRecDate(rs.getDate(4));
                ccrVO.setRecAmount(rs.getDouble(5));
                ccrVO.setRecDex16Amount(rs.getDouble(6));
                ccrVO.setRecCashPayment(rs.getDouble(7));
                ccrVO.setRecOtherPayment(rs.getDouble(8));
                ccrVO.setOtherPaymentType(rs.getInt(9));
                ccrVO.setRecOtherDocNumber(rs.getString(10));
                ccrVO.setOtherComment(rs.getString(11));
                ccrVO.setRecStatusId(rs.getInt(12));
                ccrVO.setRecTrackingStatus(rs.getInt(13));
                ccrVO.setRecComment(rs.getString(14));
                ccrVO.setSurChargesTotal(rs.getDouble(15));
                ccrVO.setRodAmt(rs.getDouble(16));
                ccrVO.setAncCharges(rs.getDouble(17));
                ccrVO.setRecvPrepyAmt(rs.getDouble(18));
                ccrVO.setRcptNbr(rs.getString(19));
                ccrVO.setManuallyEntered(rs.getInt(20) == 1);
                ccrVO.setRecNbr(rs.getString(21));
                ccrVO.setEmpNm(rs.getString(22));
                ccrVO.setEmpIdNbr(rs.getString(23));
                ccrVO.setBillAccount(rs.getString(24));
                // to set the miscDate, miscNbr to the ccrVO
                if(rs.getDate(25) == null) {
                	ccrVO.setMiscDate(null);
                } else {
                	ccrVO.setMiscDate(new SimpleDateFormat("MM/dd/yyyy").format(rs.getDate(25)));
                }
                ccrVO.setMiscNbr(rs.getString(26));

                ccrVO.setRecCashPaymentPrev(ccrVO.getRecCashPayment());
                ccrVO.setRecOtherPaymentPrev(ccrVO.getRecOtherPayment());
                ccrVO.setOtherPaymentTypePrev(ccrVO.getOtherPaymentType());
                ccrVO.setRecOtherDocNumberPrev(ccrVO.getRecOtherDocNumber());
                ccrVO.setRecCommentPrev(ccrVO.getRecComment());
                ccrVO.setRecStatusIdPrev(ccrVO.getRecStatusId());
                ccrVO.setOtherCommentPrev(ccrVO.getOtherComment());
                ccrVO.setRecvPrepyAmtPrev(ccrVO.getRecvPrepyAmt());
                ccrVO.setCustomerNmPrev(ccrVO.getCustomerNm());
                ccrVO.setRcptNbrPrev(ccrVO.getRcptNbr());
                ccrVO.setRecAmtPrev(ccrVO.getRecAmount());
                ccrVO.setRecAwbNumberPrev(ccrVO.getRecAwbNumber());
                ccrVO.setBillAccountPrev(ccrVO.getBillAccount());
                
//                code needed to be added here for the update to show the miscDate,miscNbr
//                String miscQry = "select MISCELLANEOUS_DATE, MISCELLANEOUS_NBR from Receivables where REC_ID_NBR=" + ccrVO.getRecId();
//                Statement stmnt = conn.createStatement();
//                ResultSet miscRs = stmnt.executeQuery(miscQry);
//                
//                while (miscRs.next()) {
//                	String miscNbr = miscRs.getString("MISCELLANEOUS_NBR");
//                    java.util.Date date =  miscRs.getDate("MISCELLANEOUS_DATE");
//                    DateFormat format = new SimpleDateFormat("MM/dd/yyyy");
//                    
//                    if(date == null){
//                    	ccrVO.setMiscDate(null);
//                    } else {
//                    	ccrVO.setMiscDate(format.format(date));
//                    }
//                    ccrVO.setMiscNbr(miscNbr);
//                }
                
                colDet.add(ccrVO);
            }
            result = new Hashtable();
            result.put("NUMBEROFPAGES", numberOfPages);
            result.put("RESULTSET", colDet);
            return result;
        }
        catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getCourierCashRecapTable() method of RODDaoBean class.", e);
        }
        finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
    }

    public java.util.Collection getAllRecStatus() throws DAOException {
        Connection conn = null;
        PreparedStatement cs = null;
        ResultSet rs = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareStatement("SELECT STATUS_ID_NBR, STATUS_DESC FROM REC_STATUS WHERE ROD_PG_FLG=1");

            rs = cs.executeQuery();
            Collection colStatus = new ArrayList();
            while (rs.next()) {
                RecStatusVO rsVO = new RecStatusVO();
                rsVO.setStatusId(new Integer(rs.getInt(1)));
                rsVO.setDescription(rs.getString(2));
                colStatus.add(rsVO);
            }
            return colStatus;

        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getAllRecStatus() method of RODDaoBean class.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;

        }
    }

    public Collection applyRODScans(Collection colChanges) throws DAOException {

        Constants.logger.debug("Beggining update is done. From " + colChanges.size() + " results");
        Connection conn = null;
        CallableStatement cs = null;
        Collection colErrors = new ArrayList();
        Iterator iterChanges = colChanges.iterator();

        try {


           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/


            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_ROD_APPLY_SCANS(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); END;");

            while (iterChanges.hasNext())
            {
                RecChangesFromScans recChanges = (RecChangesFromScans) iterChanges.next();

                /*
                    Si la moneda es la de Venezuela, se convierten los montos leidos por el Scan
                 */
                if(Utils.currencyRequiresConvertion(recChanges.getRecPaymentCurrency()))
                {
                    recChanges.setRecDex16CashPayment( Utils.convertToNewCurrency( recChanges.getRecDex16CashPayment(), recChanges.getLocationCd()));
                    recChanges.setRecDex16OtherPayment( Utils.convertToNewCurrency( recChanges.getRecDex16OtherPayment(), recChanges.getLocationCd()));
                    recChanges.setRecDex16FreightAmount( Utils.convertToNewCurrency( recChanges.getRecDex16FreightAmount(), recChanges.getLocationCd()));
                    recChanges.setRecCashPayment( Utils.convertToNewCurrency( recChanges.getRecCashPayment(), recChanges.getLocationCd()));
                    recChanges.setRecOtherPayment( Utils.convertToNewCurrency( recChanges.getRecOtherPayment(), recChanges.getLocationCd()));
                }

                /* Jorge Quiroz Gonzalez.

                    Validacion del la moneda por defecto para el country.

                    si la moneda del registro no existe o no esta asociada al country,

                    se usa la moneda por defecto del country.
                */

                //Validate payment currency to have the right currency setted.
                String curResult = Utils.validateCountryCurencyInProcess(recChanges.getLocationCd(),recChanges.getRecPaymentCurrency());
                if(curResult==null){
                   recChanges.setRecPaymentCurrency(recChanges.getRecPaymentCurrency());
                }else{recChanges.setRecPaymentCurrency(curResult);}


                cs.setInt(1, recChanges.getRecId());
                cs.setString(2, recChanges.getRecAwbNumber());
                cs.setString(3, recChanges.getLocationCd());
                cs.setString(4, recChanges.getRecEmployeeId());
                cs.setString(5, recChanges.getRecTinUniqueId());
                cs.setDouble(6, recChanges.getRecCashPayment());
                cs.setDouble(7, recChanges.getRecOtherPayment());
                cs.setString(8, recChanges.getRecOtherDocNumber());
                cs.setInt(9, recChanges.getOtherPaymentType());
                cs.setDouble(10, recChanges.getRecDex16CashPayment());
                cs.setDouble(11, recChanges.getRecDex16OtherPayment());
                cs.setString(12, recChanges.getRecDex16CosmosScanSeqNbr());
                cs.setDouble(13, recChanges.getRecDex16FreightAmount());
                cs.setString(14, recChanges.getRecLastScanType());
                cs.setDate(15, new java.sql.Date(recChanges.getRecLastScanDate().getTime()));
                cs.setString(16, recChanges.getRecPaymentCurrency());
                cs.setInt(17, recChanges.getRecTrackingStatus());
                cs.setInt(18, (recChanges.isInCage() ? 1 : 0));
                cs.registerOutParameter(19, oracle.jdbc.OracleTypes.VARCHAR);
                cs.registerOutParameter(20, oracle.jdbc.OracleTypes.INTEGER);

                cs.execute();

                if (cs.getInt(20) == 1) {
                    try {
                        Iterator iterScans = recChanges.getCosmosScans().iterator();
                        while (iterScans.hasNext()) {
                            getCommonOpsDaoLocal().insertCosmosScan((CosmosScanVO) iterScans.next());
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }

                if (cs.getString(19) != null && !"".equals(cs.getString(19))) {
                    if ("app.messages.EmployeeNonExist".equals(cs.getString(19))){
                         EmployeeVO  eVOLdap=null;
                         EmployeeController ec=new EmployeeController();

                        try{
                            eVOLdap=getSystemUtilsLocal().findFedExEmployee(recChanges.getRecEmployeeId());

                            if(eVOLdap==null){
                               eVOLdap=new EmployeeVO(recChanges.getRecEmployeeId(),"Unknown Employee","",recChanges.getRecEmployeeId()+"@fedex.com","ROD",null,"0",0, null, 0, 0,null,1);
                            }

                            if(eVOLdap.getEmail().length()>35) eVOLdap.setEmail(eVOLdap.getEmployeeId()+"@fedex.com");

                            ec.updateEmployee(eVOLdap);
                        }catch(Exception e){
                            e.printStackTrace();
                        }

                    colErrors.add(new ScansProcessingError(recChanges.getRecAwbNumber(), cs.getString(19), null, recChanges.getRecEmployeeId(), "", ""));
                  }
                }
            }
        } catch (SQLException e) {
            context.setRollbackOnly();
            throw new DAOException(e.toString() + " SQLException ocurred on applyRODScans() method of RODDaoBean class.", e);
        } catch (NamingException e) {
            context.setRollbackOnly();
            throw new DAOException(e.toString() + " NamingException ocurred on applyRODScans() method of RODDaoBean class.", e);
        } catch (Exception e) {
            context.setRollbackOnly();
            throw new DAOException(e.toString() + " Exception ocurred on applyRODScans() method of RODDaoBean class.", e);
        } finally {
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
                throw new DAOException(e.toString() + "  ocurred when trying to close callable statement on applyRODScans() method of RODDaoBean class.", e);
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
                throw new DAOException(e.toString() + " ocurred when trying to close connection on applyRODScans() method of RODDaoBean class.", e);
            }

            cs = null;
            conn = null;
        }
        Constants.logger.debug("The update is done. From " + colChanges.size() + " results");

        return colErrors;
    }


    public java.util.Collection getInvoicesByAwb(String awbNumber) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        try {
 /*           Hashtable prop=new Hashtable();
            prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);
            prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();

            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_GET_INVOICES_BY_AWB(?,?); END;");
            cs.setString(1, awbNumber);
            //cs.setString(2,locationCd);
            //cs.setString(3,currencyCode);
            cs.registerOutParameter(2, oracle.jdbc.OracleTypes.CURSOR);

            cs.execute();

            rs = (ResultSet) cs.getObject(2);
            Collection colRec = new ArrayList();
            while (rs.next()) {
                ReceivablesByAwbVO rsVO = new ReceivablesByAwbVO();
                rsVO.setRecId(rs.getInt(1));
                rsVO.setRecAwbNumber(rs.getString(2));
                rsVO.setRecCustomerName(rs.getString(3));
                rsVO.setRecNumber(rs.getString(4));
                rsVO.setRecDate(rs.getDate(5));
                rsVO.setRecAmount(rs.getString(6));
                rsVO.setStatusId(rs.getInt(7));
                rsVO.setStatusDesc(rs.getString(8));
                rsVO.setLocCd(rs.getString(9));
                colRec.add(rsVO);
            }
            return colRec;

        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getInvoicesByAwb() method of RODDaoBean class.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
    }


    public Collection getCouriersWithPendents(String location) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_COURIER_WITH_PENDENT(?,?); END;");

            cs.setString(1, location);
            cs.registerOutParameter(2, oracle.jdbc.OracleTypes.CURSOR);
            cs.execute();

            rs = (ResultSet) cs.getObject(2);
            Collection col = new ArrayList();
            while (rs.next()) {
                col.add(rs.getString(1));
            }
            return col;
        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getCouriersWithPendents() method of RODDaoBean class.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
    }

    public java.util.Collection getRODUsedCurrencies(String locationCd, String employeeId) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_GET_ROD_USED_CURRENCIES(?,?,?); END;");

            cs.setString(1, locationCd);
            cs.setString(2, employeeId);
            cs.registerOutParameter(3, oracle.jdbc.OracleTypes.CURSOR);

            cs.execute();

            rs = (ResultSet) cs.getObject(3);
            Collection colDet = new ArrayList();
            while (rs.next()) {
                colDet.add(rs.getString(1));
            }
            return colDet;

        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getRODUsedCurrencies() method of RODDaoBean class.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
    }


    public void runInCageExceptionsTask() throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();

            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);

            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_IN_CAGE_EXCEPTIONS_TRACK; END;");

            cs.execute();

        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on runInCageExceptionsTask() method of RODDaoBean class.", e);
        } finally {
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
                Constants.logger.debug(" cs.close()..." , e);
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
                Constants.logger.debug(" conn.close()..." , e);
            }
            cs = null;
            conn = null;
        }
    }

    public java.util.Collection getAwbToQuerySTAT44() throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_GET_AWB_TO_QUERY_STAT44(?); END;");

            cs.registerOutParameter(1, oracle.jdbc.OracleTypes.CURSOR);
            cs.execute();
            rs = (ResultSet) cs.getObject(1);
            Collection col = new ArrayList();
            while (rs.next()) {
                CosmosScanVO scan = new CosmosScanVO();
                scan.setAwbNbr(rs.getString(1));
                scan.setTinUniqId(rs.getString(2));
                scan.setScanLocationCd(rs.getString(3));
                scan.setScanSeqNbr(rs.getString(4));
                col.add(scan);
            }
            return col;
        } catch (Exception e) {
            throw new DAOException("Awb numbers couldn't be extracted from the database.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
    }

    public boolean existsFileProcessed(String fileName) throws DAOException {
        Connection conn = null;
        PreparedStatement cs = null;
        ResultSet rs = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareStatement("SELECT COUNT(*) FROM ROD_FILE_PROC_LOG WHERE FILE_NM= ? AND STATUS_CD=1");
            cs.setString(1, fileName);

            rs = cs.executeQuery();

            if (rs.next()) {
                return rs.getInt(1) > 0;
            }
        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on existsEmployeeLocation() method of RODDaoBean class.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
        return true;
    }

    public boolean existsRecDuplicates(com.fedex.lacitd.cashcontrol.datatier.valueobject.ReceivablesVO recVO) throws DAOException {
        Connection conn = null;
        PreparedStatement cs = null;
        ResultSet rs = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareStatement("SELECT COUNT(*) FROM RECEIVABLES WHERE REC_ID_NBR<>? AND NVL(REC_NBR,'K')=NVL(?,'K') AND TO_CHAR(REC_DT,'DD/MM/YYYY')=TO_CHAR(?,'DD/MM/YYYY') AND REC_AMT=? AND AWB_NBR=? AND LOC_CD IN (SELECT LOC_CD FROM LOCATION WHERE LOC_CD=? OR PARNT_LOC_CD=?)");
            cs.setInt(1, recVO.getRecId().intValue());
            cs.setString(2, recVO.getRecNbr());
            cs.setDate(3, new java.sql.Date(recVO.getRecDt().getTime()));
            cs.setDouble(4, recVO.getRecAmt());
            cs.setString(5, recVO.getAwbNbr());
            cs.setString(6, recVO.getLocationCd());
            cs.setString(7, recVO.getLocationCd());

            rs = cs.executeQuery();

            if (rs.next()) {
                return rs.getInt(1) > 0;
            }
        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on existsRecDuplicates() method of RODDaoBean class.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
        return true;
    }


    public java.util.Collection getRodFilesImportingStatus(String empId) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_IMPORT_ROD_FILES_REPORT(?,?); END;");

            cs.setString(1, empId);
            cs.registerOutParameter(2, oracle.jdbc.OracleTypes.CURSOR);

            cs.execute();

            rs = (ResultSet) cs.getObject(2);
            Collection colDet = new ArrayList();
            while (rs.next()) {
                RodFileProcLogVO ccrVO = new RodFileProcLogVO();
                ccrVO.setRodFilePrLogId(new Integer(rs.getInt(1)));
                ccrVO.setFileNm(rs.getString(2));
                ccrVO.setLocationCd(rs.getString(3));
                ccrVO.setProcessDt(rs.getTimestamp(4));
                ccrVO.setStatusCd(rs.getInt(5));
                ccrVO.setMessage(rs.getString(6));
                ccrVO.setAwbQty(rs.getInt(7));
                ccrVO.setErrorDtlDesc(rs.getString(8));
                ccrVO.setTotalLocalAmt(rs.getDouble(9));
                ccrVO.setTotalUsdAmt(rs.getDouble(10));

                colDet.add(ccrVO);
            }
            return colDet;

        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getRodFilesImportingStatus() method of RODDaoBean class.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
    }

    public java.util.Collection getRodFilesImportingDetails(int logId) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_IMPORT_ROD_FILES_DETAILS(?,?); END;");

            cs.setInt(1, logId);
            cs.registerOutParameter(2, oracle.jdbc.OracleTypes.CURSOR);

            cs.execute();

            rs = (ResultSet) cs.getObject(2);
            Collection colDet = new ArrayList();
            while (rs.next()) {
                ReceivablesVO ccrVO = new ReceivablesVO();
                ccrVO.setAwbNbr(rs.getString(1));
                ccrVO.setRecNbr(rs.getString(2));
                ccrVO.setCustomerNm(rs.getString(3));
                ccrVO.setRecDt(rs.getTimestamp(4));
                ccrVO.setInvCurrency(rs.getString(5));
                ccrVO.setRecAmt(rs.getDouble(6));
                ccrVO.setExchRateClnUsed(rs.getDouble(7));
                ccrVO.setChkinAgentComment(rs.getString(8)); //reuse this field for the status description
                ccrVO.setLocationCd(rs.getString(9));

                colDet.add(ccrVO);
            }
            return colDet;

        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getRodFilesImportingDetails() method of RODDaoBean class.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
    }

    public void insertRODFileProcLog(com.fedex.lacitd.cashcontrol.datatier.valueobject.RodFileProcLogVO rodVO) throws DAOException {
        Connection conn = null;
        PreparedStatement cs = null;
        ResultSet rs = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareStatement("INSERT INTO ROD_FILE_PROC_LOG (ROD_FILE_PR_LOG_ID_NBR,FILE_NM,LOC_CD,PRCS_DT,STATUS_CD,MSG_CD,AWB_QTY,ERROR_DTL_DESC,TOTAL_LOCAL_AMT,TOTAL_USD_AMT) VALUES (ROD_FILE_PROC_LOG_SEQ.NEXTVAL,?,?,?,?,?,?,?,?,?)");
            cs.setString(1, rodVO.getFileNm());
            cs.setString(2, rodVO.getLocationCd());
            cs.setTimestamp(3, new java.sql.Timestamp(rodVO.getProcessDt().getTime()));
            cs.setInt(4, rodVO.getStatusCd());
            cs.setString(5, rodVO.getMessage());
            cs.setInt(6, rodVO.getAwbQty());
            cs.setString(7, rodVO.getErrorDtlDesc());
            cs.setDouble(8, rodVO.getTotalLocalAmt());
            cs.setDouble(9, rodVO.getTotalUsdAmt());

            cs.execute();
        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on insertRODFileProcLog() method of RODDaoBean class.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
    }

    /**
     * Method useful to get data from DB about records splitted by currency.
     *
     * @param locationCd
     * @param employeeId
     * @param
     * @return Collection
     * @throws DAOException
     */
    public java.util.Hashtable getSplitCourierCashRecapTable(String locationCd, String employeeId, Integer pageNumber, Integer rowsByPage, String sortColumn, String sortDirection) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        Hashtable result;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_SPLIT_ROD_PAYMENTS(?,?,?,?,?,?,?,?); END;");

            cs.setString(1, locationCd);
            cs.setString(2, employeeId);
            cs.setInt(3, pageNumber.intValue());
            cs.setInt(4, rowsByPage.intValue());
            cs.setString(5, sortColumn);
            cs.setString(6, sortDirection);
            cs.registerOutParameter(7, oracle.jdbc.OracleTypes.CURSOR);
            cs.registerOutParameter(8, oracle.jdbc.OracleTypes.INTEGER);
            cs.execute();

            rs = (ResultSet) cs.getObject(7);
            Integer numberOfPages = (Integer) cs.getObject(8);
            Collection colDet = new ArrayList();
            while (rs.next()) {
                CourierCashRecapTableVO ccrVO = new CourierCashRecapTableVO();
                ccrVO.setRecId(rs.getInt(1));
                ccrVO.setRecAwbNumber(rs.getString(2));
                ccrVO.setCustomerNm(rs.getString(3));
                ccrVO.setRecDate(rs.getDate(4));
                ccrVO.setInvCurrency(rs.getString(5));
                ccrVO.setRecAmount(rs.getDouble(6));
                ccrVO.setRecDex16Amount(rs.getDouble(7));
                ccrVO.setPaymentCurrency(rs.getString(8));
                ccrVO.setRecCashPayment(rs.getDouble(9));
                ccrVO.setRecOtherPayment(rs.getDouble(10));
                ccrVO.setOtherPaymentType(rs.getInt(11));
                ccrVO.setRecOtherDocNumber(rs.getString(12));
                ccrVO.setOtherComment(rs.getString(13));
                ccrVO.setRecStatusId(rs.getInt(14));
                ccrVO.setRecTrackingStatus(rs.getInt(15));
                ccrVO.setRecComment(rs.getString(16));
                ccrVO.setSurChargesTotal(rs.getDouble(17));
                ccrVO.setRodAmt(rs.getDouble(18));
                ccrVO.setAncCharges(rs.getDouble(19));
                ccrVO.setRecvPrepyAmt(rs.getDouble(20));
                ccrVO.setRcptNbr(rs.getString(21));
                ccrVO.setManuallyEntered(rs.getInt(22) == 1);
                ccrVO.setRecNbr(rs.getString(23));
                ccrVO.setEmpNm(rs.getString(24));
                ccrVO.setEmpIdNbr(rs.getString(25));
                ccrVO.setBillAccount(rs.getString(26));

                ccrVO.setRecCashPaymentPrev(ccrVO.getRecCashPayment());
                ccrVO.setRecOtherPaymentPrev(ccrVO.getRecOtherPayment());
                ccrVO.setOtherPaymentTypePrev(ccrVO.getOtherPaymentType());
                ccrVO.setRecOtherDocNumberPrev(ccrVO.getRecOtherDocNumber());
                ccrVO.setRecCommentPrev(ccrVO.getRecComment());
                ccrVO.setRecStatusIdPrev(ccrVO.getRecStatusId());
                ccrVO.setOtherCommentPrev(ccrVO.getOtherComment());
                ccrVO.setRecvPrepyAmtPrev(ccrVO.getRecvPrepyAmt());
                ccrVO.setCustomerNmPrev(ccrVO.getCustomerNm());
                ccrVO.setRcptNbrPrev(ccrVO.getRcptNbr());
                ccrVO.setRecAmtPrev(ccrVO.getRecAmount());
                ccrVO.setRecAwbNumberPrev(ccrVO.getRecAwbNumber());
                ccrVO.setBillAccountPrev(ccrVO.getBillAccount());
                colDet.add(ccrVO);
            }
            result = new Hashtable();
            result.put("NUMBEROFPAGES", numberOfPages);
            result.put("RESULTSET", colDet);
            return result;
        }
        catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getCourierCashRecapTable() method of RODDaoBean class.", e);
        }
        finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
    }

    public Collection applyPaymentToInvoices(String courierId, String locationCd, String countryCd, String paymentCurrency, int paymentType, String otherDocNbr, boolean isCash, boolean isFindByAWB, Collection invoices) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();

            StringBuffer sb = null;
            sb = new StringBuffer("UPDATE RECEIVABLES r\n");
            sb.append("SET EMP_ID_NBR=? ,");
            sb.append("	   LOC_CD=?, ");
            sb.append("	   PYMT_CURR_CD= ?, ");
            sb.append("	   STATUS_ID_NBR=1, ");
            sb.append("	   EOD_DT=NULL, ");

            if (!isCash) {
                sb.append("    OTHER_PYMT_TYPE_CD=?, ");
                sb.append("	   OTHER_DOC_NBR=?, ");
                sb.append("	   OTHER_PYMT_AMT=REC_AMT, ");
            } else {
                sb.append("	   CASH_PYMT_AMT=REC_AMT, ");
            }

            sb.append("	   OTHER_COM_DSC='ARGP;' ");
            sb.append("WHERE LOC_CD IN (SELECT LOC_CD FROM LOCATION WHERE CNTRY_CD= ? ) ");
            sb.append("AND NVL(EOD_ID_NBR,0)=0 ");

            if (isFindByAWB) {
                sb.append("AND AWB_NBR = ? ");
            } else {
                sb.append("AND TO_CHAR(SUBSTR(REC_NBR,INSTR(REC_NBR,'-',-1)+1)) = ? ");
            }


            cs = conn.prepareCall(sb.toString());
            cs.setString(1, courierId);
            cs.setString(2, locationCd);
            cs.setString(3, paymentCurrency);

            if (!isCash) {
                cs.setInt(4, paymentType);
                cs.setString(5, otherDocNbr);
                cs.setString(6, countryCd);
            } else {
                cs.setString(4, countryCd);
            }

            String origAwbNbr = null;
            String parsedAwbNbr = null;
            Collection colNotFound = new ArrayList();
            Iterator iter = invoices.iterator();

            while (iter.hasNext()) {
                origAwbNbr = (String) iter.next();
                if (origAwbNbr.length() > 0) {
                    parsedAwbNbr = origAwbNbr.substring(origAwbNbr.lastIndexOf('-') + 1, origAwbNbr.length());//get the last part of numbers
                    //parsedAwbNbr=Long.valueOf(parsedAwbNbr).toString(); //take out zeros

                    if (!isCash) {
                        cs.setString(7, parsedAwbNbr);
                    } else {
                        cs.setString(5, parsedAwbNbr);
                    }

                    if (cs.executeUpdate() == 0) colNotFound.add(origAwbNbr);

                }
            }

            return colNotFound;

        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on applyPaymentToInvoices() method of RODDaoBean class.", e);
        } finally {
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            cs = null;
            conn = null;
        }
    }

    private CommonOpsDaoLocal getCommonOpsDaoLocal() throws ServiceLocatorException, CreateException {
        CommonOpsDaoLocalHome daoHome = (CommonOpsDaoLocalHome) ServiceLocator.getInstance().getEJBLocalHome(Constants.CommonOpsDaoEJB_Local);
        CommonOpsDaoLocal dao = daoHome.create();
        return dao;
    }

    private SystemUtilsLocal getSystemUtilsLocal() throws ServiceLocatorException, CreateException {
        SystemUtilsLocalHome utilHome = (SystemUtilsLocalHome) ServiceLocator.getInstance().getEJBLocalHome(Constants.SystemUtilsEJB_Local);
        SystemUtilsLocal util = utilHome.create();
        return util;
    }

    public TotalSummaryVO getRODDetailsTotal(String locationCd,
                                             String employeeId,
                                             String currencyCode,
                                             Integer pageNumber,
                                             Integer rowsByPage,
                                             String sortColumn,
                                             String sortDirection) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        TotalSummaryVO totalSummaryVO = null;
        try {
           /*/* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_CALC_ROD_TOTALS(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); END;");
            cs.setString(1, locationCd);
            cs.setString(2, employeeId);
            cs.setString(3, currencyCode);
            cs.setInt(4, pageNumber.intValue());
            cs.setInt(5, rowsByPage.intValue());
            cs.setString(6, sortColumn);
            cs.setString(7, sortDirection);
            cs.registerOutParameter(8, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(9, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(10, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(11, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(12, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(13, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(14, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(15, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(16, oracle.jdbc.OracleTypes.INTEGER);
            cs.execute();
            totalSummaryVO = new TotalSummaryVO();
            totalSummaryVO.setCashTotal((Double) cs.getObject(8));
            totalSummaryVO.setDepositTotal((Double) cs.getObject(9));
            totalSummaryVO.setCreditCardTotal((Double) cs.getObject(10));
            totalSummaryVO.setCheckTotal((Double) cs.getObject(11));
            totalSummaryVO.setCashSubTotal((Double) cs.getObject(12));
            totalSummaryVO.setDepositSubTotal((Double) cs.getObject(13));
            totalSummaryVO.setCreditCardSubTotal((Double) cs.getObject(14));
            totalSummaryVO.setCheckSubTotal((Double) cs.getObject(15));
            totalSummaryVO.setStatusCd((Integer) cs.getObject(16));
            return totalSummaryVO;
        }
        catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getRODDetailsTotal() method of RODDaoBean class.", e);
        }
        finally {
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }

            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            cs = null;
            conn = null;
        }
    }

    public TotalSummaryVO getRODDetailsSplitTotal(String locationCd,
                                                  String employeeId,
                                                  Integer pageNumber,
                                                  Integer rowsByPage,
                                                  String sortColumn,
                                                  String sortDirection) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        TotalSummaryVO totalSummaryVO = null;
        try {
           /*/* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_CALC_SPLIT_ROD_TOTALS(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); END;");
            cs.setString(1, locationCd);
            cs.setString(2, employeeId);
            cs.setInt(3, pageNumber.intValue());
            cs.setInt(4, rowsByPage.intValue());
            cs.setString(5, sortColumn);
            cs.setString(6, sortDirection);
            cs.registerOutParameter(7, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(8, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(9, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(10, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(11, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(12, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(13, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(14, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(15, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(16, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(17, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(18, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(19, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(20, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(21, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(22, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(23, oracle.jdbc.OracleTypes.INTEGER);
            cs.execute();
            totalSummaryVO = new TotalSummaryVO();
            totalSummaryVO.setCashTotal((Double) cs.getObject(7));
            totalSummaryVO.setDepositTotal((Double) cs.getObject(8));
            totalSummaryVO.setCreditCardTotal((Double) cs.getObject(9));
            totalSummaryVO.setCheckTotal((Double) cs.getObject(10));
            totalSummaryVO.setCashSubTotal((Double) cs.getObject(11));
            totalSummaryVO.setDepositSubTotal((Double) cs.getObject(12));
            totalSummaryVO.setCreditCardSubTotal((Double) cs.getObject(13));
            totalSummaryVO.setCheckSubTotal((Double) cs.getObject(14));
            totalSummaryVO.setUsdCashTotal((Double) cs.getObject(15));
            totalSummaryVO.setUsdDepositTotal((Double) cs.getObject(16));
            totalSummaryVO.setUsdCreditCardTotal((Double) cs.getObject(17));
            totalSummaryVO.setUsdCheckTotal((Double) cs.getObject(18));
            totalSummaryVO.setUsdCashSubTotal((Double) cs.getObject(19));
            totalSummaryVO.setUsdDepositSubTotal((Double) cs.getObject(20));
            totalSummaryVO.setUsdCreditCardSubTotal((Double) cs.getObject(21));
            totalSummaryVO.setUsdCheckSubTotal((Double) cs.getObject(22));
            totalSummaryVO.setStatusCd((Integer) cs.getObject(23));
            return totalSummaryVO;
        }
        catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getRODDetailSplitTotal() method of RODDaoBean class.", e);
        }
        finally {
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }

            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            cs = null;
            conn = null;
        }
    }
}
