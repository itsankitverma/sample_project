package com.fedex.lacitd.cashcontrol.biztier.facades;

import javax.ejb.*;
import com.fedex.lacitd.cashcontrol.datatier.dao.*;
import com.fedex.lacitd.cashcontrol.datatier.entities.*;
import com.fedex.lacitd.cashcontrol.datatier.controller.*;
import com.fedex.lacitd.cashcontrol.datatier.common.ServiceConstants;
import com.fedex.lacitd.cashcontrol.datatier.common.ServiceLocator;
//import com.fedex.lacitd.cashcontrol.common.ServiceLocator;

import com.fedex.lacitd.cashcontrol.datatier.exception.*;
import com.fedex.lacitd.cashcontrol.datatier.valueobject.*;
import com.fedex.lacitd.cashcontrol.biztier.common.*;
import com.fedex.lacitd.cashcontrol.common.Utils;
import com.fedex.lacitd.cashcontrol.biztier.exception.*;
import java.util.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;


/**
 * Created 18/11/2003 15:54:49
 * Code generated by the Sun ONE Studio EJB Builder
 *
 * @author ccardenas
 */


public class PrepPoaFacadeBean implements javax.ejb.SessionBean {
    private javax.ejb.SessionContext context;


    /**
     * @see javax.ejb.SessionBean#setSessionContext(javax.ejb.SessionContext)
     */
    public void setSessionContext(javax.ejb.SessionContext aContext) {
        context=aContext;
    }


    /**
     * @see javax.ejb.SessionBean#ejbActivate()
     */
    public void ejbActivate() {

    }


    /**
     * @see javax.ejb.SessionBean#ejbPassivate()
     */
    public void ejbPassivate() {

    }


    /**
     * @see javax.ejb.SessionBean#ejbRemove()
     */
    public void ejbRemove() {

    }


    /**
     * See section 7.10.3 of the EJB 2.0 specification
     */
    public void ejbCreate() {

    }

    public void applyPrepaidChanges(java.util.Collection colChanges) throws FacadeException {
        //Collection colErrors=new ArrayList();
        Iterator iterChanges=colChanges.iterator();

        while(iterChanges.hasNext()){
            PrepaidDetailsTableVO prepChanges=(PrepaidDetailsTableVO)iterChanges.next();

            PrepaidController prepCont=new PrepaidController();
            PrepaidVO prepVO=null;
            try{
                prepVO=prepCont.getPrepaid(new Integer(prepChanges.getPrepaidId()));

                prepVO.setCashPaymentAmt(prepChanges.getCashPayment());
                prepVO.setCoupPymtAmt(prepChanges.getCouponPayment());
                prepVO.setOtherPaymentAmt(prepChanges.getOtherPayment());
                prepVO.setOtherPaymentType(prepChanges.getOtherPaymentType());
                prepVO.setOtherDocNbr(prepChanges.getOtherDocNumber());
                prepVO.setChkinAgentComment(prepChanges.getComment());
                prepVO.setStatusId(prepChanges.getStatusId());
                prepVO.setChngStatusEmployeeId(prepChanges.getChngStatusEmployeeId());
                prepVO.setChngStatusDt(prepChanges.getChngStatusDate());
                prepVO.setOtherComment(prepChanges.getOtherComment());
                prepVO.setbillAccount(prepChanges.getBillAccount());
                //System.out.println("Prep Poa Facade Bean - Bill Acct : "+prepChanges.getBillAccount());
                
                //change done to add two column
                //changes applied to get the string to date
                
                if(prepChanges.getMiscDate().length() != 0) {
                	prepVO.setMiscDate(new java.text.SimpleDateFormat("MM/dd/yyyy").parse(prepChanges.getMiscDate()));
                }
                
                if(prepChanges.getMiscNbr() != null) {
                	prepVO.setMiscNbr(prepChanges.getMiscNbr());
                }                 
                
                if(prepChanges.getRcptChngEmpId()!=null){
                	prepVO.setRcptChngEmpId(prepChanges.getRcptChngEmpId());
                	prepVO.setRcptNbr(prepChanges.getRcptNbr());
                	prepVO.setOrigRcptNbr(prepChanges.getRcptNbrPrev());
                }

                prepCont.updatePrepaid(prepVO);

                if(prepVO.getStatusId()==1 && prepVO.getCashPaymentAmt()==0 && prepVO.getOtherPaymentAmt()==0 && prepVO.getCoupPymtAmt()==0){
                    //CHECK COMMENT TO SEE IF WILL SAVE A DISCREPANCIES
                    String CheckInComments=prepVO.getChkinAgentComment();
                    String[] comments;
                    boolean insertDiscrepancy = true;
                    if(CheckInComments!=null){
                       comments = CheckInComments.split(";");
                       Collection l=Arrays.asList(Constants.PRPCOMNOTDSCR);
                       for(int i=0;i<comments.length;i++){
                            if(l.contains(comments[i])){
                               insertDiscrepancy=false;
                               break;}
                       }
                    }

                    if(insertDiscrepancy){
                        PrepaidDscrController pdc=new PrepaidDscrController();
                        PrepaidDscrVO pdVO=new PrepaidDscrVO();

                        pdVO.setShipDate(prepVO.getAwbDt());
                        pdVO.setAwbNbr(prepVO.getAwbNbr());
                        pdVO.setCourierId(prepVO.getCourierId());
                        pdVO.setLocationCd(prepVO.getLocationCd());
                        pdVO.setPaymentCurrency(prepVO.getPaymentCurrency());
                        pdVO.setProcessDt(prepVO.getChngStatusDt());
                        pdVO.setTinUniqId(prepVO.getTinUniqId());
                        pdVO.setDiscrepancyFound(1);
                        pdVO.setDiscrepancyRsn(4);
                        pdc.setPrepaidDscr(pdVO);
                    }
                }

            }catch(Exception e){
                String errorMsg = e.getClass().getName() +" occurred in applyPrepaidChanges() method from RODFacadeBean class";
                throw new FacadeException(errorMsg, e);
            }
        }
    }

    public Collection applyPrepaidScans(java.util.Collection colPrep) {
        Collection colErrors=new ArrayList();
        Iterator iterPrep=colPrep.iterator();

        while(iterPrep.hasNext()){
            PrepaidScansVO prepScansVO=(PrepaidScansVO)iterPrep.next();
            PrepaidController prepContr=new PrepaidController();
            CosmosScanController scansContr=null;

            try{
                Collection colFound=prepContr.getPrepaidPrepaidByAwbNbr(prepScansVO.getPrepaidVO().getAwbNbr());
                if(colFound.isEmpty()){

                    int result=getCommonOpsFacadeLocal().existsEmployeeLocation(prepScansVO.getPrepaidVO().getLocationCd(),prepScansVO.getPrepaidVO().getCourierId());

                    switch(result){
                        case 0: break;
                        case 1: {
                            EmployeeVO empVO=getSystemUtilsLocal().findFedExEmployee(prepScansVO.getPrepaidVO().getCourierId());
                            if(empVO==null){
                                empVO=new EmployeeVO(prepScansVO.getPrepaidVO().getCourierId(),"Unknown Employee","","","ROD",null,"0",0, null, 0, 0,null,1);
                            }
                            new EmployeeController().setEmployee(empVO);
                            break;
                        }
                        default:{
                        	colErrors.add(new ScansProcessingError(prepScansVO.getAwbNbr(),"app.messages.ErrorInsertingAwb", null, prepScansVO.getAwbNbr(),null,null));
                            break;
                        }
                    }

                    if(result==0 || result==1){
                         /*
                            Si la moneda es la de Venezuela, se convierten los montos leidos por el Scan
                        */
                        PrepaidVO prpVO =prepScansVO.getPrepaidVO();
                        if(Utils.currencyRequiresConvertion(prepScansVO.getPrepaidVO().getPaymentCurrency()))
                        {
                            prpVO.setCashPaymentAmt(Utils.convertToNewCurrency(prpVO.getCashPaymentAmt(),prpVO.getLocationCd()));
                            prpVO.setOtherPaymentAmt(Utils.convertToNewCurrency(prpVO.getOtherPaymentAmt(),prpVO.getLocationCd()));

                            prpVO.setPux16CashPayment( Utils.convertToNewCurrency(prpVO.getPux16CashPayment(),prpVO.getLocationCd()));
                            prpVO.setPux16FreightAmt( Utils.convertToNewCurrency(prpVO.getPux16FreightAmt(),prpVO.getLocationCd()));
                            prpVO.setPux16OtherPaymentAmt( Utils.convertToNewCurrency(prpVO.getPux16OtherPaymentAmt(),prpVO.getLocationCd()));
                            prpVO.setPux16CoupPymtAmt( Utils.convertToNewCurrency(prpVO.getPux16CoupPymtAmt(),prpVO.getLocationCd()));
                        }

                        //Validate payment currency to have the right currency setted.
                        String curResult = Utils.validateCountryCurencyInProcess(prpVO.getLocationCd(),prpVO.getPaymentCurrency());
                            if(curResult==null){
                                prpVO.setPaymentCurrency(prpVO.getPaymentCurrency());
                            }else{prpVO.setPaymentCurrency(curResult);}


                        prepContr.setPrepaid(prepScansVO.getPrepaidVO());

                        if(prepScansVO.getCosmosScans()!=null && !prepScansVO.getCosmosScans().isEmpty()){
                            Iterator iterScans=prepScansVO.getCosmosScans().iterator();
                            scansContr=new CosmosScanController();
                            while(iterScans.hasNext()){
                                scansContr.setCosmosScan((CosmosScanVO)iterScans.next());
                            }
                        }
                    }
                }else{
                    colErrors.add(new ScansProcessingError(prepScansVO.getAwbNbr(),"app.messages.AWBExists", null, prepScansVO.getAwbNbr(),null,null));
                }
            }catch(Exception e){
                Constants.logger.debug(Utils.stackTraceToString(e));
                colErrors.add(new ScansProcessingError(prepScansVO.getAwbNbr(),"app.messages.ErrorInsertingAwb", null, prepScansVO.getAwbNbr(),null,null));
            }
        }

        return colErrors;
    }

    public void applyPrepNotCheckedScans(Collection colScansVISA) throws FacadeException {
        PrepaidVISAFileVO prepVS=null;
        String locationCD="";
        try{
            java.util.Date now=new java.util.Date();
            PrepaidController pc=new PrepaidController();
            PrepaidDscrController pdc=new PrepaidDscrController();

            Iterator iterScansVISA=colScansVISA.iterator();

            while(iterScansVISA.hasNext()){
                prepVS=(PrepaidVISAFileVO) iterScansVISA.next();
                System.out.println("Awb Nbr from visa file=="+prepVS.getAwbNbr());
                System.out.println("CourierId from visa file=="+prepVS.getCourierId());
                if(prepVS.getCourierId()==null || "".equals(prepVS.getCourierId())) prepVS.setCourierId("000000");
                
                System.out.println("prepVS.getLocationCd()=="+prepVS.getLocationCd());
                System.out.println("prepVS.getCourierId()=="+prepVS.getCourierId());
                
                int result=getCommonOpsFacadeLocal().existsEmployeeLocation(prepVS.getLocationCd(),prepVS.getCourierId());
                
                System.out.println("result=="+result);
                
                if(result==1 || result==3){                	
                	System.out.println("prepVS.getCourierId()="+prepVS.getCourierId());
                    EmployeeVO empVO=getSystemUtilsLocal().findFedExEmployee(prepVS.getCourierId());
                   // System.out.println("empVO=="+empVO.getEmployeeId()+ ""+empVO.getEmail()+ ""+empVO.getEmployeeNm());
                    System.out.println("BEFORE if(empVO==null)");       
                    if(empVO==null){
                    	System.out.println("3333333");
                        empVO=new EmployeeVO(prepVS.getCourierId(),"Unknown Employee","","","ROD",null,"0",0, null, 0, 0,null,1);
                        System.out.println("IN if(empVO==null)");   
                        System.out.println("empVO=="+empVO.getEmployeeId()+ ""+empVO.getEmail()+ ""+empVO.getEmployeeNm());       
                    }
                    System.out.println("AFTER if(empVO==null)");   
                    if (empVO.getEmail().length() > 35){
                    	System.out.println("Email greater than 35 characters!"+ empVO.getEmail() + "..for emp-name.."+empVO.getEmployeeId());
                    	System.out.println("substring(0,35)="+empVO.getEmail().substring(0,35));
                    	empVO.setEmail(empVO.getEmail().substring(0,35));
                    }
                    System.out.println("555555");
                    if (empVO.getEmployeeNm().length() > 35){                    	
                    	System.out.println("Employee Name greater than 35 characters!"+ empVO.getEmployeeNm() + "..for emp-name.."+empVO.getEmployeeId());
                    	System.out.println("substring(0,35)="+empVO.getEmployeeNm().substring(0,35));
                    	empVO.setEmployeeNm(empVO.getEmployeeNm().substring(0,35));
                    }
                    
                    new EmployeeController().setEmployee(empVO);
                    
                    System.out.println("666666");
                }
                System.out.println("check 111");
                //Constants.logger.debug("prepVS.getAwbNbr() :" + prepVS.getAwbNbr());

				/* Problem with VISA file */
                /* null if the locationCd doesn't exist */
                boolean existLocationCd = Utils.existLocation( prepVS.getLocationCd());
                System.out.println("check 2222");
                //Constants.logger.debug("existLocationCd :" + existLocationCd);
                System.out.println("prepVS.isDelayDscr()"+prepVS.isDelayDscr());
                System.out.println("prepVS.isPUP()"+prepVS.isPUP());
                System.out.println("prepVS.isPUX()"+prepVS.isPUX());
                if(!prepVS.isDelayDscr() && (prepVS.isPUP() || prepVS.isPUX())
                        && existLocationCd ){ //TO PREPAID
                	System.out.println("here in side the if method");
                    PrepaidVO pVO=new PrepaidVO();
                    pVO.setAwbDt(prepVS.getShipDate());
                    pVO.setAwbNbr(prepVS.getAwbNbr());
                    pVO.setCoupPymtAmt(prepVS.getCoupPymtAmt());
                    pVO.setCustomerNm(prepVS.getCustomerNm());
                    pVO.setLocationCd(prepVS.getLocationCd());
                    pVO.setCourierId(prepVS.getCourierId());
                    pVO.setLastScanType(prepVS.getLastScanType());
                    pVO.setLastScanDate(prepVS.getLastScanDate());
                    pVO.setCashPaymentAmt(prepVS.getCashPaymentAmt());
                    pVO.setOtherPaymentAmt(prepVS.getOtherPaymentAmt());
                    pVO.setOtherPaymentType(prepVS.getOtherPaymentType());
                    pVO.setCoupPymtAmt(prepVS.getCoupPymtAmt());
                    pVO.setOtherDocNbr(prepVS.getOtherDocNbr());
                    pVO.setPux16CashPayment(prepVS.getPux16CashPayment());
                    pVO.setPux16OtherPaymentAmt(prepVS.getPux16OtherPaymentAmt());
                    pVO.setPux16OtherDocNbr(prepVS.getPux16OtherDocNbr());
                    pVO.setPux16ScanSeqNbr(prepVS.getPux16ScanSeqNbr());
                    pVO.setPux16CoupPymtAmt(prepVS.getPux16CoupPymtAmt());
                    pVO.setPux16FreightAmt(prepVS.getPux16FreightAmt());

                   /*
                        Si la moneda es la de Venezuela, se convierten los montos leidos por el Scan
                    */
                    if(Utils.currencyRequiresConvertion(prepVS.getPaymentCurrency()))
                    {  pVO.setCashPaymentAmt( Utils.convertToNewCurrency( pVO.getCashPaymentAmt(), pVO.getLocationCd()));
                       pVO.setOtherPaymentAmt( Utils.convertToNewCurrency( pVO.getOtherPaymentAmt(), pVO.getLocationCd()));
                       pVO.setPux16CashPayment( Utils.convertToNewCurrency( pVO.getPux16CashPayment(), pVO.getLocationCd()));
                       pVO.setPux16FreightAmt( Utils.convertToNewCurrency( pVO.getPux16FreightAmt(), pVO.getLocationCd()));
                       pVO.setPux16OtherPaymentAmt( Utils.convertToNewCurrency( pVO.getPux16OtherPaymentAmt(), pVO.getLocationCd()));
                       pVO.setPux16CoupPymtAmt( Utils.convertToNewCurrency( pVO.getPux16CoupPymtAmt(), pVO.getLocationCd()));
                    }

                    //Validate payment currency to have the right currency setted.
                  /*  Constants.logger.debug("\n\n **** location to validate Currency= " + pVO.getLocationCd());
                    Constants.logger.debug("\n\n **** currency to validate Currency= " + pVO.getPaymentCurrency());
                    Constants.logger.debug("\n\n **** awb being processed = " + pVO.getAwbNbr());
                    Constants.logger.debug("\n\n **** awb scan = " + pVO.getLastScanType() + " scan date = " + pVO.getLastScanDate());
                 */
                    String curResult = Utils.validateCountryCurencyInProcess(prepVS.getLocationCd(),prepVS.getPaymentCurrency());
                    if(curResult!=null){
                       prepVS.setPaymentCurrency(curResult);
                    }

                    pVO.setPaymentCurrency(prepVS.getPaymentCurrency());
                    pVO.setTinUniqId(prepVS.getTinUniqId());
                    pVO.setStatusId(2);
                    System.out.println("here we are setting the prepaid VO");
                    pc.setPrepaid(pVO);
                    System.out.println("here we have set the prepaid VO");
                    //test
                    locationCD = prepVS.getLocationCd();
                }else{ //TO PREPAID_DSCR
                	System.out.println("here in side the else method for prepaid desc table entry");
                    PrepaidDscrVO pdVO=new PrepaidDscrVO();
                    System.out.println("here we are setting the descr file ");

                    pdVO.setAwbNbr(prepVS.getAwbNbr());
                    System.out.println("prepVS.getAwbNbr()"+prepVS.getAwbNbr());
                    pdVO.setCourierId(prepVS.getCourierId());
                    System.out.println("prepVS.getCourierId()"+prepVS.getCourierId());
                    pdVO.setLocationCd(prepVS.getLocationCd());
                    System.out.println("prepVS.getLocationCd"+prepVS.getLocationCd());

                    pdVO.setProcessDt(now);
                    System.out.println("now"+now);
                    pdVO.setTinUniqId(prepVS.getTinUniqId());
                    System.out.println("prepVS.getTinUniqId()"+prepVS.getTinUniqId());

                    // locations doesn't exist.
                    System.out.println("existLocationCd : "+existLocationCd);
                    if(!existLocationCd)
                       pdVO.setDiscrepancyFound(3);
                    else
                       pdVO.setDiscrepancyFound(1);
                    
                    pdVO.setShipDate(prepVS.getShipDate());
                    System.out.println("prepVS.getShipDate()"+prepVS.getShipDate());
                    System.out.println("prepVS.isPUX()"+prepVS.isPUX());
                    
                    if(prepVS.isPUX())
                    {
                        //Currency and amount convertion
                        if(Utils.currencyRequiresConvertion(prepVS.getPaymentCurrency())){
                           pdVO.setPux16Amount(Utils.convertToNewCurrency(prepVS.getPux16CashPayment()+ prepVS.getPux16OtherPaymentAmt(), prepVS.getLocationCd()));
                           pdVO.setCouponAmount(Utils.convertToNewCurrency(prepVS.getCoupPymtAmt(),prepVS.getLocationCd()));
                        }

                        pdVO.setDiscrepancyRsn(1);
                    }
                    else
                    {
                        pdVO.setDiscrepancyRsn(2);
                    }

                    // locations doesn't exist.
                    System.out.println("existLocationCd"+existLocationCd);
                    if(!existLocationCd)
                        pdVO.setDiscrepancyRsn( 5);
                    else
                    {
                        //Validate payment currency to have the right currency setted.
                        String curResult = Utils.validateCountryCurencyInProcess(prepVS.getLocationCd(),prepVS.getPaymentCurrency());
                        if(curResult!=null){
                           prepVS.setPaymentCurrency(curResult);
                        }
                    }
                    System.out.println("prepVS.getPaymentCurrency()"+prepVS.getPaymentCurrency());
                    pdVO.setPaymentCurrency(prepVS.getPaymentCurrency());
                    pdc.setPrepaidDscr(pdVO);
                }
            }
        }catch (Exception e) {
            String errorMsg = e.getClass().getName() +" occurred in applyPrepNotCheckedScans() method from RODFacadeBean TTest class";
           // Constants.logger.debug("\n**** location code = " + locationCD);
            e.printStackTrace();
            throw new FacadeException(errorMsg, e);
        }
    }

    public void changePOAPaymentCurrency(int poaPaymentId, String newCurrency) throws FacadeException {
        PoaPaymentController ppc=null;
        PoaPaymentVO ppVO=null;
        try{
            ppc=new PoaPaymentController();
            ppVO=ppc.getPoaPayment(new Integer(poaPaymentId));
            ppVO.setPaymentCurrency(newCurrency);
            ppc.updatePoaPayment(ppVO);
        }catch(Exception e){
            String errorMsg = e.getClass().getName() +" occurred in changePOAPaymentCurrency() method from RODFacadeBean class";
            throw new FacadeException(errorMsg, e);
        }
    }

    private PoaPaymentLocalHome getPoaPaymentLocalHome() {
        try {
            ServiceLocator service = ServiceLocator.getInstance();
            return (PoaPaymentLocalHome) service.getEJBLocalHome("PoaPaymentEJB.PoaPaymentLocalHome");
        }
        catch (ServiceLocatorException ex) {
            String errorMsg = "Error occurred in getPoaPaymentLocalHome() method when lookup the local home interface";
            throw new EJBException(errorMsg, ex);
        }
    }

    public Hashtable getPoaSummaryTable(String locationCd, String courierId, String currencyCode, Integer pageNumber, Integer rowsByPage, String sortColumn, String sortDirection) throws FacadeException {
        try{
            return getPrepPoaDaoLocal().getPoaSummaryTable(locationCd,courierId,currencyCode,pageNumber,rowsByPage,sortColumn,sortDirection);
        }
        catch (Exception e) {
            String errorMsg = e.getClass().getName() +" occurred in getPoaSummaryTable() method from PrepPoaFacadeBean class";
            throw new FacadeException(errorMsg, e);
        }
    }

    public java.util.Collection getPoaUsedCurrencies(String locationCodePk, String employeeCodePk) throws FacadeException {
        try{
            return getPrepPoaDaoLocal().getPoaUsedCurrencies(locationCodePk,employeeCodePk);
        }
        catch (Exception e) {
            String errorMsg = e.getClass().getName() +" occurred in getPoaUsedCurrencies() method from PrepPoaFacadeBean class";
            throw new FacadeException(errorMsg, e);
        }
    }

    public Hashtable getPrepaidDetailsTable(String locationCodePk, String employeeCodePk, String currencyCode,Integer pageNumber, Integer rowsByPage, String sortColumn, String sortDirection) throws FacadeException {
        try{
            return getPrepPoaDaoLocal().getPrepaidDetailsTable(locationCodePk,employeeCodePk,currencyCode,pageNumber,rowsByPage,sortColumn,sortDirection);
        }catch (Exception e) {
            String errorMsg = e.getClass().getName() +" occurred in getPrepaidDetailsTable() method from PrepPoaFacadeBean class";
            throw new FacadeException(errorMsg, e);
        }
    }

    public Hashtable getPrepaidDiscrepanciesTable(String locationCd, Integer pageNumber) throws FacadeException {
        try{
            return getPrepPoaDaoLocal().getPrepaidDiscrepanciesTable(locationCd,pageNumber);
        }catch (Exception e) {
            String errorMsg = e.getClass().getName() +" occurred in getPrepaidDiscrepanciesTable() method from PrepPoaFacadeBean class";
            throw new FacadeException(errorMsg, e);
        }
    }

    public java.util.Collection getPrepaidUsedCurrencies(java.lang.String locationCodePk, java.lang.String employeeCodePk) throws FacadeException {
        try{
            return getPrepPoaDaoLocal().getPrepaidUsedCurrencies(locationCodePk,employeeCodePk);
        }catch (Exception e) {
            String errorMsg = e.getClass().getName() +" occurred in getPrepaidUsedCurrencies() method from PrepPoaFacadeBean class";
            throw new FacadeException(errorMsg, e);
        }
    }

    public double getSurchargesTotalByPoaDetail(int poaDetail) throws FacadeException {
    	try{
    		return getPrepPoaDaoLocal().getSurchargesTotalByPoaDetail(poaDetail);
    	}catch (Exception e) {
    		String errorMsg = e.getClass().getName() +" occurred in getSurchargesTotalByPoaDetail() method from PrepPoaFacadeBean class";
    		throw new FacadeException(errorMsg, e);
    	}
    }

    public Collection getLocationsRIHFeed() throws FacadeException {
    	try{
    		return getPrepPoaDaoLocal().getLocationsRIHFeed();
    	}catch (Exception e) {
    		String errorMsg = e.getClass().getName() +" occurred in getLocationsRIHFeed() method from PrepPoaFacadeBean class";
    		throw new FacadeException(errorMsg, e);
    	}
    }

    public Collection processVISAFile(Collection colVISA) throws FacadeException {
        try{
            return getPrepPoaDaoLocal().processVISAFile(colVISA);
        }catch (Exception e) {
            String errorMsg = e.getClass().getName() +" occurred in processVISAFile() method from PrepPoaFacadeBean class";
            throw new FacadeException(errorMsg, e);
        }
    }

    public Hashtable getPoaOustInvoices(String accountNbr, String invoiceNbr,Integer pageNumber) throws FacadeException {
    	try{
    		return getPrepPoaDaoLocal().getPoaOustInvoices(accountNbr,invoiceNbr,pageNumber);
    	}
        catch (Exception e) {
    		String errorMsg = e.getClass().getName() +" occurred in getPoaOustInvoices() method from PrepPoaFacadeBean class";
    		throw new FacadeException(errorMsg, e);
    	}
    }

    public void updatePoaPayment(com.fedex.lacitd.cashcontrol.datatier.valueobject.PoaPaymentVO ppVO, Collection pdCol) throws FacadeException
    {
    try{
        int paymentId = ppVO.getPoaPaymentsId().intValue() ;

        PoaDetailController detCont = new PoaDetailController();

        Iterator iter = detCont.getPoaDetailPoaDetails( paymentId).iterator();

        while (iter.hasNext()) {
            PoaDetailVO poa = (PoaDetailVO) iter.next();
            Iterator iter1 = pdCol.iterator();
            boolean exist = false;
            while (iter1.hasNext()) {
                //PoaDetailVO poa1 = ((PoaDetailSurchargesVO) iter1.next()).getPoaDetail();
            	/*
            	 * TopIssues 4.6 251
            	 * To make all the modification inside the same trx
            	 * the caller must send a Collection of PoaDetailVO
            	 */
                PoaDetailVO poa1 = (PoaDetailVO) iter1.next();
                if (poa.getPoaDetailId().intValue() == poa1.getPoaDetailId().intValue()) {
                    exist = true;
                    break;
                }
            }
            if (!exist) detCont.removePoaDetail(poa.getPoaDetailId());
        }

        PoaPaymentController ppCont = new PoaPaymentController();

        ppCont.updatePoaPayment( ppVO);

        PoaDetailController pdCont = new PoaDetailController();

        iter = pdCol.iterator();
        while (iter.hasNext()) {
            //PoaDetailVO pdVO = ((PoaDetailSurchargesVO) iter.next()).getPoaDetail();
        	/*
        	 * TopIssues 4.6 251
        	 * To make all the modification inside the same trx
        	 * the caller must send a Collection of PoaDetailVO
        	 */
            PoaDetailVO pdVO = (PoaDetailVO) iter.next();
                        
            if (pdVO.getPoaDetailId() == null || pdVO.getPoaDetailId().intValue() == 0) {
                pdVO.setPoaPaymentsId( paymentId);
                pdCont.setPoaDetail(pdVO);
            } else {
                pdVO.setPoaPaymentsId( paymentId);
                pdCont.updatePoaDetail(pdVO);
            }
        }
        }catch (Exception e) {
            context.setRollbackOnly();
            String errorMsg = e.getClass().getName() +" occurred in updatePoaPayment() method from PrepPoaFacadeBean class";
            throw new FacadeException(errorMsg, e);
        }
    }

    public int savePoaPayment(com.fedex.lacitd.cashcontrol.datatier.valueobject.PoaPaymentVO ppVO, Collection pdCol) throws FacadeException {
        try{
        	DateFormat formatter;
        	formatter = new SimpleDateFormat("MM/dd/yyyy");
        	Date date = null;
            if(!ppVO.getChequeDt().equalsIgnoreCase("")){
            	
                try{
                	date = formatter.parse(ppVO.getChequeDt());
                }catch(Exception e){
                	System.out.println("Date parsing error");
                	date = null;
                }
            }
        	
            PoaPaymentLocal local=getPoaPaymentLocalHome().create(
            ppVO.getAccountNbr(),
            ppVO.getCustomerNm(),
            ppVO.getPaymentDt(),
            ppVO.getLocationCd(),
            ppVO.getPaymentCurrency(),
            ppVO.getExchRate(),
            ppVO.getPaymentAmt(),
            ppVO.getPaymentType(),
            ppVO.getCoupPymtAmt(),
            ppVO.getOtherDocNbr(),
            ppVO.getCourierId(),
            ppVO.getCloseEmployeeId(),
            ppVO.getCloseDt(),
            ppVO.getEodEmployeeId(),
            ppVO.getEodDt(),
            ppVO.getChkinAgentComment(),
            ppVO.getDepositSlipId(),
            ppVO.getDepositSlipNbr(),
            ppVO.getCreditCardBatchId(),
            ppVO.getReceivedEmpId(),
            ppVO.getEodId(),
            0,
            null,
            ppVO.getOtherComment(),
			ppVO.getRcptNbr(),
			null,
			null,null,null, date, ppVO.getChequeOrigin(), ppVO.getBankName()
            );
            int poaPaymentId=local.getPoaPaymentsId().intValue();

            /*
             * 
             * Release4.6-New Top issues
             * 
             * Issue #251
             * 
             * 
             */
            if( pdCol.size() <= 0)
            {
            	throw new Exception("Detail list cannot be empty.");
            }
            
            PoaDetailController cont=new PoaDetailController();
            Iterator iterDetail=pdCol.iterator();
            while(iterDetail.hasNext()){
            	
            	/*
            	 * 
	             * Release4.6-New Top issues
	             * 
	             * Issue #251            	 * 
            	 * 
            	 * To make all the modification inside the same trx
            	 * the caller must send a Collection of PoaDetailVO
            	 */
            	
                PoaDetailVO pdVO=(PoaDetailVO)iterDetail.next();
                pdVO.setPoaPaymentsId(poaPaymentId);
                cont.setPoaDetail(pdVO);
            }

            return poaPaymentId;
        }catch (Exception e)
        {
            context.setRollbackOnly();
            
            String errorMsg = e.getClass().getName() +" occurred in savePoaPayment() method from PrepPoaFacadeBean class ( "
                    + e.getMessage() + "(" + ppVO.getAccountNbr() + ")" + "(" + ppVO.getCustomerNm() + ")";

            throw new FacadeException(e.getMessage(), e);
        }
    }

    public void savePrepaidDscr(Collection dscr, java.lang.String employeeId) throws FacadeException {
        try{
            Iterator iterDscr=dscr.iterator();
            PrepaidDscrController pdCon=new PrepaidDscrController();
            while (iterDscr.hasNext()){
                PrepaidDscrTableVO pdChangesVO=(PrepaidDscrTableVO)iterDscr.next();
                PrepaidDscrVO pdVO=pdCon.getPrepaidDscr(pdChangesVO.getPrepaidDscrId());

                pdVO.setComments(pdChangesVO.getComments());
                pdVO.setManagerEmpId(employeeId);
                pdVO.setStatusId(pdChangesVO.getStatusId());

                pdCon.updatePrepaidDscr(pdVO);
            }
        }catch (Exception e) {
            String errorMsg = e.getClass().getName() +" occurred in savePrepaidDscr() method from PrepPoaFacadeBean class";
            throw new FacadeException(errorMsg, e);
        }
    }

    /**
     * Method to split the value of money between local currency and USD currency
     * @param prepaids  Collection
     * @param exchangeRate double value
     * @exception FacadeException
     */
    public void splitCurrency(Collection prepaids, String currencyCd, double exchangeRate, double amountToChange) throws FacadeException
    {
        PrepaidController prepaidCtrl=new PrepaidController();
        Integer newPrepaidId = null;

        try{
            int count = prepaids.size();
            double tabSourceAmount=0,tabDestAmount=0;//,exchAmount=0;
            double centValue=0;

            PrepaidDetailsTableVO prepaidRec = null;
            PrepaidVO prepaidNew = null;
            PrepaidVO prepaidOld   = null;

            Iterator recIt=prepaids.iterator();
            if(count==1){
                    while(recIt.hasNext()){
                          prepaidRec = (PrepaidDetailsTableVO)recIt.next();
                          prepaidOld     = prepaidCtrl.getPrepaid(new Integer(prepaidRec.getPrepaidId()));
                          prepaidNew     = prepaidCtrl.getPrepaid(new Integer(prepaidRec.getPrepaidId()));

                          //If number of rec is 1 then use exchange rate value passed as parameter
                          //Compute is different for count greater than 1

                             tabSourceAmount=prepaidOld.getCashPaymentAmt() + prepaidOld.getOtherPaymentAmt();
                             tabSourceAmount=tabSourceAmount-amountToChange;
                             if(currencyCd.equals("USD")){
                                tabDestAmount=amountToChange / exchangeRate;
                             }else{tabDestAmount=amountToChange * exchangeRate;}

                             if(prepaidOld.getCashPaymentAmt()>0){
                                prepaidOld.setCashPaymentAmt(tabSourceAmount);
                                prepaidNew.setCashPaymentAmt(tabDestAmount);
                             }else{
                                   prepaidOld.setOtherPaymentAmt(tabSourceAmount);
                                   prepaidNew.setOtherPaymentAmt(tabDestAmount);
                             }
                            //Set the receivables id in the object to produce the duality.
                              prepaidNew.setDualPrepaidIdNbr(prepaidOld.getPrepaidId());
                            //Insert the receivable new
                              prepaidNew.setPrepaidId(null);
                              prepaidNew.setPaymentCurrency(currencyCd);
                              prepaidNew.setOtherComment("Exchange rate");
                              prepaidNew.setChkinAgentComment("SPLT;");
                              prepaidNew.setStatusId(1);

                            //Get Home interface of Prepaid EJB to save the new prepaid record
                            //and get the new prepaid id.
                              PrepaidLocalHome prepaidHome  =(PrepaidLocalHome)ServiceLocator.getInstance().getEJBLocalHome(ServiceConstants.PREPAID_LOCAL_JNDI);
                              PrepaidLocal prepaidLocal     = prepaidHome.create(prepaidNew.getCustomerNm(),prepaidNew.getAwbDt(),prepaidNew.getLocationCd(),prepaidNew.getAwbNbr(),
                                                                                 prepaidNew.getTinUniqId(),prepaidNew.getPaymentCurrency(),prepaidNew.getCashPaymentAmt(),prepaidNew.getOtherPaymentAmt(),
                                                                                 prepaidNew.getOtherPaymentType(),prepaidNew.getOtherDocNbr(),prepaidNew.getCoupPymtAmt(),prepaidNew.getPux16CashPayment(),
                                                                                 prepaidNew.getPux16FreightAmt(),prepaidNew.getPux16OtherPaymentAmt(),prepaidNew.getPux16OtherDocNbr(),prepaidNew.getPux16CoupPymtAmt(),
                                                                                 prepaidNew.getPux16ScanSeqNbr(),prepaidNew.getChngStatusEmployeeId(),prepaidNew.getChngStatusDt(),prepaidNew.getCloseEmployeeId(),
                                                                                 prepaidNew.getCloseDt(),prepaidNew.getEodEmployeeId(),prepaidNew.getEodDt(),prepaidNew.getLastScanType(),prepaidNew.getLastScanDate(),
                                                                                 prepaidNew.getChkinAgentComment(),prepaidNew.getStatusId(),prepaidNew.getCashDepositSlipId(),prepaidNew.getCashDepositSlipNbr(),
                                                                                 prepaidNew.getOtherDepositSlipId(),prepaidNew.getOtherDepositSlipNbr(),prepaidNew.getFreightAmtInVisa(),prepaidNew.getVisaMnfstDt(),
                                                                                 prepaidNew.getVisaMnfstEmpId(),prepaidNew.getExchRate(),prepaidNew.getCourierId(),prepaidNew.getProduct(),prepaidNew.getNumberPkgs(),
                                                                                 prepaidNew.getWeight(),prepaidNew.getCreditCardBatchId(),prepaidNew.getEodId(),prepaidNew.getCouponBatchId(),prepaidNew.getPymtImpDt(),
                                                                                 prepaidNew.getOtherComment(),prepaidNew.getRcptNbr(),prepaidNew.getOrigRcptNbr(),prepaidNew.getRcptChngEmpId(),prepaidNew.getOrigEmployeeId(),
                                                                                 prepaidNew.getReassEmpId(),prepaidNew.getDualPrepaidIdNbr(),
                                                                                 prepaidNew.getbillAccount(),prepaidNew.getMiscDate(),prepaidNew.getMiscNbr());

                              newPrepaidId=prepaidLocal.getPrepaidId();
                              prepaidNew.setPrepaidId(newPrepaidId);

                            //Update receivable old
                              prepaidOld.setDualPrepaidIdNbr(newPrepaidId);
                              prepaidOld.setChkinAgentComment((prepaidOld.getChkinAgentComment()==null?"":prepaidOld.getChkinAgentComment()) + "SPLT;");
                              prepaidOld.setOtherComment(prepaidOld.getOtherComment()==null?"Exchange rate":prepaidOld.getOtherComment()+",Exchange rate");
                              prepaidOld.setStatusId(1);
                              prepaidCtrl.updatePrepaid(prepaidOld);
                          }//Close while
            }else if (count>1) {
                while(recIt.hasNext()){
                    prepaidRec = (PrepaidDetailsTableVO)recIt.next();
                    prepaidOld     = prepaidCtrl.getPrepaid(new Integer(prepaidRec.getPrepaidId()));
                    prepaidNew     = prepaidCtrl.getPrepaid(new Integer(prepaidRec.getPrepaidId()));

                    tabSourceAmount=prepaidOld.getCashPaymentAmt() + prepaidOld.getOtherPaymentAmt();
                    centValue = 0;

                    int tabSourceAmountInt = new Double(tabSourceAmount).intValue();
                    centValue = tabSourceAmount - tabSourceAmountInt;
                    tabSourceAmount = tabSourceAmountInt;

                    /*
                    Constants.logger.debug("\n\n ***+ centValue ==> " + centValue);
                    String totalAmt = new Double(tabSourceAmount).toString();
                    String iPart = perl.substitute("s/\\..*$//",totalAmt);
                    String dPart = perl.substitute("s/^.*?\\.//",totalAmt);

                    if(dPart.trim().length() > 0)
                    {   centValue = Double.parseDouble(dPart);
                        centValue /=100;
                    }
                    if(iPart.trim().length() > 0)
                       tabSourceAmount = Double.parseDouble(iPart);
                    */
                    if(currencyCd.equals("USD"))
                       tabDestAmount = centValue / exchangeRate;
                    else
                        tabDestAmount= centValue * exchangeRate;

                    if(prepaidOld.getCashPaymentAmt()>0){
                       prepaidOld.setCashPaymentAmt(tabSourceAmount);
                       prepaidNew.setCashPaymentAmt(tabDestAmount);
                    }else {
                          prepaidOld.setOtherPaymentAmt(tabSourceAmount);
                          prepaidNew.setOtherPaymentAmt(tabDestAmount);
                    }

                   //Set the receivables id in the object to produce the duality.
                      prepaidNew.setDualPrepaidIdNbr(prepaidOld.getPrepaidId());
                    //Insert the receivable new
                      prepaidNew.setPrepaidId(null);
                      prepaidNew.setPaymentCurrency(currencyCd);
                      prepaidNew.setOtherComment("Exchange rate");
                      prepaidNew.setChkinAgentComment("SPLT;");
                      prepaidNew.setStatusId(1);

                    //Get Home interface of Prepaid EJB to save the new prepaid record
                    //and get the new prepaid id.
                      PrepaidLocalHome prepaidHome  =(PrepaidLocalHome)ServiceLocator.getInstance().getEJBLocalHome(ServiceConstants.PREPAID_LOCAL_JNDI);
                      PrepaidLocal prepaidLocal     = prepaidHome.create(prepaidNew.getCustomerNm(),prepaidNew.getAwbDt(),prepaidNew.getLocationCd(),prepaidNew.getAwbNbr(),
                                                                         prepaidNew.getTinUniqId(),prepaidNew.getPaymentCurrency(),prepaidNew.getCashPaymentAmt(),prepaidNew.getOtherPaymentAmt(),
                                                                         prepaidNew.getOtherPaymentType(),prepaidNew.getOtherDocNbr(),prepaidNew.getCoupPymtAmt(),prepaidNew.getPux16CashPayment(),
                                                                         prepaidNew.getPux16FreightAmt(),prepaidNew.getPux16OtherPaymentAmt(),prepaidNew.getPux16OtherDocNbr(),prepaidNew.getPux16CoupPymtAmt(),
                                                                         prepaidNew.getPux16ScanSeqNbr(),prepaidNew.getChngStatusEmployeeId(),prepaidNew.getChngStatusDt(),prepaidNew.getCloseEmployeeId(),
                                                                         prepaidNew.getCloseDt(),prepaidNew.getEodEmployeeId(),prepaidNew.getEodDt(),prepaidNew.getLastScanType(),prepaidNew.getLastScanDate(),
                                                                         prepaidNew.getChkinAgentComment(),prepaidNew.getStatusId(),prepaidNew.getCashDepositSlipId(),prepaidNew.getCashDepositSlipNbr(),
                                                                         prepaidNew.getOtherDepositSlipId(),prepaidNew.getOtherDepositSlipNbr(),prepaidNew.getFreightAmtInVisa(),prepaidNew.getVisaMnfstDt(),
                                                                         prepaidNew.getVisaMnfstEmpId(),prepaidNew.getExchRate(),prepaidNew.getCourierId(),prepaidNew.getProduct(),prepaidNew.getNumberPkgs(),
                                                                         prepaidNew.getWeight(),prepaidNew.getCreditCardBatchId(),prepaidNew.getEodId(),prepaidNew.getCouponBatchId(),prepaidNew.getPymtImpDt(),
                                                                         prepaidNew.getOtherComment(),prepaidNew.getRcptNbr(),prepaidNew.getOrigRcptNbr(),prepaidNew.getRcptChngEmpId(),prepaidNew.getOrigEmployeeId(),
                                                                         prepaidNew.getReassEmpId(),prepaidNew.getDualPrepaidIdNbr(),prepaidNew.getbillAccount(),prepaidNew.getMiscDate(),prepaidNew.getMiscNbr());

                      newPrepaidId=prepaidLocal.getPrepaidId();
                      prepaidNew.setPrepaidId(newPrepaidId);

                    //Update receivable old
                      prepaidOld.setDualPrepaidIdNbr(newPrepaidId);
                      prepaidOld.setChkinAgentComment((prepaidOld.getChkinAgentComment()==null?"":prepaidOld.getChkinAgentComment()) + "SPLT;");
                      prepaidOld.setOtherComment(prepaidOld.getOtherComment()==null?"Exchange rate":prepaidOld.getOtherComment()+",Exchange rate");
                      prepaidOld.setStatusId(1);
                      prepaidCtrl.updatePrepaid(prepaidOld);
                  }//Close while
            }//Close if
        }catch(Exception e){
               String errorMsg = "Error occurred in splitCurrency(Collection prepaids, String currencyCd, double exchangeRate, double amountToChange) method of PrepPoaFacadeBean class";
    		   throw new EJBException(errorMsg, e);
        }
    }

    /**
     * Method to get splitted data of prepaid from DB
     * @param locationCd
     * @param employeeId
     * @return
     * @throws FacadeException
     */
    public Hashtable getSplitPrepaidTable(String locationCd,String employeeId,Integer pageNumber, Integer rowsByPage, String sortColumn, String sortDirection) throws FacadeException{
        try{
            return getPrepPoaDaoLocal().getSplitPrepaidTable(locationCd, employeeId,pageNumber,rowsByPage,sortColumn,sortDirection);
        }catch (Exception e) {
            String errorMsg = e.getClass().getName() +" occurred in getSplitCourierCashRecapTable(String locationCd,String employeeId) method from PrepPoaFacadeBean class";
            throw new FacadeException(errorMsg, e);
        }
    }

    private SystemUtilsLocal getSystemUtilsLocal() throws ServiceLocatorException, CreateException {
        SystemUtilsLocalHome utilHome=(SystemUtilsLocalHome)ServiceLocator.getInstance().getEJBLocalHome(Constants.SystemUtilsEJB_Local);
        SystemUtilsLocal util=utilHome.create();
        return util;
    }

    private PrepPoaDaoLocal getPrepPoaDaoLocal() throws ServiceLocatorException, CreateException {
        PrepPoaDaoLocalHome daoHome=(PrepPoaDaoLocalHome)ServiceLocator.getInstance().getEJBLocalHome(Constants.PrepPoaDaoEJB_Local);
        PrepPoaDaoLocal dao=daoHome.create();
        return dao;
    }

    private CommonOpsFacadeLocal getCommonOpsFacadeLocal() throws ServiceLocatorException, CreateException {
        CommonOpsFacadeLocalHome daoHome=(CommonOpsFacadeLocalHome)ServiceLocator.getInstance().getEJBLocalHome(Constants.CommonOpsFacadeEJB_Local);
        CommonOpsFacadeLocal dao=daoHome.create();
        return dao;
    }

    /**
     *
     * @param awbs
     * @throws FacadeException
     */

    public void updatePRPWithScanProcessed(Collection awbs) throws FacadeException{
    	try{
    		Iterator it=awbs.iterator();
    		PrepaidController pc = new PrepaidController();

    		while(it.hasNext()){
    			PrepaidScansVO	psvo =(PrepaidScansVO)it.next();
				PrepaidVO		pp   =(PrepaidVO)psvo.getPrepaidVO();

                /*
                    Si la moneda es la de Venezuela, se convierten los montos leidos por el Scan
                 */
                if(Utils.currencyRequiresConvertion( pp.getPaymentCurrency()))
                {
                    pp.setCashPaymentAmt( Utils.convertToNewCurrency( pp.getCashPaymentAmt(), pp.getLocationCd()));
                    pp.setOtherPaymentAmt( Utils.convertToNewCurrency( pp.getOtherPaymentAmt(), pp.getLocationCd()));

                    pp.setPux16CashPayment( Utils.convertToNewCurrency( pp.getPux16CashPayment(), pp.getLocationCd()));
                    pp.setPux16FreightAmt( Utils.convertToNewCurrency( pp.getPux16FreightAmt(), pp.getLocationCd()));
                    pp.setPux16OtherPaymentAmt( Utils.convertToNewCurrency( pp.getPux16OtherPaymentAmt(), pp.getLocationCd()));
                    pp.setPux16CoupPymtAmt( Utils.convertToNewCurrency( pp.getPux16CoupPymtAmt(), pp.getLocationCd()));
                }

                //Validate payment currency to have the right currency setted.
                String curResult = Utils.validateCountryCurencyInProcess(pp.getLocationCd(),pp.getPaymentCurrency());
                if(curResult==null){
                   pp.setPaymentCurrency(pp.getPaymentCurrency());
                }else{pp.setPaymentCurrency(curResult);}

                pc.updatePrepaid(pp);
    		}
    	}catch(Exception e){
    		String errorMsg = e.getClass().getName() +" occurred in updatePRPWithScanProcessed() method from PrepPoaFacadeBean class";
        	throw new FacadeException(errorMsg, e);}
    }

    public Collection getAllPreStatus() throws FacadeException{
        try{
            return getPrepPoaDaoLocal().getAllPreStatus();
        }
        catch (Exception e) {
            String errorMsg = e.getClass().getName() +" occurred in getAllPreStatus() method from PrepPoaFacadeBean class";
            throw new FacadeException(errorMsg, e);
        }
    }

    public TotalSummaryVO getPrepaidDetailsTotal(String locationCodePk, String employeeCodePk, String currencyCode,Integer pageNumber, Integer rowsByPage, String sortColumn, String sortDirection) throws FacadeException {
        try{
            return getPrepPoaDaoLocal().getPrepaidDetailsTotal(locationCodePk,employeeCodePk,currencyCode,pageNumber,rowsByPage,sortColumn,sortDirection);
        }
        catch (Exception e) {
            String errorMsg = e.getClass().getName() +" occurred in getPrepaidDetailsTotal() method from PrepPoaFacadeBean class";
            throw new FacadeException(errorMsg, e);
        }
    }

    public TotalSummaryVO getPrepaidDetailsSplitTotal(String locationCd,String employeeId,Integer pageNumber, Integer rowsByPage,String sortColumn,String sortDirection) throws FacadeException {
        try{
            return getPrepPoaDaoLocal().getPrepaidDetailsSplitTotal(locationCd, employeeId,pageNumber,rowsByPage,sortColumn,sortDirection);
        }catch (Exception e) {
            String errorMsg = e.getClass().getName() +" occurred in getPrepaidDetailsSplitTotal() method from PrepPoaFacadeBean class";
            throw new FacadeException(errorMsg, e);
        }
    }

    public Hashtable getGroundDetailsTable(String locationCd, String employeeId, String currencyCode, Integer pageNumber, Integer rowsByPage, String sortColumn, String sortDirection) throws FacadeException {
        try{
            return getPrepPoaDaoLocal().getGroundDetailsTable(locationCd, employeeId, currencyCode, pageNumber, rowsByPage, sortColumn, sortDirection);
        }catch (Exception e) {
            String errorMsg = e.getClass().getName() +" occurred in getGroundDetailsTable() method from PrepPoaFacadeBean class";
            throw new FacadeException(errorMsg, e);
        }
    }

    public Hashtable getSplitGroundDetailsTable(String locationCd, String employeeId, Integer pageNumber, Integer rowsByPage, String sortColumn, String sortDirection) throws FacadeException {
        try{
            return getPrepPoaDaoLocal().getSplitGroundTable(locationCd, employeeId, pageNumber, rowsByPage, sortColumn, sortDirection);
        }catch (Exception e) {
            String errorMsg = e.getClass().getName() +" occurred in getSplitGroundDetailsTable() method from PrepPoaFacadeBean class";
            throw new FacadeException(errorMsg, e);
        }
    }

    public Collection getGroundUsedCurrencies(String locationCd, String courier) throws FacadeException {
        try{
            return getPrepPoaDaoLocal().getGroundUsedCurrencies(locationCd, courier);
        }catch (Exception e) {
            String errorMsg = e.getClass().getName() +" occurred in getGroundUsedCurrencies(String locationCd, String courier) method from PrepPoaFacadeBean class";
            throw new FacadeException(errorMsg, e);
        }
    }

   /**
    * Save Ground Tracking Numbers
    * @param colTrakNbrs
    * @throws FacadeException
    */
    public Collection saveGrndTrakNbrs(java.util.Collection colTrakNbrs) throws FacadeException {
        Collection colErrors=new ArrayList();
        Iterator iterPrep=colTrakNbrs.iterator();

        while(iterPrep.hasNext()){
            GroundVO groundVO=(GroundVO)iterPrep.next();
            GroundController groundContr=new GroundController();

            try{
                int result=getCommonOpsFacadeLocal().existsEmployeeLocation(groundVO.getLocationCd(),groundVO.getCourEmpIdNbr());

                switch(result){
                    case 0: break;
                    case 1: {
                        EmployeeVO empVO=getSystemUtilsLocal().findFedExEmployee(groundVO.getCourEmpIdNbr());
                        if(empVO==null){
                            empVO=new EmployeeVO(groundVO.getCourEmpIdNbr(),"Unknown Employee","","","GROUND",null,"0",0, null, 0, 0,null,1);
                        }
                        new EmployeeController().setEmployee(empVO);
                        break;
                    }
                    default:{
                        colErrors.add(new ScansProcessingError(groundVO.getGrndTrakNbr(),"app.messages.ErrorInsertingGrndTrk", null, groundVO.getGrndTrakNbr(),null,null));
                        break;
                    }
                }
                groundContr.setGround(groundVO);
            }catch(Exception e){
                String errorMsg = e.getClass().getName() +" occurred in saveGrndTrakNbrs(java.util.Collection colTrakNbrs) method from PrepPoaFacadeBean class";
                throw new FacadeException(errorMsg, e);
            }
        }
        return colErrors;       
    }

    /**
     * Method to save changes done on the Ground Details Screen.
     * @param trackNbrs
     * @throws FacadeException
     */
    public void applyGroundChanges(Collection trackNbrs) throws FacadeException {

        Iterator iterChanges=trackNbrs.iterator();

        while(iterChanges.hasNext()){
            GroundDetailsTableVO grndChanges=(GroundDetailsTableVO)iterChanges.next();

            GroundController grndCont=new GroundController();
            GroundVO grndVO=null;
            try{
                grndVO=grndCont.getGround(new Integer(grndChanges.getGroundId()));

                grndVO.setCashPymtAmt(grndChanges.getCashPayment());
                grndVO.setCoupnPymtAmt(grndChanges.getCouponPayment());
                grndVO.setOtherPymtAmt(grndChanges.getOtherPayment());
                grndVO.setOtherPymtTypeCd(grndChanges.getOtherPaymentType());
                grndVO.setOtherDocNbr(grndChanges.getOtherDocNumber());
                grndVO.setChkinAgentComDesc(grndChanges.getComment());
                grndVO.setStatusCd(grndChanges.getStatusId());
                grndVO.setChngStatusEmpIdNbr(grndChanges.getChngStatusEmployeeId());
                grndVO.setChngStatusDt(grndChanges.getChngStatusDate());
                grndVO.setOtherComDsc(grndChanges.getOtherComment());
                grndVO.setCustNm(grndChanges.getCustNm());
                grndVO.setBillAccount(grndChanges.getBillAccount());
              
                //change done to add two column
                
                if(grndChanges.getMiscDate().length() != 0) {
                	grndVO.setMiscDate(new java.text.SimpleDateFormat("MM/dd/yyyy").parse(grndChanges.getMiscDate()));
                }
                
                if(grndChanges.getMiscNbr() != null) {
                	grndVO.setMiscNbr(grndChanges.getMiscNbr());
                } 
                
                if(grndChanges.getRcptChngEmpId()!=null){
                    grndVO.setRcptChngEmpNbr(grndChanges.getRcptChngEmpId());
                	grndVO.setRcptNbr(grndChanges.getRcptNbr());
                	grndVO.setOrigRcptNbr(grndChanges.getRcptNbrPrev());
                }

                grndCont.updateGround(grndVO);

            }catch(Exception e){
                String errorMsg = e.getClass().getName() +" occurred in applyGroundChanges(Collection trackNbrs) method from PrepPoaFacadeBean class";
                throw new FacadeException(errorMsg, e);
            }
        }//Close while
    }//Close method applyGroundChanges(Collection trackNbrs)

    public TotalSummaryVO getGroundDetailsTotal(String locationCd, String employeeId, String currentCurrencyCd, Integer pageNumber, Integer rowsByPage) throws FacadeException {
        try{
            return getPrepPoaDaoLocal().getGroundDetailsTotal(locationCd,employeeId,currentCurrencyCd,pageNumber,rowsByPage);
        }
        catch (Exception e) {
            String errorMsg = e.getClass().getName() +" occurred in getGroundDetailsTotal(String locationCd, String employeeId, String currentCurrencyCd, Integer pageNumber, Integer rowsByPage) method from PrepPoaFacadeBean class";
            throw new FacadeException(errorMsg, e);
        }
    }

    public TotalSummaryVO getGroundDetailsSplitTotal(String locationCd, String employeeId, Integer pageNumber, Integer rowsByPage) throws FacadeException {
        try{
            return getPrepPoaDaoLocal().getGroundDetailsSplitTotal(locationCd,employeeId,pageNumber,rowsByPage);
        }
        catch (Exception e) {
            String errorMsg = e.getClass().getName() +" occurred in getGroundDetailsTotal(String locationCd, String employeeId, String currentCurrencyCd, Integer pageNumber, Integer rowsByPage) method from PrepPoaFacadeBean class";
            throw new FacadeException(errorMsg, e);
        }
    }

    public TotalSummaryVO getPoaDetailsTotal(String locationCodePk, String employeeCodePk, String currencyCode,Integer pageNumber, Integer rowsByPage) throws FacadeException {
        try {
            return getPrepPoaDaoLocal().getPoaDetailsTotal(locationCodePk,employeeCodePk,currencyCode,pageNumber,rowsByPage);
        }
        catch (Exception e) {
            String errorMsg = e.getClass().getName() +" occurred in getPoaDetailsTotal() method from PrepPoaFacadeBean class";
            throw new FacadeException(errorMsg, e);
        }
    }


    public void applyOacChanges(java.util.Collection colChanges) throws FacadeException {

        Iterator iterChanges=colChanges.iterator();

        while(iterChanges.hasNext()){
            OACDetailsTableVO oacChanges=(OACDetailsTableVO)iterChanges.next();

            OacController oacCont=new OacController();
            OacVO oacVO=null;
            try{
                oacVO=oacCont.getOac(new Integer(oacChanges.getOacId()));

                oacVO.setCashPymtAmt(oacChanges.getCashPayment());
                oacVO.setOtherPymtAmt(oacChanges.getOtherPayment());
                oacVO.setOtherPymtTypeCd(oacChanges.getOtherPaymentType());
                oacVO.setOtherDocNbr(oacChanges.getOtherDocNumber());
                oacVO.setChkinAgentComDesc(oacChanges.getComment());
                oacVO.setStatusCd(oacChanges.getStatusId());
                oacVO.setChngStatusEmpIdNbr(oacChanges.getChngStatusEmployeeId());
                oacVO.setChngStatusDt(oacChanges.getChngStatusDate());
                oacVO.setOtherComDesc(oacChanges.getOtherComment());

                if(oacChanges.getRcptChngEmpId()!=null){
                   oacVO.setRcptChngEmpNbr(oacChanges.getRcptChngEmpId());
                   oacVO.setRcptNbr(oacChanges.getRcptNbr());
                   oacVO.setOrigRcptNbr(oacChanges.getRcptNbrPrev());
                }

                oacCont.updateOac(oacVO);

            }catch(Exception e){
                String errorMsg = e.getClass().getName() +" occurred in applyOacChanges(java.util.Collection colChanges) method from PrepPoaFacadeBean class";
                throw new FacadeException(errorMsg, e);
            }
        }
    }

    public Hashtable getOacDetailsTable(String locationCd, String courier, String currentCurrency, Integer pageNumber, Integer rowsByPage, String sortColumn, String sortDirection) throws FacadeException {
        try {
            return getPrepPoaDaoLocal().getOacDetailsTable(locationCd, courier, currentCurrency, pageNumber, rowsByPage, sortColumn, sortDirection);
        }
        catch (Exception e) {
            String errorMsg = e.getClass().getName() +" occurred in getOacDetailsTable() method from PrepPoaFacadeBean class";
            throw new FacadeException(errorMsg, e);
        }
    }

     public Collection getAwbsToOacs(String locationCd, String employeeId, String currencyCode) throws FacadeException {
        try{
            return getPrepPoaDaoLocal().getAwbsToOacs(locationCd, employeeId, currencyCode);
        }catch (Exception e) {
            String errorMsg = e.getClass().getName() + " occurred in getAwbsToOacs(String locationCd, String employeeId, String currencyCode) method from CommonOpsFacadeBean class";
            throw new FacadeException(errorMsg, e);
        }
    }

    public Hashtable getSplitOacTable(String locationCd, String employeeId, Integer pageNumber, Integer rowsByPage, String sortColumn, String sortDirection) throws FacadeException {
        try{
            return getPrepPoaDaoLocal().getSplitOacTable(locationCd, employeeId, pageNumber, rowsByPage, sortColumn, sortDirection);
        }catch (Exception e) {
            String errorMsg = e.getClass().getName() + " occurred in getSplitOacTable(String locationCd, String employeeId, Integer pageNumber, Integer rowsByPage, String sortColumn, String sortDirection) method from CommonOpsFacadeBean class";
            throw new FacadeException(errorMsg, e);
        }
    }

    /**
     * Method to divide a oac payment with local and usd currency.
     * @param oacs
     * @param currencyCd
     * @param exchangeRate
     * @param amountToChange
     * @throws FacadeException
     */
    public void splitOacCurrency(Collection oacs, String currencyCd, double exchangeRate, double amountToChange) throws FacadeException {
        OacController oacCtrl       = new OacController();
        OacAwbController oacAwbCtrl = new OacAwbController();

        Integer newOacId = null;

        try{
            int count = oacs.size();
            double tabSourceAmount=0,tabDestAmount=0;
            double centValue=0;

            OACDetailsTableVO oacRec = null;
            OacVO oacNew = null;
            OacVO oacOld   = null;

            Iterator recIt=oacs.iterator();
            if(count==1){
                    while(recIt.hasNext()){
                          oacRec = (OACDetailsTableVO)recIt.next();
                          oacOld = oacCtrl.getOac(new Integer(oacRec.getOacId()));
                          oacNew = oacCtrl.getOac(new Integer(oacRec.getOacId()));

                          //If number of rec is 1 then use exchange rate value passed as parameter
                          //Compute is different for count greater than 1

                             tabSourceAmount=oacOld.getCashPymtAmt() + oacOld.getOtherPymtAmt();
                             tabSourceAmount=tabSourceAmount-amountToChange;
                             if(currencyCd.equals("USD")){
                                tabDestAmount=amountToChange / exchangeRate;
                             }else{tabDestAmount=amountToChange * exchangeRate;}

                             if(oacOld.getCashPymtAmt()>0){
                                oacOld.setCashPymtAmt(tabSourceAmount);
                                oacNew.setCashPymtAmt(tabDestAmount);
                             }else{
                                   oacOld.setOtherPymtAmt(tabSourceAmount);
                                   oacNew.setOtherPymtAmt(tabDestAmount);
                             }
                            //Set the receivables id in the object to produce the duality.
                              oacNew.setDualObAncIdNbr(oacOld.getObAncSvcIdNbr());
                            //Insert the receivable new
                              oacNew.setObAncSvcIdNbr(null);
                              oacNew.setPymtCurrCd(currencyCd);
                              oacNew.setOtherComDesc("Exchange rate");
                              oacNew.setChkinAgentComDesc("SPLT;");
                              oacNew.setStatusCd(1);

                            //Get Home interface of Oac EJB to save the new oac record
                            //and get the new oac id.
                              OacLocalHome oacHome  =(OacLocalHome)ServiceLocator.getInstance().getEJBLocalHome(ServiceConstants.OAC_LOCAL_JNDI);

                              OacLocal oacLocal     = oacHome.create(oacNew.getObAncSvcDt(), oacNew.getLocationCd(), oacNew.getPymtCurrCd(), oacNew.getCashPymtAmt(),
                                                      oacNew.getOtherPymtAmt(),oacNew.getOtherPymtTypeCd(),oacNew.getOtherDocNbr(),oacNew.getChngStatusEmpIdNbr(),
                                                      oacNew.getChngStatusDt(),oacNew.getCloseEmpIdNbr(),oacNew.getCloseDt(),oacNew.getEodEmpIdNbr(),oacNew.getEodDt(),
                                                      oacNew.getChkinAgentComDesc(),oacNew.getStatusCd(),oacNew.getExchRateAmt(),oacNew.getCourEmpIdNbr(),
                                                      oacNew.getCashDepSlipIdNbr(),oacNew.getOtherDepSlipIdNbr(),oacNew.getEodIdNbr(),oacNew.getOtherComDesc(),
                                                      oacNew.getRcptNbr(),oacNew.getOrigRcptNbr(),oacNew.getRcptChngEmpNbr(),oacNew.getOrigEmpNbr(),oacNew.getRsgnEmpNbr(),
                                                      oacNew.getDualObAncIdNbr());

                              newOacId=oacLocal.getObAncSvcIdNbr();
                              oacNew.setObAncSvcIdNbr(newOacId);

                            //Update oac old
                              oacOld.setDualObAncIdNbr(newOacId);
                              oacOld.setChkinAgentComDesc(oacOld.getChkinAgentComDesc()==null?"":oacOld.getChkinAgentComDesc() + "SPLT;");
                              oacOld.setOtherComDesc(oacOld.getOtherComDesc()==null?"Exchange rate":oacOld.getOtherComDesc()+",Exchange rate");
                              oacOld.setStatusCd(1);
                              oacCtrl.updateOac(oacOld);

                           //Add awbs with the new oac id. using oacAwbCtrl to the table OAC_AWB
                              String [] awbs = oacRec.getAwbs();
                              for(int i=0;i<awbs.length;i++)
                              {   OacAwbVO oacAwbVO = new OacAwbVO();
                                  oacAwbVO.setAwbNbr(awbs[i]);
                                  oacAwbVO.setObAncSvcIdNbr(newOacId);
                                  oacAwbCtrl.setOacAwb(oacAwbVO);
                              }

                          }//Close while

            }else if (count>1) {
                while(recIt.hasNext()){
                    oacRec = (OACDetailsTableVO)recIt.next();
                    oacOld = oacCtrl.getOac(new Integer(oacRec.getOacId()));
                    oacNew = oacCtrl.getOac(new Integer(oacRec.getOacId()));

                    tabSourceAmount=oacOld.getCashPymtAmt() + oacOld.getOtherPymtAmt();
                    centValue = 0;

                    int tabSourceAmountInt = new Double(tabSourceAmount).intValue();
                    centValue = tabSourceAmount - tabSourceAmountInt;
                    tabSourceAmount = tabSourceAmountInt;

                    if(currencyCd.equals("USD"))
                       tabDestAmount = centValue / exchangeRate;
                    else
                        tabDestAmount= centValue * exchangeRate;

                    if(oacOld.getCashPymtAmt()>0){
                       oacOld.setCashPymtAmt(tabSourceAmount);
                       oacNew.setCashPymtAmt(tabDestAmount);
                    }else {
                          oacOld.setOtherPymtAmt(tabSourceAmount);
                          oacNew.setOtherPymtAmt(tabDestAmount);
                    }

                   //Set the receivables id in the object to produce the duality.
                      oacNew.setDualObAncIdNbr(oacOld.getObAncSvcIdNbr());

                    //Insert the receivable new
                      oacNew.setObAncSvcIdNbr(null);
                      oacNew.setPymtCurrCd(currencyCd);
                      oacNew.setOtherComDesc("Exchange rate");
                      oacNew.setChkinAgentComDesc("SPLT;");
                      oacNew.setStatusCd(1);

                    //Get Home interface of Oac EJB to save the new oac record
                    //and get the new oac id.
                      OacLocalHome oacHome  =(OacLocalHome)ServiceLocator.getInstance().getEJBLocalHome(ServiceConstants.OAC_LOCAL_JNDI);
                      OacLocal oacLocal     = oacHome.create(oacNew.getObAncSvcDt(), oacNew.getLocationCd(), oacNew.getPymtCurrCd(), oacNew.getCashPymtAmt(),
                                                             oacNew.getOtherPymtAmt(),oacNew.getOtherPymtTypeCd(),oacNew.getOtherDocNbr(),oacNew.getChngStatusEmpIdNbr(),
                                                             oacNew.getChngStatusDt(),oacNew.getCloseEmpIdNbr(),oacNew.getCloseDt(),oacNew.getEodEmpIdNbr(),oacNew.getEodDt(),
                                                             oacNew.getChkinAgentComDesc(),oacNew.getStatusCd(),oacNew.getExchRateAmt(),oacNew.getCourEmpIdNbr(),
                                                             oacNew.getCashDepSlipIdNbr(),oacNew.getOtherDepSlipIdNbr(),oacNew.getEodIdNbr(),oacNew.getOtherComDesc(),
                                                             oacNew.getRcptNbr(),oacNew.getOrigRcptNbr(),oacNew.getRcptChngEmpNbr(),oacNew.getOrigEmpNbr(),oacNew.getRsgnEmpNbr(),
                                                             oacNew.getDualObAncIdNbr());
                      newOacId=oacLocal.getObAncSvcIdNbr();
                      oacNew.setObAncSvcIdNbr(newOacId);

                    //Update receivable old
                      oacOld.setDualObAncIdNbr(newOacId);
                      oacOld.setChkinAgentComDesc((oacOld.getChkinAgentComDesc()==null?"":oacOld.getChkinAgentComDesc()) + "SPLT;");
                      oacOld.setOtherComDesc(oacOld.getOtherComDesc()==null?"Exchange rate":oacOld.getOtherComDesc()+",Exchange rate");
                      oacOld.setStatusCd(1);
                      oacCtrl.updateOac(oacOld);

                    //Add awbs with the new oac id. using oacAwbCtrl to the table OAC_AWB
                      String [] awbs = oacRec.getAwbs();
                      for(int i=0;i<awbs.length;i++)
                      {   OacAwbVO oacAwbVO = new OacAwbVO();
                          oacAwbVO.setAwbNbr(awbs[i]);
                          oacAwbVO.setObAncSvcIdNbr(newOacId);
                          oacAwbCtrl.setOacAwb(oacAwbVO);
                      }

                  }//Close while

            }//Close if
        }catch(Exception e){
               String errorMsg = "Error occurred in splitOacCurrency(Collection oacs, String tabType, double exchangeRate, double amountToChange) method of PrepPoaFacadeBean class";
    		   throw new EJBException(errorMsg, e);
        }
    }//Close method splitOacCurrency

    public Collection getOacUsedCurrencies(String locationCd, String employeeId) throws FacadeException {
        try{
            return getPrepPoaDaoLocal().getOacUsedCurrencies(locationCd,employeeId);
        }catch (Exception e) {
            String errorMsg = e.getClass().getName() +" occurred in getOacUsedCurrencies(String locationCd, String employeeId) method from PrepPoaFacadeBean class";
            throw new FacadeException(errorMsg, e);
        }
    }

    public TotalSummaryVO getOacDetailsTotal(String locationCd, String employeeId, String currentCurrencyCd, Integer pageNumber, Integer rowsByPage, String sortColumn, String sortDirection) throws FacadeException {
        try{
            return getPrepPoaDaoLocal().getOacDetailsTotal(locationCd, employeeId, currentCurrencyCd, pageNumber, rowsByPage, sortColumn, sortDirection);
        }
        catch (Exception e) {
            String errorMsg = e.getClass().getName() +" occurred in getOacDetailsTotal() method from PrepPoaFacadeBean class";
            throw new FacadeException(errorMsg, e);
        }
    }

    public TotalSummaryVO getOacDetailsSplitTotal(String locationCd, String employeeId, Integer pageNumber, Integer rowsByPage, String sortColumn, String sortDirection) throws FacadeException {
        try{
            return getPrepPoaDaoLocal().getOacDetailsSplitTotal(locationCd, employeeId, pageNumber, rowsByPage, sortColumn, sortDirection);
        }
        catch (Exception e) {
            String errorMsg = e.getClass().getName() +" occurred in getOacDetailsSplitTotal() method from PrepPoaFacadeBean class";
            throw new FacadeException(errorMsg, e);
        }
    }

    /**
     * Method to save data of OAC
     * @param oacList
     * @throws FacadeException
     */
    public void saveOacs(Collection oacList, String locationCd) throws FacadeException {
           Iterator iterOac=oacList.iterator();
           OacAwbController obawbCntr   = new OacAwbController();
           PrepaidController prpCntr    = new PrepaidController();
           PaymentTypeController pymtTypeCntr = new PaymentTypeController();

           SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");
           Date oacDate=null;
           try{
               OACDetailsTableVO oacTableVO = null;
               OacVO oac = null;
               while(iterOac.hasNext()){
                     oacTableVO=(OACDetailsTableVO)iterOac.next();
                     oac = new OacVO();

                     oacDate=sdf.parse(oacTableVO.getOacDateText());
                     oac.setObAncSvcDt(oacDate);

                     oac.setCourEmpIdNbr(oacTableVO.getCourierId());
                     oac.setPymtCurrCd(oacTableVO.getPaymentCurrency());
                     oac.setLocationCd(locationCd);
                     oac.setRcptNbr(oacTableVO.getRcptNbr());
                     oac.setStatusCd(0);
                     oac.setCashPymtAmt(oacTableVO.getCashPayment());

                   //Get the first awb selected to have the payment type, status and doc number from prepaid to set it in OAC
                     String[] awbs = oacTableVO.getAwbs();
                     String   awb  = awbs[0]; //Get the first awb from the list of awbs
                     ArrayList prepaids = (ArrayList)prpCntr.getPrepaidPrepaidByAwbNbr(awb);

                    if(prepaids.size()>0){
                       PrepaidVO prepaidVO = (PrepaidVO)prepaids.get(0);
                       if(prepaidVO.getOtherPaymentAmt()>0)
                       {  oac.setOtherPymtAmt(oac.getCashPymtAmt());
                          oac.setCashPymtAmt(0);
                          oac.setOtherPymtTypeCd(prepaidVO.getOtherPaymentType());
                          oac.setOtherDocNbr(prepaidVO.getOtherDocNbr());

                          if(prepaidVO.getStatusId()!=3 && prepaidVO.getStatusId()!=5)
                             oac.setStatusCd(prepaidVO.getStatusId());
                          else
                              oac.setStatusCd(0);
                       }
                    }

                   //Insert the oac object
                   OacLocalHome oacHome  =(OacLocalHome)ServiceLocator.getInstance().getEJBLocalHome(ServiceConstants.OAC_LOCAL_JNDI);

                   OacLocal oacLocal     = oacHome.create(oac.getObAncSvcDt(), locationCd, oac.getPymtCurrCd(), oac.getCashPymtAmt(), oac.getOtherPymtAmt(),
                                                          oac.getOtherPymtTypeCd(),  oac.getOtherDocNbr(),  oac.getChngStatusEmpIdNbr(),  oac.getChngStatusDt(),
                                                          oac.getCloseEmpIdNbr(),  oac.getCloseDt(),  oac.getEodEmpIdNbr(), oac.getEodDt(),oac.getChkinAgentComDesc(),
                                                          oac.getStatusCd(),oac.getExchRateAmt(),oac.getCourEmpIdNbr(),oac.getCashDepSlipIdNbr(),  oac.getOtherDepSlipIdNbr(),
                                                          0,  oac.getOtherComDesc(),  oac.getRcptNbr(),  oac.getOrigRcptNbr(),  oac.getRcptChngEmpNbr(),
                                                          oac.getOrigEmpNbr(),  oac.getRsgnEmpNbr(),  null);

                   //After inser the oac object try inserting awbs and oac id into the OAC AWB table of relationship.
                   //Iterate over the awbs array an for OacAwb object to insert data
                   Integer oacId = oacLocal.getObAncSvcIdNbr();
                   OacAwbVO oacAwbVO = new OacAwbVO();
                   for(int i=0 ; i<awbs.length;i++){
                       awb = awbs[i];
                       oacAwbVO.setAwbNbr(awb);
                       oacAwbVO.setObAncSvcIdNbr(oacId);
                       obawbCntr.setOacAwb(oacAwbVO);
                   }

               }
           }catch(Exception e){
                String errorMsg = e.getClass().getName() +" occurred in saveOacs(Collection oacList) method from PrepPoaFacadeBean class";
                throw new FacadeException(errorMsg, e);
           }
   }//Close method saveOacs

    /**
     * Method to split the value of money between local currency and USD currency
     * @param groundsSelected  Collection
     * @param currencyCd
     * @param exchangeRate double value
     * @param amountToChange
     * @exception FacadeException
     */
    public void splitGroundCurrency(Collection groundsSelected, String currencyCd, double exchangeRate, double amountToChange) throws FacadeException
    {
        GroundController groundCtrl=new GroundController();
        Integer newgroundId = null;

        try{
            int count = groundsSelected.size();
            double tabSourceAmount=0,tabDestAmount=0;//,exchAmount=0;
            double centValue=0;

            GroundDetailsTableVO groundRec = null;
            GroundVO groundNew = null;
            GroundVO groundOld   = null;

            Iterator recIt=groundsSelected.iterator();
            if(count==1){
                    while(recIt.hasNext()){
                          groundRec = (GroundDetailsTableVO)recIt.next();
                          groundOld     = groundCtrl.getGround(new Integer(groundRec.getGroundId()));
                          groundNew     = groundCtrl.getGround(new Integer(groundRec.getGroundId()));

                          //If number of rec is 1 then use exchange rate value passed as parameter
                          //Compute is different for count greater than 1

                             tabSourceAmount=groundOld.getCashPymtAmt() + groundOld.getOtherPymtAmt();
                             tabSourceAmount=tabSourceAmount-amountToChange;
                             if(currencyCd.equals("USD")){
                                tabDestAmount=amountToChange / exchangeRate;
                             }else{tabDestAmount=amountToChange * exchangeRate;}

                             if(groundOld.getCashPymtAmt()>0){
                                groundOld.setCashPymtAmt(tabSourceAmount);
                                groundNew.setCashPymtAmt(tabDestAmount);
                             }else{
                                   groundOld.setOtherPymtAmt(tabSourceAmount);
                                   groundNew.setOtherPymtAmt(tabDestAmount);
                             }
                            //Set the receivables id in the object to produce the duality.
                              groundNew.setDualGrndShipIdNbr(groundOld.getGrndShpIdNbr());
                            //Insert the receivable new
                              groundNew.setGrndShpIdNbr(null);
                              groundNew.setPaymentCurrency(currencyCd);
                              groundNew.setOtherComDsc("Exchange rate");
                              groundNew.setChkinAgentComDesc("SPLT;");
                              groundNew.setStatusCd(1);

                            //Get Home interface of ground EJB to save the new ground record
                            //and get the new ground id.
                              GroundLocalHome groundHome  =(GroundLocalHome)ServiceLocator.getInstance().getEJBLocalHome(ServiceConstants.GROUND_LOCAL_JNDI);

                    GroundLocal groundLocal = groundHome.create(groundNew.getGrndShpDt(), groundNew.getLocationCd(), groundNew.getGrndTrakNbr(),
                            groundNew.getPaymentCurrency(), groundNew.getCashPymtAmt(), groundNew.getOtherPymtAmt(),
                            groundNew.getOtherPymtTypeCd(), groundNew.getOtherDocNbr(), groundNew.getCoupnPymtAmt(),
                            groundNew.getChngStatusEmpIdNbr(), groundNew.getChngStatusDt(), groundNew.getCloseEmpIdNbr(),
                            groundNew.getCloseDt(), groundNew.getEodEmpIdNbr(), groundNew.getEodDt(), groundNew.getChkinAgentComDesc(),
                            groundNew.getStatusCd(), groundNew.getExchRateAmt(), groundNew.getCourEmpIdNbr(), groundNew.getCashDepSlipIdNbr(),
                            groundNew.getOtherDepSlipIdNbr(), groundNew.getEodIdNbr(), groundNew.getCoupnBatchIdNbr(),
                            groundNew.getOtherComDsc(), groundNew.getRcptNbr(), groundNew.getOrigRcptNbr(), groundNew.getRcptChngEmpNbr(),
                            groundNew.getOrigEmpNbr(), groundNew.getRsgnEmpNbr(), groundNew.getDualGrndShipIdNbr(), groundNew.getCustNm(),groundNew.getMiscDate(),groundNew.getMiscNbr());

                              newgroundId=groundLocal.getGrndShpIdNbr();
                              groundNew.setGrndShpIdNbr(newgroundId);

                            //Update receivable old
                              groundOld.setDualGrndShipIdNbr(newgroundId);
                              groundOld.setChkinAgentComDesc(groundOld.getChkinAgentComDesc()==null?"":groundOld.getChkinAgentComDesc() + "SPLT;");
                              groundOld.setOtherComDsc(groundOld.getOtherComDsc()==null?"Exchange rate":groundOld.getOtherComDsc()+",Exchange rate");
                              groundOld.setStatusCd(1);
                              groundCtrl.updateGround(groundOld);
                          }//Close while
            }else if (count>1) {
                while(recIt.hasNext()){
                    groundRec = (GroundDetailsTableVO)recIt.next();
                    groundOld     = groundCtrl.getGround(new Integer(groundRec.getGroundId()));
                    groundNew     = groundCtrl.getGround(new Integer(groundRec.getGroundId()));

                    tabSourceAmount=groundOld.getCashPymtAmt() + groundOld.getOtherPymtAmt();
                    centValue = 0;

                    int tabSourceAmountInt = new Double(tabSourceAmount).intValue();
                    centValue = tabSourceAmount - tabSourceAmountInt;
                    tabSourceAmount = tabSourceAmountInt;

                    if(currencyCd.equals("USD"))
                       tabDestAmount = centValue / exchangeRate;
                    else
                        tabDestAmount= centValue * exchangeRate;

                    if(groundOld.getCashPymtAmt()>0){
                       groundOld.setCashPymtAmt(tabSourceAmount);
                       groundNew.setCashPymtAmt(tabDestAmount);
                    }else {
                          groundOld.setOtherPymtAmt(tabSourceAmount);
                          groundNew.setOtherPymtAmt(tabDestAmount);
                    }

                   //Set the receivables id in the object to produce the duality.
                      groundNew.setDualGrndShipIdNbr(groundOld.getGrndShpIdNbr());
                    //Insert the receivable new
                      groundNew.setGrndShpIdNbr(null);
                      groundNew.setPaymentCurrency(currencyCd);
                      groundNew.setOtherComDsc("Exchange rate");
                      groundNew.setChkinAgentComDesc("SPLT;");
                      groundNew.setStatusCd(1);

                    //Get Home interface of ground EJB to save the new ground record
                    //and get the new ground id.
                      GroundLocalHome groundHome  =(GroundLocalHome)ServiceLocator.getInstance().getEJBLocalHome(ServiceConstants.GROUND_LOCAL_JNDI);

                    GroundLocal groundLocal = groundHome.create(groundNew.getGrndShpDt(), groundNew.getLocationCd(), groundNew.getGrndTrakNbr(),
                            groundNew.getPaymentCurrency(), groundNew.getCashPymtAmt(), groundNew.getOtherPymtAmt(),
                            groundNew.getOtherPymtTypeCd(), groundNew.getOtherDocNbr(), groundNew.getCoupnPymtAmt(),
                            groundNew.getChngStatusEmpIdNbr(), groundNew.getChngStatusDt(), groundNew.getCloseEmpIdNbr(),
                            groundNew.getCloseDt(), groundNew.getEodEmpIdNbr(), groundNew.getEodDt(), groundNew.getChkinAgentComDesc(),
                            groundNew.getStatusCd(), groundNew.getExchRateAmt(), groundNew.getCourEmpIdNbr(), groundNew.getCashDepSlipIdNbr(),
                            groundNew.getOtherDepSlipIdNbr(), groundNew.getEodIdNbr(), groundNew.getCoupnBatchIdNbr(),
                            groundNew.getOtherComDsc(), groundNew.getRcptNbr(), groundNew.getOrigRcptNbr(), groundNew.getRcptChngEmpNbr(),
                            groundNew.getOrigEmpNbr(), groundNew.getRsgnEmpNbr(), groundNew.getDualGrndShipIdNbr(), groundNew.getCustNm(),groundNew.getMiscDate(),groundNew.getMiscNbr());
                    newgroundId = groundLocal.getGrndShpIdNbr();
                    groundNew.setGrndShpIdNbr(newgroundId);

                    //Update receivable old
                      groundOld.setDualGrndShipIdNbr(newgroundId);
                      groundOld.setChkinAgentComDesc((groundOld.getChkinAgentComDesc()==null?"":groundOld.getChkinAgentComDesc()) + "SPLT;");
                      groundOld.setOtherComDsc(groundOld.getOtherComDsc()==null?"Exchange rate":groundOld.getOtherComDsc()+",Exchange rate");
                      groundOld.setStatusCd(1);
                      groundCtrl.updateGround(groundOld);
                  }//Close while
            }//Close if
        }catch(Exception e){
               String errorMsg = "Error occurred in splitGroundCurrency(Collection groundsSelected, String currencyCd, double exchangeRate, double amountToChange) method of PrepPoaFacadeBean class";
    		   throw new EJBException(errorMsg, e);
        }
    }//Close splitGroundCurrency
    
    public boolean isInvoiceFedexAcctMatch(String accountNbr, String invoiceNbr) throws FacadeException {
        try {
            return getPrepPoaDaoLocal().isInvoiceFedexAcctMatch(accountNbr, invoiceNbr);
        } catch (Exception e) {
        	String errorMsg = e.getClass().getName() +" occurred in isInvoiceFedexAcctMatch() method from PrepPoaFacadeBean class";
        	throw new FacadeException(errorMsg, e);
        }
    }
    
}

