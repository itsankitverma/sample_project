package com.fedex.lacitd.cashcontrol.biztier.facades;

import com.fedex.lacitd.cashcontrol.biztier.bizdelegates.AdminBizDelegate;
import com.fedex.lacitd.cashcontrol.biztier.common.Constants;
import com.fedex.lacitd.cashcontrol.biztier.common.EmployeeProfile;
import com.fedex.lacitd.cashcontrol.biztier.common.FedExEmployee;
import com.fedex.lacitd.cashcontrol.biztier.common.SupportedCurrencyVO;
import com.fedex.lacitd.cashcontrol.biztier.exception.FacadeException;
import com.fedex.lacitd.cashcontrol.datatier.common.ServiceLocator;
//import com.fedex.lacitd.cashcontrol.common.ServiceLocator;

import com.fedex.lacitd.cashcontrol.datatier.controller.*;
import com.fedex.lacitd.cashcontrol.datatier.dao.SystemUtilsDaoLocal;
import com.fedex.lacitd.cashcontrol.datatier.dao.SystemUtilsDaoLocalHome;
import com.fedex.lacitd.cashcontrol.datatier.exception.ServiceLocatorException;
import com.fedex.lacitd.cashcontrol.datatier.valueobject.*;

import javax.ejb.CreateException;
import javax.naming.Context;
import javax.naming.NamingEnumeration;
import javax.naming.NamingException;
import javax.naming.directory.*;
import java.util.*;

/**
 * Created Sep 26, 2002 12:15:23 PM
 * Code generated by the Forte For Java EJB Builder
 *
 * @author ccardenas
 */
public class SystemUtilsBean implements javax.ejb.SessionBean {
    private javax.ejb.SessionContext context;


    /**
     * @see javax.ejb.SessionBean#setSessionContext(javax.ejb.SessionContext)
     */
    public void setSessionContext(javax.ejb.SessionContext aContext) {
        context = aContext;
    }


    /**
     * @see javax.ejb.SessionBean#ejbActivate()
     */
    public void ejbActivate() {

    }


    /**
     * @see javax.ejb.SessionBean#ejbPassivate()
     */
    public void ejbPassivate() {

    }


    /**
     * @see javax.ejb.SessionBean#ejbRemove()
     */
    public void ejbRemove() {

    }

    /**
     * See section 7.10.3 of the EJB 2.0 specification
     */
    public void ejbCreate() {
    }


    public java.util.Collection login(java.lang.String username, java.lang.String pwd) throws FacadeException {
        try {
        	
            ArrayList results = new ArrayList();
            EmployeeProfile ep = new EmployeeProfile();
            int loginResult = getSystemUtilsDaoLocal().login(username, pwd);
            LocationController lc = new LocationController();

            if (loginResult < 1) {

                ep = new EmployeeProfile();
                ep.setEmployeeId(username);

                EmpXLocationXRoleController empLocRoles = new EmpXLocationXRoleController();
                Collection checkLocRoles = empLocRoles.getEmpXLocationXRoleByEmployeeId(username);

                EmployeeController empCtrl = new EmployeeController();
                EmployeeVO empVO = empCtrl.getEmployee(username);
                ep.setEmployeeName(empVO.getEmployeeNm());
                ep.setDefaultDetailPage(empVO.getDefaultPage());
                ep.setLocations(empCtrl.getLocations(username));

                if (checkLocRoles.size() == 0) {
                    return results;
                } else if (ep.getLocations().size() > 1) {
                    Iterator iterLoc = ep.getLocations().iterator();

                    Map mapLocRoles = new HashMap();
                    Map mapCountryCurrencies = new HashMap();
                    String oneCountry = null;

                    while (iterLoc.hasNext()) {
                        LocationVO locVO = (LocationVO) iterLoc.next();
                        oneCountry = locVO.getCountryCd();

                        mapLocRoles.put(locVO.getLocationCd(), new java.util.HashMap());
                        if (!mapCountryCurrencies.containsKey(locVO.getCountryCd())) {
                            mapCountryCurrencies.put(locVO.getCountryCd(), getSystemUtilsDaoLocal().getCountryCurrencies(locVO.getCountryCd()));
                        }
                    }


                    CountryVO cVO = new CountryController().getCountry(oneCountry);
                    ep.setErrorThresholdLocal(cVO.getErrThldLocCurr());
                    ep.setErrorThresholdUsd(cVO.getErrThldUsd());
                    ep.setScansLocalDecs(cVO.getScanLocalDecNbr());
                    ep.setScansUsdDecs(cVO.getScanUsdDecNbr());
                    ep.setQuickStatus(cVO.getQuickApplyFlg() == 1);
                    ep.setGndUsedFlag(cVO.getGndUsedFlag() == 1);
                    ep.setOacUsedFlag(cVO.getOacUsedFlag() == 1);
                    ep.setCollectlaterFlag(cVO.getCollectlaterFlag() == 1);
                    ep.setCodUsedFlag(cVO.getCodUsedFlag() == 1);
                    ep.setFtcUsedFlag(cVO.getFtcUsedFlag() == 1);

                    CountryCurrencyVO ccVO = new AdminBizDelegate().getCountryCurrency(oneCountry);
                    ep.setExchRateMax(ccVO.getExchRateMax());
                    ep.setExchRateMin(ccVO.getExchRateMin());

                    Iterator iterCol = empLocRoles.getEmpXLocationXRoleByEmployeeId(username).iterator();
                    RoleController rc = new RoleController();


                    while (iterCol.hasNext()) {
                        EmpXLocationXRoleVO elr = (EmpXLocationXRoleVO) iterCol.next();
                        RoleVO rVO = rc.getRole(elr.getRoleId());

                        if (!ep.isAdmin() && elr.getRoleId().equals(Constants.ADMINROLE)) {
                            ep.setAdmin(true);
                            ep.setCountryAdmin(false);
                        } else if (!ep.isAdmin() && elr.getRoleId().equals(Constants.COUNTRYADMIN)) {
                            ep.getAdminCountries().add(lc.getLocation(elr.getLocationCd()).getCountryCd());
                        } else if (!ep.isFinController() && elr.getRoleId().equals(Constants.FINCONTROLLER)) {
                            ep.setFinController(true);
                        }
                        ((Map) mapLocRoles.get(elr.getLocationCd())).put(rVO.getRole(), rVO.getRoleId());
                    }//close while roles

                    ep.setCountryCurrencies(mapCountryCurrencies);
                    ep.setLocationsRoles(mapLocRoles);

                } else {
                    Map mapCountryCurrencies = new HashMap();
                    LocationVO lVO = null;
                    Iterator iterLoc = ep.getLocations().iterator();
                    while (iterLoc.hasNext()) {
                        lVO = (LocationVO) iterLoc.next();
                    }

                    ep.setCountryCd(lVO.getCountryCd());
                    ep.setLocationCd(lVO.getLocationCd());

                    //Set flag to know if employee can see the split currency button accoding with the configuration of the location
                    LocationController cntrlLocation = new LocationController();
                    lVO = cntrlLocation.getLocation(lVO.getLocationCd());
                    if (lVO.getDualCurrFlg() == 1)
                        ep.setSplitCurrency(true);
                    else
                        ep.setSplitCurrency(false);

                    ep.setRefreshEnable(lVO.getPrScanRfshFlg() == 1);
                    ep.setRefreshInterval(lVO.getPrScanRfshIntvlNbr());


                    ep.setLocationTimeZone(lVO.getLocationTmZn());

                    CountryVO cVO = new CountryController().getCountry(lVO.getCountryCd());
                    ep.setErrorThresholdLocal(cVO.getErrThldLocCurr());
                    ep.setErrorThresholdUsd(cVO.getErrThldUsd());
                    ep.setScansLocalDecs(cVO.getScanLocalDecNbr());
                    ep.setScansUsdDecs(cVO.getScanUsdDecNbr());
                    ep.setQuickStatus(cVO.getQuickApplyFlg() == 1);
                    ep.setGndUsedFlag(cVO.getGndUsedFlag() == 1);
                    ep.setOacUsedFlag(cVO.getOacUsedFlag() == 1);
                    ep.setCollectlaterFlag(cVO.getCollectlaterFlag() == 1);
                    ep.setCodUsedFlag(cVO.getCodUsedFlag() == 1);
                    ep.setFtcUsedFlag(cVO.getFtcUsedFlag() == 1);
                    
                    CountryCurrencyVO ccVO = new AdminBizDelegate().getCountryCurrency(lVO.getCountryCd());
                    ep.setExchRateMax(ccVO.getExchRateMax());
                    ep.setExchRateMin(ccVO.getExchRateMin());

                    if(ep.getCountryCd() != null)
                        ep.setSupportedCurrencies(getSystemUtilsDaoLocal().getCountryCurrencies(ep.getCountryCd()));
                    else
                        ep.setSupportedCurrencies(new ArrayList());

                    Iterator iterCol = empLocRoles.getEmpXLocationXRoleByEmployeeId(username).iterator();
                    RoleController rc = new RoleController();
                    Map mapLocRoles = new HashMap();
                    while (iterCol.hasNext()) {
                        EmpXLocationXRoleVO elr = (EmpXLocationXRoleVO) iterCol.next();
                        RoleVO rVO = rc.getRole(elr.getRoleId());

                        if (!ep.isAdmin() && elr.getRoleId().equals(Constants.ADMINROLE)) {
                            ep.setAdmin(true);
                            ep.setCountryAdmin(false);
                        } else
                        if (!ep.isAdmin() && !ep.isCountryAdmin() && elr.getRoleId().equals(Constants.COUNTRYADMIN)) {
                            ep.getAdminCountries().add(lc.getLocation(elr.getLocationCd()).getCountryCd());
                            ep.setAdmin(false);
                            ep.setCountryAdmin(true);
                        } else if (!ep.isFinController() && elr.getRoleId().equals(Constants.FINCONTROLLER)) {
                            ep.setFinController(true);
                        }
                        mapLocRoles.put(rVO.getRole(), rVO.getRoleId());
                    }//close while roles

                    Iterator iterCurr = ep.getSupportedCurrencies().iterator();
                    while (iterCurr.hasNext()) {
                        SupportedCurrencyVO sc = (SupportedCurrencyVO) iterCurr.next();
                        if (sc.isDefaultCurrency()) {
                            ep.setDefaultCurrency(sc.getCurrencyCode());
                            break;
                        }
                    }//close while currencies
                    mapCountryCurrencies.put(lVO.getCountryCd(), ep.getSupportedCurrencies());
                    ep.setEmployeeRole(mapLocRoles);
                    ep.setCountryCurrencies(mapCountryCurrencies);
                    ep.setLocationsRoles(mapLocRoles);
                }//close if locations > 1

                if (!ep.isAdmin()) {
                    LocationController locCtrl = new LocationController();
                    ep.setLocations(locCtrl.getAllParentLocations(username));
                }

            }//close if Result < 1

            if (ep.isAdmin()) {
                LocationController locCtrl = new LocationController();
                ep.setLocations(locCtrl.getAllLocations());
            }

            results.add(new Integer(loginResult));
            results.add(ep);
            return results;

        } catch (Exception e) {
            String errorMsg = e.getClass().getName() + " occurred in login() method from SystemUtilsBean class";
            throw new FacadeException(errorMsg, e);
        }
    }

    public java.util.Collection login(java.lang.String username) throws FacadeException {
        try {

            ArrayList results = new ArrayList();
            EmployeeProfile ep = new EmployeeProfile();
            int loginResult = getSystemUtilsDaoLocal().login(username);
            LocationController lc = new LocationController();

            if (loginResult < 1) {

                ep = new EmployeeProfile();
                ep.setEmployeeId(username);

                EmpXLocationXRoleController empLocRoles = new EmpXLocationXRoleController();
                Collection checkLocRoles = empLocRoles.getEmpXLocationXRoleByEmployeeId(username);

                EmployeeController empCtrl = new EmployeeController();
                EmployeeVO empVO = empCtrl.getEmployee(username);
                ep.setEmployeeName(empVO.getEmployeeNm());
                ep.setDefaultDetailPage(empVO.getDefaultPage());
                ep.setLocations(empCtrl.getLocations(username));
                ep.setLockedFlag("1".equals(empVO.getLocked()));

                if (checkLocRoles.size() == 0) {
                    return results;
                } else if (ep.getLocations().size() > 1) {
                    Iterator iterLoc = ep.getLocations().iterator();

                    Map mapLocRoles = new HashMap();
                    Map mapCountryCurrencies = new HashMap();
                    String oneCountry = null;

                    while (iterLoc.hasNext()) {
                        LocationVO locVO = (LocationVO) iterLoc.next();
                        oneCountry = locVO.getCountryCd();

                        mapLocRoles.put(locVO.getLocationCd(), new java.util.HashMap());
                        if (!mapCountryCurrencies.containsKey(locVO.getCountryCd())) {
                            mapCountryCurrencies.put(locVO.getCountryCd(), getSystemUtilsDaoLocal().getCountryCurrencies(locVO.getCountryCd()));
                        }
                    }


                    CountryVO cVO = new CountryController().getCountry(oneCountry);
                    ep.setErrorThresholdLocal(cVO.getErrThldLocCurr());
                    ep.setErrorThresholdUsd(cVO.getErrThldUsd());
                    ep.setScansLocalDecs(cVO.getScanLocalDecNbr());
                    ep.setScansUsdDecs(cVO.getScanUsdDecNbr());
                    ep.setQuickStatus(cVO.getQuickApplyFlg() == 1);
                    ep.setGndUsedFlag(cVO.getGndUsedFlag() == 1);
                    ep.setOacUsedFlag(cVO.getOacUsedFlag() == 1);
                    ep.setCollectlaterFlag(cVO.getCollectlaterFlag() == 1);
                    ep.setCodUsedFlag(cVO.getCodUsedFlag() == 1);
                    ep.setFtcUsedFlag(cVO.getFtcUsedFlag() == 1);

                    CountryCurrencyVO ccVO = new AdminBizDelegate().getCountryCurrency(oneCountry);
                    ep.setExchRateMax(ccVO.getExchRateMax());
                    ep.setExchRateMin(ccVO.getExchRateMin());

                    Iterator iterCol = empLocRoles.getEmpXLocationXRoleByEmployeeId(username).iterator();
                    RoleController rc = new RoleController();


                    while (iterCol.hasNext()) {
                        EmpXLocationXRoleVO elr = (EmpXLocationXRoleVO) iterCol.next();
                        RoleVO rVO = rc.getRole(elr.getRoleId());

                        if (!ep.isAdmin() && elr.getRoleId().equals(Constants.ADMINROLE)) {
                            ep.setAdmin(true);
                            ep.setCountryAdmin(false);
                        } else if (!ep.isAdmin() && elr.getRoleId().equals(Constants.COUNTRYADMIN)) {
                            ep.getAdminCountries().add(lc.getLocation(elr.getLocationCd()).getCountryCd());
                        } else if (!ep.isFinController() && elr.getRoleId().equals(Constants.FINCONTROLLER)) {
                            ep.setFinController(true);
                        }
                        ((Map) mapLocRoles.get(elr.getLocationCd())).put(rVO.getRole(), rVO.getRoleId());
                    }//close while roles

                    ep.setCountryCurrencies(mapCountryCurrencies);
                    ep.setLocationsRoles(mapLocRoles);

                } else {
                    Map mapCountryCurrencies = new HashMap();
                    LocationVO lVO = null;
                    Iterator iterLoc = ep.getLocations().iterator();
                    while (iterLoc.hasNext()) {
                        lVO = (LocationVO) iterLoc.next();
                    }

                    ep.setCountryCd(lVO.getCountryCd());
                    ep.setLocationCd(lVO.getLocationCd());

                    //Set flag to know if employee can see the split currency button accoding with the configuration of the location
                    LocationController cntrlLocation = new LocationController();
                    lVO = cntrlLocation.getLocation(lVO.getLocationCd());
                    if (lVO.getDualCurrFlg() == 1)
                        ep.setSplitCurrency(true);
                    else
                        ep.setSplitCurrency(false);

                    ep.setRefreshEnable(lVO.getPrScanRfshFlg() == 1);
                    ep.setRefreshInterval(lVO.getPrScanRfshIntvlNbr());


                    ep.setLocationTimeZone(lVO.getLocationTmZn());

                    CountryVO cVO = new CountryController().getCountry(lVO.getCountryCd());
                    ep.setErrorThresholdLocal(cVO.getErrThldLocCurr());
                    ep.setErrorThresholdUsd(cVO.getErrThldUsd());
                    ep.setScansLocalDecs(cVO.getScanLocalDecNbr());
                    ep.setScansUsdDecs(cVO.getScanUsdDecNbr());
                    ep.setQuickStatus(cVO.getQuickApplyFlg() == 1);
                    ep.setGndUsedFlag(cVO.getGndUsedFlag() == 1);
                    ep.setOacUsedFlag(cVO.getOacUsedFlag() == 1);
                    ep.setCollectlaterFlag(cVO.getCollectlaterFlag() == 1);
                    ep.setCodUsedFlag(cVO.getCodUsedFlag() == 1);
                    ep.setFtcUsedFlag(cVO.getFtcUsedFlag() == 1);
                    
                    CountryCurrencyVO ccVO = new AdminBizDelegate().getCountryCurrency(lVO.getCountryCd());
                    ep.setExchRateMax(ccVO.getExchRateMax());
                    ep.setExchRateMin(ccVO.getExchRateMin());

                    if(ep.getCountryCd() != null)
                        ep.setSupportedCurrencies(getSystemUtilsDaoLocal().getCountryCurrencies(ep.getCountryCd()));
                    else
                        ep.setSupportedCurrencies(new ArrayList());

                    Iterator iterCol = empLocRoles.getEmpXLocationXRoleByEmployeeId(username).iterator();
                    RoleController rc = new RoleController();
                    Map mapLocRoles = new HashMap();
                    while (iterCol.hasNext()) {
                        EmpXLocationXRoleVO elr = (EmpXLocationXRoleVO) iterCol.next();
                        RoleVO rVO = rc.getRole(elr.getRoleId());

                        if (!ep.isAdmin() && elr.getRoleId().equals(Constants.ADMINROLE)) {
                            ep.setAdmin(true);
                            ep.setCountryAdmin(false);
                        } else
                        if (!ep.isAdmin() && !ep.isCountryAdmin() && elr.getRoleId().equals(Constants.COUNTRYADMIN)) {
                            ep.getAdminCountries().add(lc.getLocation(elr.getLocationCd()).getCountryCd());
                            ep.setAdmin(false);
                            ep.setCountryAdmin(true);
                        } else if (!ep.isFinController() && elr.getRoleId().equals(Constants.FINCONTROLLER)) {
                            ep.setFinController(true);
                        }
                        mapLocRoles.put(rVO.getRole(), rVO.getRoleId());
                    }//close while roles

                    Iterator iterCurr = ep.getSupportedCurrencies().iterator();
                    while (iterCurr.hasNext()) {
                        SupportedCurrencyVO sc = (SupportedCurrencyVO) iterCurr.next();
                        if (sc.isDefaultCurrency()) {
                            ep.setDefaultCurrency(sc.getCurrencyCode());
                            break;
                        }
                    }//close while currencies
                    mapCountryCurrencies.put(lVO.getCountryCd(), ep.getSupportedCurrencies());
                    ep.setEmployeeRole(mapLocRoles);
                    ep.setCountryCurrencies(mapCountryCurrencies);
                    ep.setLocationsRoles(mapLocRoles);
                }//close if locations > 1

                if (!ep.isAdmin()) {
                    LocationController locCtrl = new LocationController();
                    ep.setLocations(locCtrl.getAllParentLocations(username));
                }

            }//close if Result < 1

            if (ep.isAdmin()) {
                LocationController locCtrl = new LocationController();
                //to local work with the application
//                ep.setLocations(locCtrl.getAllLocations());
                ep.setLocations(locCtrl.getAllParentLocations(username));
            }

            results.add(new Integer(loginResult));
            results.add(ep);
            return results;

        } catch (Exception e) {
            String errorMsg = e.getClass().getName() + " occurred in login() method from SystemUtilsBean class";
            throw new FacadeException(errorMsg, e);
        }
    }


    private SystemUtilsDaoLocal getSystemUtilsDaoLocal() throws ServiceLocatorException, CreateException {
        SystemUtilsDaoLocalHome daoHome = (SystemUtilsDaoLocalHome) ServiceLocator.getInstance().getEJBLocalHome(Constants.SystemUtilsDaoEJB_Local);
        SystemUtilsDaoLocal dao = daoHome.create();
        return dao;
    }

    public EmployeeVO findFedExEmployee(java.lang.String empNbr) throws FacadeException {
        EmployeeVO emp = null;
        String ldapEmpNbr = null;

        try { //eliminating leading zeros.
            ldapEmpNbr = new Long(empNbr).toString();
        } catch (Exception e) {
            ldapEmpNbr = empNbr;
        }

        try {
            Iterator iterEmp = findUsers(ldapEmpNbr).iterator();
            if (iterEmp.hasNext()) {
                emp = new EmployeeVO();
                FedExEmployee fe = (FedExEmployee) iterEmp.next();
                emp.setEmployeeId(empNbr);
                emp.setEmployeeNm((String) fe.get(FedExEmployee.FIRST_NAME) + " " + (String) fe.get(FedExEmployee.LAST_NAME));
                emp.setEmail((String) fe.get(FedExEmployee.MAIL));
            }
        } catch (Exception e) {
            String errorMsg = e.getClass().getName() + " occurred in findFedExEmployee() method from SystemUtilsBean class";
            throw new FacadeException(errorMsg, e);
        }
        return emp;
    }

    public Collection findUsers(String empNbr) throws FacadeException {
        ArrayList employees = new ArrayList();
        DirContext ctx = null;
        try {
            Hashtable env = new Hashtable(11);
            env.put(Context.INITIAL_CONTEXT_FACTORY, Constants.LDAPInitialContextFactory);
            env.put(Context.PROVIDER_URL, Constants.LDAPProvider);
            ctx = new InitialDirContext(env);

            NamingEnumeration it = ctx.search("ou=people", "uid=" + empNbr, null);
            while (it.hasMore()) {
                SearchResult sr = (SearchResult) it.next();
                if (sr != null) {
                    Attributes allAttributes = sr.getAttributes();
                    employees.add(createUser(allAttributes));
                }
            }
        } catch (Exception e) {
            String errorMsg = e.getClass().getName() + " occurred in findUser() method from SystemUtilsBean class";
            throw new FacadeException(errorMsg, e);
        } finally {
            try {
                if (ctx != null) {
                    ctx.close();
                }
            } catch (NamingException ne) {
            }
        }
        return employees;
    }

    private FedExEmployee createUser(Attributes allAttributes) throws NamingException {
        FedExEmployee emp = new FedExEmployee();

        Attribute at = allAttributes.get(FedExEmployee.FIRST_NAME);
        emp.put(FedExEmployee.FIRST_NAME, (at != null ? at.get() : ""));

        at = allAttributes.get(FedExEmployee.LAST_NAME);
        emp.put(FedExEmployee.LAST_NAME, (at != null ? at.get() : ""));

        at = allAttributes.get(FedExEmployee.COUNTRY_CODE);
        emp.put(FedExEmployee.COUNTRY_CODE, (at != null ? at.get() : ""));

        at = allAttributes.get(FedExEmployee.PAGER);
        emp.put(FedExEmployee.PAGER, (at != null ? at.get() : ""));

        at = allAttributes.get(FedExEmployee.MAIL);
        emp.put(FedExEmployee.MAIL, (at != null ? at.get() : ""));

        at = allAttributes.get(FedExEmployee.EMPLOYEE_NUMBER);
        emp.put(FedExEmployee.EMPLOYEE_NUMBER, (at != null ? at.get() : ""));

        at = allAttributes.get(FedExEmployee.COMAT_STATION_ID);
        emp.put(FedExEmployee.COMAT_STATION_ID, (at != null ? at.get() : ""));

        at = allAttributes.get(FedExEmployee.DEPARTMENT_NUMBER);
        emp.put(FedExEmployee.DEPARTMENT_NUMBER, (at != null ? at.get() : ""));

        at = allAttributes.get(FedExEmployee.COST_CENTER);
        emp.put(FedExEmployee.COST_CENTER, (at != null ? at.get() : ""));

        at = allAttributes.get(FedExEmployee.ADDRESS);
        emp.put(FedExEmployee.ADDRESS, (at != null ? at.get() : ""));

        at = allAttributes.get(FedExEmployee.STATE);
        emp.put(FedExEmployee.STATE, (at != null ? at.get() : ""));

        at = allAttributes.get(FedExEmployee.PHONE);
        emp.put(FedExEmployee.PHONE, (at != null ? at.get() : ""));

        at = allAttributes.get(FedExEmployee.MAIL_ALTERNATE);
        emp.put(FedExEmployee.MAIL_ALTERNATE, (at != null ? at.get() : ""));

        at = allAttributes.get(FedExEmployee.FAX);
        emp.put(FedExEmployee.FAX, (at != null ? at.get() : ""));

        at = allAttributes.get(FedExEmployee.STREET);
        emp.put(FedExEmployee.STREET, (at != null ? at.get() : ""));

        at = allAttributes.get(FedExEmployee.INTERNATIONAL_COUNTRY);
        emp.put(FedExEmployee.INTERNATIONAL_COUNTRY, (at != null ? at.get() : ""));

        at = allAttributes.get(FedExEmployee.TITLE);
        emp.put(FedExEmployee.TITLE, (at != null ? at.get() : ""));

        at = allAttributes.get(FedExEmployee.DEPARTMENT_NAME);
        emp.put(FedExEmployee.DEPARTMENT_NAME, (at != null ? at.get() : ""));

        at = allAttributes.get(FedExEmployee.SUITE);
        emp.put(FedExEmployee.SUITE, (at != null ? at.get() : ""));

        at = allAttributes.get(FedExEmployee.MANAGER);
        emp.put(FedExEmployee.MANAGER, (at != null ? at.get() : ""));

        at = allAttributes.get(FedExEmployee.PERSONAL_REP);
        emp.put(FedExEmployee.PERSONAL_REP, (at != null ? at.get() : ""));

        at = allAttributes.get(FedExEmployee.NICKNAME);
        emp.put(FedExEmployee.NICKNAME, (at != null ? at.get() : ""));

        at = allAttributes.get(FedExEmployee.COMAT);
        emp.put(FedExEmployee.COMAT, (at != null ? at.get() : ""));

        return emp;
    }

    public Collection getCountryCurrencies(String countryCd) throws FacadeException {
        try {
            return getSystemUtilsDaoLocal().getCountryCurrencies(countryCd);
        } catch (Exception e) {
            String errorMsg = e.getClass().getName() + " occurred in getCountryCurrencies(String countryCd) method from SystemUtilsBean class";
            throw new FacadeException(errorMsg, e);
        }
    }

    public Properties getProperties(String category) throws FacadeException {
        try {
            return getSystemUtilsDaoLocal().getProperties(category);
        } catch (Exception e) {
            String errorMsg = e.getClass().getName() + " occurred in getProperties(String category) method from SystemUtilsBean class";
            throw new FacadeException(errorMsg, e);
        }
    }

    public String getCheckDecodeJS(String countryCd) throws FacadeException {
        try {
            return getSystemUtilsDaoLocal().getCheckDecodeJS(countryCd);
        } catch (Exception e) {
            String errorMsg = e.getClass().getName() + " occurred in getCheckDecodeJS(String category) method from SystemUtilsBean class";
            throw new FacadeException(errorMsg, e);
        }
    }

    public void runPurgeCosmosScans() throws FacadeException {
        try {
            getSystemUtilsDaoLocal().runPurgeCosmosScans();
        } catch (Exception e) {
            String errorMsg = e.getClass().getName() + " occurred in runPurgeCosmosScans(String purgingDays) method from SystemUtilsBean class";
            throw new FacadeException(errorMsg, e);
        }
    }
    
    //Miscellaneous enhancements
    public List getEmailCertificationAddresses(int role_id_nbr) throws FacadeException {
        try {
        	return getSystemUtilsDaoLocal().getEmailCertificationAddresses(role_id_nbr);
        } catch (Exception e) {
            String errorMsg = e.getClass().getName() + " occurred in getEmailCertificationAddresses() method from SystemUtilsBean class";
            throw new FacadeException(errorMsg, e);
        }
    }
    
    /**
     * Method to get URLS and ROLES for security purposes - INFOSEC compliant
     * @throws FacadeException
     */
    public HashMap getUrlsAndRoles() throws FacadeException {
        try {
            return getSystemUtilsDaoLocal().getUrlsAndRoles();
        } catch (Exception e) {
            String errorMsg = e.getClass().getName() + " occurred in getUrlsAndRoles() method from SystemUtilsBean class";
            throw new FacadeException(errorMsg, e);
        }
    }
}