package com.fedex.lacitd.cashcontrol.datatier.dao;

import com.fedex.lacitd.cashcontrol.biztier.common.*;
import com.fedex.lacitd.cashcontrol.common.Utils;
import com.fedex.lacitd.cashcontrol.datatier.exception.DAOException;
import com.fedex.lacitd.cashcontrol.datatier.valueobject.CountryVO;
import com.fedex.lacitd.cashcontrol.datatier.valueobject.EmployeeVO;
import com.fedex.lacitd.cashcontrol.datatier.valueobject.RoleVO;

import javax.naming.InitialContext;
import javax.naming.Context;
import javax.sql.DataSource;
import java.sql.*;
import java.sql.Date;
import java.text.SimpleDateFormat;
import java.util.*;

import java.text.DateFormat; 
 
import java.text.ParseException; 
 

//import java.util.Date;


/**
 * Created Apr 23, 2003 5:01:28 PM
 * Code generated by the Forte For Java EJB Builder
 *
 * @author Arturo Gonzalez
 */


public class AdminDaoBean implements javax.ejb.SessionBean {
    private javax.ejb.SessionContext context;

    /**
     * @see javax.ejb.SessionBean#setSessionContext(javax.ejb.SessionContext)
     */
    public void setSessionContext(javax.ejb.SessionContext aContext) {
        context = aContext;
    }


    /**
     * startup
     *
     * @see javax.ejb.SessionBean#ejbActivate()
     */
    public void ejbActivate() {

    }


    /**
     * @see javax.ejb.SessionBean#ejbPassivate()
     */
    public void ejbPassivate() {
    }


    /**
     * @see javax.ejb.SessionBean#ejbRemove()
     */
    public void ejbRemove() {

    }


    /**
     * See section 7.10.3 of the EJB 2.0 specification
     */
    public void ejbCreate() {

    }

    /**
     * This method gets a Collection with information about users profiles and send it
     * to the struts action to show users profiles to the Admin employee
     *
     * @param countryCD
     * @return Collection usersProfiles
     * @throws DAOException
     */
    public Collection getUsersProfilesToAdmin(String countryCD, String locCd) throws DAOException {
        ArrayList usersProfiles = new ArrayList();
        CallableStatement cs = null;
        Connection conn = null;
        ResultSet rs = null;

        try {
            Hashtable prop=new Hashtable();
            /*prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);
            prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);
            */
            InitialContext ic = new InitialContext();

            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);

            conn = ds.getConnection();

            cs = conn.prepareCall("BEGIN SP_GET_USER_LOCATION_ROL(?,?,?); END;");

            cs.setString(1, countryCD);
            cs.setString(2, locCd);
            cs.registerOutParameter(3, oracle.jdbc.OracleTypes.CURSOR);

            cs.execute();

            rs = (ResultSet) cs.getObject(3);

            usersProfiles = (ArrayList) this.fillUserProfileToAdmin(rs);

            return usersProfiles;

        } catch (Exception e) {
            Constants.logger.debug(Utils.stackTraceToString(e));
            throw new DAOException(e.getClass().getName() + " has ocurred in the getUsersProfilesToAdmin() method of the AdminDaoBean class", e);
        } finally {
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }
            cs = null;
            conn = null;
        }
    }//CLose the method


    /**
     * This method fill an object type UserProfileToAdmin and return it
     *
     * @param rs ResultSet
     * @return UserProfileToAdmin
     * @throws SQLException
     */
    private Collection fillUserProfileToAdmin(ResultSet rs) throws SQLException {
        UserProfileToAdmin uspa = null;
        HashMap locationRoles = new HashMap();
        ArrayList locations = new ArrayList();
        ArrayList usersProfiles = new ArrayList();
        ArrayList roles = new ArrayList();
        String countryCodePk = "";
        String employeeCodePk = "";
        String employeePrevious = "";
        String employeeName = "";
        String locationCD = "";
        String locationPrevious = "";
        Integer rolID = new Integer(0);
        Integer rolPrevious = new Integer(0);
        String rolName = null;
        RoleVO rol = null;
        boolean addRol = false;
        int i = 1;
        try {
            while (rs.next()) {
                countryCodePk = rs.getString(1);
                employeeCodePk = rs.getString(2);
                employeeName = rs.getString(3).trim();

                locationCD = rs.getString(4);
                rolID = new Integer(rs.getInt(5));
                rolName = rs.getString(6);
                rol = new RoleVO();

                /*    Constants.logger.debug("\n -++++++ Nombre del Empleado +++++: " +employeeName);
                      Constants.logger.debug("\n -++++++ File numero         +++++: " +rs.getRow());

                      //If locations are not equal then add location to the ArrayList locations
                    Constants.logger.debug("\n employeeCodePk : " + employeeCodePk  + " = employeePrevious: " + employeePrevious);
                    Constants.logger.debug("\n LocationCD : " + locationCD  + " = locationPrevious: " + locationPrevious);
                    Constants.logger.debug("\n rolID : " + rolID  + " = rolPrevious: " + rolPrevious);
                  */
                if (i == 1)//If is the first record in processing
                {
                    uspa = new UserProfileToAdmin();
                    uspa.setCountryCodePk(countryCodePk);
                    uspa.setEmployeeCodePk(employeeCodePk);
                    uspa.setEmployeeName(employeeName.trim());
                    //save location
                    locations.add(locationCD);
                    //and save role
                    rol.setRoleId(rolID);
                    rol.setRole(rolName);
                    roles.add(rol);
                } else {
                    if (employeeCodePk.equals(employeePrevious)) {
                        if (locationCD.equals(locationPrevious)) {
                            if (!rolID.equals(rolPrevious)) {
                                rol.setRoleId(rolID);
                                rol.setRole(rolName);
                                roles.add(rol);
                            }
                        } else {
                            locationRoles.put(locationPrevious, roles);
                            roles = new ArrayList();
                            rol.setRoleId(rolID);
                            rol.setRole(rolName);
                            roles.add(rol);
                            locations.add(locationCD);
                        }
                    } else {
                        locationRoles.put(locationPrevious, roles);
                        //Add locations to the profile
                        uspa.setLocations(locations);
                        uspa.setLocationRoles(locationRoles);
                        //Add profile to the ArrayList of profiles
                        usersProfiles.add(uspa);

                        locations = new ArrayList();
                        roles = new ArrayList();
                        locationRoles = new HashMap();

                        rol.setRoleId(rolID);
                        rol.setRole(rolName);
                        roles.add(rol);

                        //Always add location when empoyee change
                        locations.add(locationCD);
                        //New Profile, change employee
                        uspa = new UserProfileToAdmin();
                        uspa.setCountryCodePk(countryCodePk);
                        uspa.setEmployeeCodePk(employeeCodePk);
                        uspa.setEmployeeName(employeeName.trim());
                    }
                }

                i++;

                //set the employee code previous
                employeePrevious = employeeCodePk;
                //set the location code previous
                locationPrevious = locationCD;
                //set the roleId previous
                rolPrevious = rolID;
                addRol = false;
            }//Close While Sentence

            //Add the last row to the ArrayList of Profiles
            if (i > 1)//if i>1 then we have employee with locations and roles in the database
            {//Add locations to the profile
                uspa.setLocations(locations);
                //Add roles to the profile
                locationRoles.put(locationPrevious, roles);
                uspa.setLocationRoles(locationRoles);
                usersProfiles.add(uspa);
            } else {
                uspa = new UserProfileToAdmin();
            }

        } catch (SQLException sqle) {
            throw sqle;
        }

        return usersProfiles;
    }// close the method fillUserProfileToAdmin


    /**
     * This method is used to insert a user from the data base
     *
     * @param employee
     * @param empLocRole
     * @throws DAOException
     */
    public void addUser(com.fedex.lacitd.cashcontrol.datatier.valueobject.EmployeeVO employee, com.fedex.lacitd.cashcontrol.datatier.valueobject.EmpXLocationXRoleVO empLocRole) throws DAOException {
        CallableStatement cs = null;
        Connection conn = null;

        try {
            /*Hashtable prop=new Hashtable();
            prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);
            prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);
            */
            InitialContext ic = new InitialContext();
            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);

            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_ADMIN_INSERT_USER(?,?,?,?,?,?,?,?); END;");
            cs.setString(1, employee.getEmployeeId());
            cs.setString(2, employee.getEmployeeNm());
            cs.setString(3, employee.getPassword());
            cs.setString(4, employee.getEmail());
            cs.setString(5, employee.getDefaultPage());
            cs.setString(6, empLocRole.getLocationCd());
            cs.setInt(7, empLocRole.getRoleId().intValue());
            cs.setInt(8, employee.getExtlCustFlg());
            cs.execute();
        } catch (Exception e) {
            Constants.logger.debug(Utils.stackTraceToString(e));
            throw new DAOException(e.getClass().getName() + " has ocurred in the addUSer() method of the AdminDaoBean class", e);
        } finally {
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            cs = null;
            conn = null;
        }
    }//CLose the method addUser

    /**
     * This method get a coded password from the string password parameter
     *
     * @param password
     * @throws DAOException
     */
    public String getCodedPassword(String employeeId, String password) throws DAOException {
        CallableStatement cs = null;
        Connection conn = null;

        try {
            /*Hashtable prop=new Hashtable();
            prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);
            prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);
           */
            InitialContext ic = new InitialContext();
            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN ?:=FX_DIGEST(?, ?); END;");
            cs.registerOutParameter(1, oracle.jdbc.OracleTypes.CHAR);
            cs.setString(2, employeeId);
            cs.setString(3, password);
            cs.execute();
            return cs.getString(1);
        } catch (Exception e) {
            Constants.logger.debug(Utils.stackTraceToString(e));
            throw new DAOException(e.getClass().getName() + " has ocurred in the getCodedPassword() method of the AdminDaoBean class", e);
        } finally {
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            cs = null;
            conn = null;
        }
    }// Close getCodedPassword(String password)


    /**
     * This method gets a Collection with information about users profiles by country and employee and send it
     * to the struts action to check if exist users profiles to the current employee
     *
     * @param countryCD
     * @param userId
     * @return Collection usersProfiles
     * @throws DAOException
     */
    public Collection getUsersProfilesByCountryEmployee(String countryCD, String userId) throws DAOException {
        ArrayList usersProfiles = new ArrayList();
        CallableStatement cs = null;
        Connection conn = null;
        ResultSet rs = null;

        try {
            /*Hashtable prop=new Hashtable();
            prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);
            prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);
              */
            InitialContext ic = new InitialContext();
            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);

            conn = ds.getConnection();

            cs = conn.prepareCall("BEGIN SP_GET_USER_PROFILE_BY_CON_EMP(?,?,?); END;");

            cs.setString(1, countryCD);
            cs.setString(2, userId);
            cs.registerOutParameter(3, oracle.jdbc.OracleTypes.CURSOR);

            cs.execute();

            rs = (ResultSet) cs.getObject(3);

            usersProfiles = (ArrayList) this.fillUserProfiles(rs);

            return usersProfiles;

        } catch (Exception e) {
            Constants.logger.debug(Utils.stackTraceToString(e));
            throw new DAOException(e.getClass().getName() + " has ocurred in the getUsersProfilesByCountryEmployee() method of the AdminDaoBean class", e);
        } finally {
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }
            rs = null;
            cs = null;
            conn = null;
        }
    }//CLose the method getUsersProfilesByCountryEmployee


    private Collection fillUserProfiles(ResultSet rs) throws SQLException {
        EmployeeProfile emprof = null;
        ArrayList usersProfiles = new ArrayList();

        try {
            String countryCodePk = null;
            String employeeCodePk = null;
            String employeeName = null;
            String locationCD = null;

            while (rs.next()) {
                countryCodePk = rs.getString(1);
                employeeCodePk = rs.getString(2);
                employeeName = rs.getString(3).trim();
                locationCD = rs.getString(4);

                emprof = new EmployeeProfile();
                emprof.setCountryCd(countryCodePk);
                emprof.setEmployeeId(employeeCodePk);
                emprof.setEmployeeName(employeeName);
                emprof.setLocationCd(locationCD);

                usersProfiles.add(emprof);

            }//Close While Sentence
        } catch (SQLException sqle) {
            throw sqle;
        }

        return usersProfiles;
    }
//  Close fillUserProfiles method

    /**
     * This method make a query to the database and obtain
     * Bank Accoutn by country and/or by location
     *
     * @param country
     * @param location
     * @return Collection with BankAccountLocationVO object in.
     * @throws DAOException
     */
    public Collection getBankAccounts(String country, String location) throws DAOException {
        ArrayList bankAccounts = new ArrayList();
        /*    PreparedStatement ps=null;
            Connection conn=null;
            ResultSet rs=null;
            try{
                InitialContext ctx=new InitialContext();
                DataSource ds= (DataSource)ctx.lookup(Constants.CCSDataSource);
                conn = ds.getConnection();

                //Form the query
                String query = "SELECT bank_id, country_cd, bank_nm, bank_sht_desc," +
                                   "bank_cd, bank_account_cd, account_nbr," +
                                "bank_branch_id, currency_type," +
                                "location_cd, usd_default_acc," +
                                "local_default_acc " +
                                "FROM bank, bank_acc, bank_acc_location, location " +
                                "WHERE (bank.bank_id = bank_acc.bank_id) " +
                                    "AND (bank_acc.bank_account_cd = bank_acc_location.bank_acc_cd) " +
                                    "AND (location.location_cd = bank_acc_location.location_cd) " +
                                    "AND (bank.country_cd = ?) ";

                 if(location == null)
                    query = query + "AND (bank_acc_location.location_cd = ?) ";

                 query=query + "ORDER BY bank.bank_nm ASC ";

                 ps = conn.prepareStatement(query);
                 ps.setString(1, country);
                 if(location == null)
                    ps.setString(2, location);

                 rs = ps.executeQuery();

                 BankAccountLocationVO bacc = null;
                 while(rs.next())
                 {	 bacc=new BankAccountLocationVO();
                      bacc.setLocationCd(rs.getString(1));
                      bacc.setLocalDefaultAccount(rs.getInt(2));
                      bacc.setUsdDefaultAccount(rs.getInt(3));

                     BankVO bank =
                                 new BankVO(bankId,
                                            bankNm,
                                            bankCd,
                                            bankShtDesc,
                                            countryCd);


                        bank_account_cd, account_nbr," +
                     "bank_branch_id, currency_type," +
                     "location_cd, usd_default_acc," +
                     "local_default_acc " +
                     "FROM bank, bank_acc, bank_acc_location, location " +
                     "WHERE (bank.bank_id = bank_acc.bank_id) " +
                         "AND (bank_acc.bank_account_cd = bank_acc_location.bank_acc_cd) " +
                         "AND (LOCATION.location_cd = bank_acc_location.location_cd) " +
                         "AND (bank.country_cd = ?) ";
                 }

            }catch(Exception e){
                throw new DAOException(e.getClass().getName() + " has ocurred in the method getBankAccounts(String country, String location) of the AdminDaoBean class", e);
            }
            */
        return bankAccounts;
    }

    /**
     * Method to get countries availables for a user with Admin Country privilege.
     *
     * @param employeeId
     * @param roleId
     * @return Collection of CountryVO
     * @throws DAOException
     */
    public Collection getCountriesForAdmin(String employeeId, Integer roleId) throws DAOException {
        ArrayList countries = new ArrayList();
        CallableStatement cs = null;
        Connection conn = null;
        ResultSet rs = null;

        try {
            /*Hashtable prop=new Hashtable();
            prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);
            prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);
            */
            InitialContext ic = new InitialContext();
            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);

            conn = ds.getConnection();

            cs = conn.prepareCall("BEGIN SP_GET_COUNTRIES_FOR_ADMIN(?,?,?); END;");

            cs.setString(1, employeeId);
            cs.setInt(2, roleId.intValue());
            cs.registerOutParameter(3, oracle.jdbc.OracleTypes.CURSOR);

            cs.execute();

            rs = (ResultSet) cs.getObject(3);

            CountryVO country = null;
            while (rs.next()) {
                country = new CountryVO();
                country.setCountryCd(rs.getString(1));
                country.setCountryNm(rs.getString(2));
                country.setErrThldLocCurr(rs.getDouble(3));
                country.setErrThldUsd(rs.getDouble(4));
                countries.add(country);
            }

            return countries;

        } catch (Exception e) {
            Constants.logger.debug(Utils.stackTraceToString(e));
            throw new DAOException(e.getClass().getName() + " has ocurred in the getCountriesForAdmin(Integer employeeId, Integer roleId) method of the AdminDaoBean class", e);
        } finally {
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }
            rs = null;
            cs = null;
            conn = null;
        }
    }

    /**
     * This method is used to revoke permissions a list of user by means a calling to a store procedure.
     *
     * @param adminId
     * @throws DAOException
     */
    public void revokeEmployee(List employeeToRevokeList, String adminId) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        try {

            /*Hashtable prop=new Hashtable();
            prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);
            prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);**/

            InitialContext ic = new InitialContext();
            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();

            cs = conn.prepareCall("BEGIN SP_ADMIN_REVOKE_USER(?,?); END;");

            String employeeId = null;
            if (employeeToRevokeList != null) {
                Iterator empIt = employeeToRevokeList.iterator();
                while (empIt.hasNext()) {
                    employeeId = (String) empIt.next();
                    cs.setString(1, employeeId);
                    cs.setString(2, adminId);
                    cs.execute();
                }
            }
        } catch (Exception e) {
            throw new DAOException(e.getClass().getName() + "has ocurred in the revokeEmployee(List employeeToRevokeList) method of the AdminDaoBean class", e);
        } finally {
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }
            cs = null;
            conn = null;
        }
    }

    /**
     * This method is useful to get the country administrators according to a employeeId.
     *
     * @param employeeIds
     * @return Collection of Country Admin Employees
     * @throws DAOException
     */
    public Collection getCountryAdminByEmployeeId(String employeeIds) throws DAOException {
        Collection countryAdmins = new ArrayList();
        Connection conn = null;
        ResultSet res = null;
        PreparedStatement ps = null;

        try {
            /*Hashtable prop=new Hashtable();
            prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);
            prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/

            InitialContext ctx = new InitialContext();
            DataSource ds = (DataSource) ctx.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            res = null;

            String sql = "SELECT DISTINCT E.EMP_ID_NBR, " +
                    "E.EMP_NM, " +
                    "E.EMAIL_DESC " +
                    "FROM EMPLOYEE E, " +
                    "LOCATION L, ROLE R, " +
                    "EMP_X_LOCATION_X_ROLE ELR " +
                    "WHERE   L.CNTRY_CD in (SELECT DISTINCT CNTRY_CD FROM LOCATION l, EMPLOYEE_LOCATION el " +
                    "                         WHERE l.LOC_CD = el.LOC_CD and el.EMP_ID_NBR in (?)) AND " +
                    "        E.EMP_ID_NBR = ELR.EMP_ID_NBR AND " +
                    "        L.LOC_CD = ELR.LOC_CD AND " +
                    "        R.ROLE_ID_NBR = ELR.ROLE_ID_NBR AND " +
                    "        ELR.ROLE_ID_NBR = ?";

            ps = conn.prepareStatement(sql);
            ps.setString(1, employeeIds);
            ps.setInt(2, Constants.COUNTRYADMIN.intValue());

            res = ps.executeQuery();

            //Iterate to get the country admin employees
            EmployeeVO employee = null;

            while (res.next()) {
                employee = new EmployeeVO();
                employee.setEmployeeId(res.getString(1));
                employee.setEmployeeNm(res.getString(2));
                employee.setEmail(res.getString(3));
                countryAdmins.add(employee);
            }
        } catch (Exception e) {
            throw new DAOException(e.getClass().getName() + " has ocurred in the getCountryAdminByEmployeeId(String employeeId) method of the AdminDaoBean class", e);
        } finally {
            try {
                if (res != null) res.close();
            } catch (Exception e) {
            }
            try {
                if (ps != null) ps.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }
        }
        return countryAdmins;
    }

    /**
     * This method get the admin table data from DB accroding to the String sql passed as parameter
     *
     * @param table
     * @return HashMap with keys and data
     * @throws DAOException
     */
    public HashMap getAdminTableByTableName(String table) throws DAOException {
        Connection conn = null;
        ResultSet res = null;
        Statement st = null;
        PreparedStatement ps = null;
        Collection tablesName = new ArrayList();
        Collection columnNameToSelect = new ArrayList();
        Collection columnNameToUpdate = new ArrayList();
        Collection columnNameToFilter = new ArrayList();
        HashMap tableAndColumn = new HashMap();

        String sqlTables = "SELECT DISTINCT TBL_NM FROM TBL_ADMN_CNTL";
        String sqlSelectFlag = "SELECT TBL_NM,COL_NM,LBL_DESC,PRIM_KEY_FLG FROM TBL_ADMN_CNTL WHERE TBL_NM = ? AND SEL_FLG ='1'";
        String sqlUpdateFlag = "SELECT TBL_NM,COL_NM,LBL_DESC,PRIM_KEY_FLG FROM TBL_ADMN_CNTL WHERE TBL_NM = ? AND UPD_FLG ='1'";
        String sqlFilterFlag = "SELECT TBL_NM,COL_NM,LBL_DESC FROM TBL_ADMN_CNTL WHERE TBL_NM = ? AND SRCH_FLG ='1'";

        try {
            /*Hashtable prop=new Hashtable();
            prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);
            prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/

            InitialContext ic = new InitialContext();
            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            st = conn.createStatement();

            if (table != null) {

                //Get MetaData to obtain the name of the columns AVAILABLE to SELECT
                //Constants.logger.debug("\n\n **** SQL to select  : " + sqlSelectFlag);
                String column = null;
                ps = conn.prepareStatement(sqlSelectFlag);
                ps.setString(1, table);
                res = ps.executeQuery();
                while (res.next()) {
                    column = res.getString("COL_NM");
                    columnNameToSelect.add(column);
                    //Add PK to the HashMap
                    if ("1".equals(res.getString("PRIM_KEY_FLG")))
                        tableAndColumn.put("PK", column);
                }
                //Get MetaData to obtain the name of the columns AVAILABLE to UPDATE
                //Constants.logger.debug("\n\n **** SQL to update  : " + sqlUpdateFlag);

                ps = conn.prepareStatement(sqlUpdateFlag);
                ps.setString(1, table);
                res = ps.executeQuery();
                while (res.next()) {
                    columnNameToUpdate.add(res.getString("COL_NM"));
                }
                //Get MetaData to obtain the name of the columns AVAILABLE to FILTER
                //Constants.logger.debug("\n\n **** SQL to filter  : " + sqlFilterFlag);

                ps = conn.prepareStatement(sqlFilterFlag);
                ps.setString(1, table);
                res = ps.executeQuery();
                while (res.next()) {
                    columnNameToFilter.add(res.getString("COL_NM"));
                }
                //
                //Now get Data from DB with the information of columns
                //Get MetaData to obtain the name of the columns AVAILABLE to SELECT
                //res.close();

                ps = conn.prepareStatement(sqlTables);
                res = ps.executeQuery();
                while (res.next()) {
                    tablesName.add(res.getString(1)); //Table Name
                }

                tableAndColumn.put("TABLE_NAMES", tablesName);
                tableAndColumn.put("SELECT", columnNameToSelect);
                tableAndColumn.put("UPDATE", columnNameToUpdate);
                tableAndColumn.put("FILTER", columnNameToFilter);
            } else {
                //Now get Data from DB with the information of columns
                //Get MetaData to obtain the name of the columns AVAILABLE to SELECT
                res = st.executeQuery(sqlTables);
                while (res.next()) {
                    tablesName.add(res.getString(1)); //Table Name
                }
                tableAndColumn.put("TABLE_NAMES", tablesName);
            }//Close if of table!=null
        } catch (Exception e) {
            throw new DAOException(e.getClass().getName() + " has ocurred in the getAdminTableByTableName(String table) method of the AdminDaoBean class", e);
        } finally {
            try {
                if (res != null) res.close();
            } catch (Exception e) {
            }
            try {
                if (st != null) st.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

        }
        return tableAndColumn;
    }

    /**
     * This method get data for Table Admin selected, it receive a String sql to execute
     *
     * @param sql
     * @param tableName
     * @param pageNumber
     * @param sqlCount
     * @return
     * @throws DAOException
     */
    public Collection getDataForTableAdmin(String sql, String tableName, int pageNumber, String sqlCount) throws DAOException {
        Collection data = new ArrayList();
        Collection rows = new ArrayList();
        Collection pkArray = new ArrayList();
        //Iterator for pk fields
        Iterator itPk = null;

        Connection conn = null;
        ResultSet resPK = null;
        ResultSet res = null;

        Statement st = null;
        PreparedStatement ps = null;
        String dateString = "";

        try {
            /*Hashtable prop=new Hashtable();
            prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);
            prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/

            InitialContext ic = new InitialContext();
            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            st = conn.createStatement();

            System.out.println("##########################");
            System.out.println(" ds : " + Constants.CCSDataSource);
            System.out.println(" ds : " + ds.toString());
            System.out.println("##########################");

            
            //String sqlGetPK = "SELECT TBL_NM,COL_NM,LBL_DESC FROM TBL_ADMN_CNTL WHERE " + "PRIM_KEY_FLG ='1'" + " AND TBL_NM='" + tableName + "'";

            String sqlGetPK = "SELECT TBL_NM,COL_NM,LBL_DESC FROM TBL_ADMN_CNTL WHERE PRIM_KEY_FLG ='1' AND TBL_NM= ?";
            ps = conn.prepareStatement(sqlGetPK);
            ps.setString(1,tableName);

            //With the table name get name of primary key by mean a sql statement.
            String pkName = null;
            resPK = ps.executeQuery();
            while (resPK.next()) {
                pkName = resPK.getString("COL_NM");
                pkArray.add(pkName);
            }

            //Get total of rows according to the filters added on page
            int rowCount = 0;
            res = st.executeQuery(sqlCount);
            while (res.next()) {
                rowCount = res.getInt(1);
            }

            //Get rows by page value
            int rowsByPage = Constants.ROWSBYPAGEADMIN;
            //Calculate number of pages to show in combo
            int pages = rowCount / rowsByPage;
            if ((rowCount % rowsByPage) > 0) pages++;
            //Check the page number to ensure the range.
            if (pageNumber > pages) pageNumber = pages;
            //Calculate form and to values to do the next query for records asked for
            int from = ((pageNumber - 1) * rowsByPage) + 1;
            int to = pageNumber * rowsByPage;
            if (to > rowCount) to = rowCount;

            //Constants.logger.debug("\n\n ************+++++ SQL to get data =>  " +  sql);

            SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");

            ps = conn.prepareStatement(sql);
            ps.setInt(1, from);
            ps.setInt(2, to);

            //Execute Main Query that come from page
            res.close();
            res = ps.executeQuery();
            ResultSetMetaData meta = res.getMetaData();
            String colName;
            TablesAdminVO tablesAdminVO = null;
            TablesAdminVO colPk = null;

            int colNum = meta.getColumnCount();

            //Check ResultSet to get data from selected table and according to the criterion formed on page
            while (res.next()) {

                for (int i = 1; i <= colNum; i++) {
                    tablesAdminVO = new TablesAdminVO();

                    //Save table and column name
                    colName = meta.getColumnName(i);

                    tablesAdminVO.getTableName();
                    tablesAdminVO.setColumnName(colName);
                    tablesAdminVO.setColumnType(meta.getColumnType(i));

                    //Check if column is the PK fo the table, then add data in the first position of the ArrayList
                    itPk = pkArray.iterator();
                    while (itPk.hasNext()) {
                        pkName = (String) itPk.next();
                        if (colName.equals(pkName)) {
                            tablesAdminVO.setPrimaryKey(true);
                        }
                    }

                    if (meta.getColumnType(i) == Types.DATE) {
                        Date dateDB = res.getDate(i);
                        if (dateDB != null)
                            dateString = formatter.format(dateDB);

                        tablesAdminVO.setColumnValue(dateString);
                    } else {
                        Object obj = res.getObject(i);
                        if (obj != null) {
                            tablesAdminVO.setColumnValue(res.getObject(i).toString());
                        } else
                            tablesAdminVO.setColumnValue("");
                    }
                    if (tablesAdminVO.isPrimaryKey())
                        colPk = tablesAdminVO;
                    else
                        rows.add(tablesAdminVO);
                }
                if (rows.size() > 0)
                    ((ArrayList) rows).add(1, colPk);

                data.add(rows);
                rows = new ArrayList();
            }

            //Add page number at the end of the collection
            data.add(new Integer(pages));
            return data;
        } catch (Exception e) {
            throw new DAOException(e.getClass().getName() + " has ocurred in the getDataForTableAdmin(String sql) method of the AdminDaoBean class", e);
        } finally {
            try {
                if (res != null) res.close();
            } catch (Exception e) {
            }
            try {
                if (resPK != null) resPK.close();
            } catch (Exception e) {
            }
            try {
                if (st != null) st.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }
        }
    }

    /**
     * Method to update a table of Admin Tables
     *
     * @param columnToUpdate
     * @throws DAOException
     */
    public void updateAdminMainTable(Collection columnToUpdate) throws DAOException {
        Connection conn = null;
        ResultSet res = null;
        Statement st = null;
        String sql = "";

        try {
            /*Hashtable prop=new Hashtable();
            prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);
            prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/

            InitialContext ic = new InitialContext();
            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();

            
            String fields = "";
            String tableName = "", pkName = "", pkValue = "";
            int pkType = 0, dataType = 0;
            TablesAdminVO tablesAdminVO = null;
            Iterator colIt = columnToUpdate.iterator();
            while (colIt.hasNext()) {
                tablesAdminVO = (TablesAdminVO) colIt.next();
                if (tableName.length() == 0)
                    tableName = tablesAdminVO.getTableName();
                if (tablesAdminVO.isPrimaryKey()) {
                    //Make changes on Pk
                    pkName = tablesAdminVO.getColumnName();
                    pkType = tablesAdminVO.getColumnType();
                    pkValue = tablesAdminVO.getColumnValue();
                    if (Types.VARCHAR == pkType)
                        pkValue = "'" + pkValue + "'";
                } else {   //Form string with filds to update
                    String columnName = tablesAdminVO.getColumnName();
                    String columnValue = tablesAdminVO.getColumnValue();
                    dataType = tablesAdminVO.getColumnType();
                    //Determine data type
                    //Choose what add as the data type of the field
                    switch (dataType) {
                        case Types.VARCHAR:
                            columnValue = "'" + columnValue + "'";
                            break;
                        case Types.CHAR:
                            columnValue = "'" + columnValue + "'";
                            break;                        
                        case Types.TIMESTAMP:
                        	if (columnValue.trim().length() == 0)
                            columnValue = "'" + columnValue + "'";
                        	else
                        	{
                        	columnValue =columnValue.substring(0, 19);
                        	columnValue = "to_date('" + columnValue + "','YYYY-MM-DD HH24:MI:SS')";                                                      
                        	}
                            break;
                        case Types.NUMERIC:
                            if (columnValue.trim().length() == 0)
                                columnValue = "NULL";
                            break;
                    }
                    
                    fields = fields + columnName + " = " + columnValue + ",";
                }
            }

            //Suppress last Character ,
            if (fields.length() > 0)
                fields = fields.substring(0, (fields.length() - 1));
            //Form sql
            sql = "UPDATE " + tableName + " SET " + fields + " WHERE " + pkName + " = '" + pkValue +"'";
            System.out.println("SQL::"+sql);
            st = conn.createStatement();
            //Constants.logger.debug("\n\n esta es la pk => " + pkName);
            //Constants.logger.debug("\n\n SQL for UPDATE ==> " + sql);
            //Execute the update
            st = conn.createStatement();
            st.executeUpdate(sql);
        } catch (Exception e) {
            e.printStackTrace();
            throw new DAOException(e.getClass().getName() + " has ocurred in the updateAdminMainTables(Collection columnToUpdate) method of the AdminDaoBean class (sql=" + sql + "\"", e);
        } finally {
            try {
                if (res != null) res.close();
            } catch (Exception e) {
            }
            try {
                if (st != null) st.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }
        }
    }


    /**
     * Method to get a collectin of column to show in the page to Update data
     *
     * @param primaryKey
     * @param table
     * @return
     * @throws DAOException
     */
    public Collection getRow(String primaryKey, String table) throws DAOException {
        Connection conn = null;
        ResultSet res = null;
        ResultSet resData = null;
        Statement st = null;
        Collection row = new ArrayList();
        PreparedStatement ps = null;
        try {
            /*Hashtable prop=new Hashtable();
            prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);
            prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/

            InitialContext ic = new InitialContext();
            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();

            String sqlToUpdate = "SELECT COL_NM, LBL_DESC, PRIM_KEY_FLG, UPD_FLG " +
                    "FROM TBL_ADMN_CNTL " +
                    "WHERE TBL_NM= ? AND (UPD_FLG ='1' OR SEL_FLG='1') " +
                    "ORDER BY COL_NM";

            st = conn.createStatement();
            ps = conn.prepareStatement(sqlToUpdate);
            ps.setString(1,table);

            res = ps.executeQuery();

            String columnName = "";
            String pkName = "";
            String columns = "";
            TablesAdminVO tablesAdminVO = null;

            while (res.next()) {
                tablesAdminVO = new TablesAdminVO();
                columnName = res.getString("COL_NM");
                columns = columns.concat(columnName) + ","; //concat column names

                tablesAdminVO.setTableName(table);
                tablesAdminVO.setColumnName(columnName);
                tablesAdminVO.setColumnDescription(res.getString("LBL_DESC"));

                if ("1".equals(res.getString("UPD_FLG")))//Obtain update flag of columns
                    tablesAdminVO.setUpdate(true);

                if ("1".equals(res.getString("PRIM_KEY_FLG")))//Obtain update flag of columns
                {
                    pkName = columnName;
                    tablesAdminVO.setPrimaryKey(true);
                }
                row.add(tablesAdminVO);//Add object to the collection
            }

            //Generate the consult of data to put in the object.
            //Form sql to get data
            columns = columns.substring(0, (columns.length() - 1)); //To get the last character

            //Check the typw of the primary key



            //String sqlToGetData = "SELECT " + columns + " FROM " + table + " WHERE " + pkName + "='" + primaryKey + "'";
            String sqlToGetData = "SELECT " + columns + " FROM " + table + " WHERE " + pkName + "= ?";
            st = conn.createStatement();
            ps = conn.prepareStatement(sqlToGetData);
            ps.setString(1,primaryKey);

            //Constants.logger.debug("\n\n ***** getData SQL : " + sqlToGetData);

            //Get Data
            resData = ps.executeQuery();
            ResultSetMetaData meta = resData.getMetaData();
            SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
            Object obj = null;
            String data = null;
            int i;

            while (resData.next()) {
                for (i = 1; i <= meta.getColumnCount(); i++) {
                    if (meta.getColumnType(i) == Types.DATE) {
                        Date dateDB = resData.getDate(i);
                        if (dateDB != null)
                            data = formatter.format(dateDB);
                        else
                            data = "";

                    } else {
                        obj = resData.getObject(i);
                        if (obj != null) {
                            data = obj.toString();
                        } else
                            data = "";
                    }

                    //Iterate over collection that contain a row
                    String columnMeta = meta.getColumnName(i);
                    String columnData = null;
                    for (int j = 0; j < row.size(); j++) {
                        columnData = ((TablesAdminVO) ((ArrayList) row).get(j)).getColumnName();
                        if (columnMeta.equals(columnData)) {
                            ((TablesAdminVO) ((ArrayList) row).get(j)).setColumnValue(data);
                            ((TablesAdminVO) ((ArrayList) row).get(j)).setColumnType(meta.getColumnType(i));
                        }
                        //Constants.logger.debug("\n\n columnMeta = columnData ===> " + columnMeta + " ==" + columnData);
                    }
                }
            }
            return row;
        } catch (Exception e) {
            throw new DAOException(e.getClass().getName() + " has ocurred in the getRow(String primaryKey, String table) method of the AdminDaoBean class", e);
        } finally {
            try {
                if (res != null) res.close();
            } catch (Exception e) {
            }
            try {
                if (resData != null) resData.close();
            } catch (Exception e) {
            }
            try {
                if (st != null) st.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }
        }
    }

    /**
     * Method to get a collectin of active entities
     *
     * @param oper String
     * @return Collection of entity codes
     * @throws DAOException
     */
    public Collection getEntityPSActiveEnt(String oper) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        ArrayList result = new ArrayList();
        try {

            /*Hashtable prop=new Hashtable();
            prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);
            prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/

            InitialContext ic = new InitialContext();
            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();

            cs = conn.prepareCall("BEGIN SP_GET_PS_ACTIVE_ENTITIES(?,?); END;");
            cs.setString(1, oper);
            cs.registerOutParameter(2, oracle.jdbc.OracleTypes.CURSOR);
            cs.execute();
            rs = (ResultSet) cs.getObject(2);

            while (rs.next()) {
                result.add(rs.getString(1));
            }
        } catch (Exception e) {
            throw new DAOException(e.getClass().getName() + "has ocurred in the getEntityPSActiveEnt(String a) method of the AdminDaoBean class", e);
        } finally {
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }
            cs = null;
            conn = null;
        }
        return result;
    }

    /**
     * Method to get Cash in Bank information to be uploaded to PS
     *
     * @param ent String
     * @return Collection of PS info
     * @throws DAOException
     */
    public Collection getCashInBankPSUpload(String ent) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        ArrayList result = new ArrayList();
        try {

            /*Hashtable prop=new Hashtable();
            prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);
            prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);
            */
            InitialContext ic = new InitialContext();
            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();

            cs = conn.prepareCall("BEGIN SP_CASH_IN_BANK_PS_UPLOAD(?,?); END;");
            cs.setString(1, ent);
            cs.registerOutParameter(2, oracle.jdbc.OracleTypes.CURSOR);
            cs.execute();
            rs = (ResultSet) cs.getObject(2);

            while (rs.next()) {
                result.add(rs.getString(1));
            }
        } catch (Exception e) {
            throw new DAOException(e.getClass().getName() + "has ocurred in the getCashInBankPSUpload(String ent) method of the AdminDaoBean class", e);
        } finally {
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }
            cs = null;
            conn = null;
        }
        return result;
    }

    /**
     * Method to get Write-Off information to be uploaded to PS
     *
     * @param ent String
     * @return Collection of PS info
     * @throws DAOException
     */
    public Collection getWriteOffPSUpload(String ent) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        ArrayList result = new ArrayList();
        try {

            /*Hashtable prop=new Hashtable();
            prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);
            prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);
            */
            InitialContext ic = new InitialContext();
            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();

            cs = conn.prepareCall("BEGIN SP_WRITE_OFF_PS_UPLOAD(?,?); END;");
            cs.setString(1, ent);
            cs.registerOutParameter(2, oracle.jdbc.OracleTypes.CURSOR);
            cs.execute();
            rs = (ResultSet) cs.getObject(2);

            while (rs.next()) {
                result.add(rs.getString(1));
            }
        } catch (Exception e) {
            throw new DAOException(e.getClass().getName() + "has ocurred in the getWriteOffPSUpload(String ent) method of the AdminDaoBean class", e);
        } finally {
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }
            cs = null;
            conn = null;
        }
        return result;
    }

    /**
     * Saves flags not present in country table for a particular country
     *
     * @param countryCd
     * @param dtrcUpldFlg
     * @param psCashUpldFlg
     * @param psWoffUpldFlg
     * @param operId
     * @throws DAOException
     */
    public void updateCountryFlags(String countryCd, int dtrcUpldFlg, int psCashUpldFlg, int psWoffUpldFlg, String operId) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;

        try {

           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext ic = new InitialContext();
            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();

            cs = conn.prepareCall("UPDATE ENTITY\n" +
                    "SET DTRC_UPLD_ACT_FLG=?,PS_OPR_EMP_ID_NBR=?\n" +
                    "WHERE CNTRY_CD=?");

            cs.setInt(1, dtrcUpldFlg);
            cs.setString(2, operId);
            cs.setString(3, countryCd);
            cs.execute();

            cs = conn.prepareCall("UPDATE ENTITY_PS_ACCT\n" +
                    "SET PS_CASH_ACT_FLG=?,\n" +
                    "PS_WOFF_ACT_FLG=?\n" +
                    "WHERE ENT_CD IN\n" +
                    "    (SELECT ENT_CD\n" +
                    "     FROM ENTITY\n" +
                    "     WHERE CNTRY_CD=?)");

            cs.setInt(1, psCashUpldFlg);
            cs.setInt(2, psWoffUpldFlg);
            cs.setString(3, countryCd);
            cs.execute();


        } catch (Exception e) {
            throw new DAOException(e.getClass().getName() + "has ocurred in the updateCountryFlags(String countryCd,int dtrcUpldFlg,int psCashUpldFlg, int psWoffUpldFlg) method of the AdminDaoBean class", e);
        } finally {
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }
            cs = null;
            conn = null;
        }
    }

    public CountryConfigVO getCountryFlags(String countryCd) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        CountryConfigVO cconf = new CountryConfigVO();
        ResultSet rs = null;

        try {

           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext ic = new InitialContext();
            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();

            cs = conn.prepareCall("SELECT DTRC_UPLD_ACT_FLG,PS_OPR_EMP_ID_NBR\n" +
                    "FROM ENTITY\n" +
                    "WHERE CNTRY_CD=? AND ROWNUM<2");

            cs.setString(1, countryCd);
            rs = cs.executeQuery();

            if (rs.next()) {
                cconf.setDtrcUpldFlg(rs.getInt(1));
                cconf.setPsOperId(rs.getString(2));
            }

            cs = conn.prepareCall("SELECT PS_CASH_ACT_FLG,PS_WOFF_ACT_FLG\n" +
                    "FROM  ENTITY_PS_ACCT\n" +
                    "WHERE ENT_CD IN\n" +
                    "    (SELECT ENT_CD\n" +
                    "     FROM ENTITY\n" +
                    "     WHERE CNTRY_CD=?) AND ROWNUM<2");

            cs.setString(1, countryCd);
            rs = cs.executeQuery();

            if (rs.next()) {
                cconf.setCashUpldFlg(rs.getInt(1));
                cconf.setWoffUpldFlg(rs.getInt(2));
            }

        } catch (Exception e) {
            throw new DAOException(e.getClass().getName() + "has ocurred in the updateCountryFlags(String countryCd,int dtrcUpldFlg,int psCashUpldFlg, int psWoffUpldFlg) method of the AdminDaoBean class", e);
        } finally {
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }
            cs = null;
            conn = null;
        }

        return cconf;
    }


    public java.util.Date getNextClosingDate() throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        try {

           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext ic = new InitialContext();
            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();

            cs = conn.prepareCall("BEGIN ?:=FX_GET_NEXT_CLOSING_DT; END;");
            cs.registerOutParameter(1, oracle.jdbc.OracleTypes.TIMESTAMP);
            cs.execute();
            return cs.getTimestamp(1);

        } catch (Exception e) {
            throw new DAOException(e.getClass().getName() + "has ocurred in the getNextClosingDate(String ent) method of the AdminDaoBean class", e);
        } finally {
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }
            cs = null;
            conn = null;
        }

    }

    public Collection getAllTables() throws DAOException {
        Collection tables = null;
        Connection conn = null;
        Statement stmt = null;
        ResultSet res = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext ic = new InitialContext();
            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();

            System.out.println("##########################");
            System.out.println("getAllTables ds : " + Constants.CCSDataSource);
            System.out.println("getAllTables ds : " + ds.toString());
            System.out.println("##########################");
            
            stmt = conn.createStatement();
            res = stmt.executeQuery("SELECT TABLE_NAME OBJECT_NAME FROM ALL_TABLES uo, PARAMETER p \n" +
                    "WHERE uo.OWNER=p.PARM_VALUE_CD\n" +
                    "AND p.PARM_NM='app.db.schema.name'\n" +
                    "AND TABLE_NAME NOT IN (SELECT DISTINCT TBL_NM FROM TBL_ADMN_CNTL)");
            tables = new ArrayList();
            while (res.next()) {
                Hashtable table = new Hashtable();
                table.put("OBJECT_NAME", res.getString("OBJECT_NAME"));
                tables.add(table);
            }

            
        }
        catch (Exception e) {
            throw new DAOException(e.getClass().getName() + "has ocurred in the getAllTables() method of the AdminDaoBean class", e);
        }
        finally {
            try {
                if (res != null) res.close();
            }
            catch (Exception e) {
            }

            try {
                if (stmt != null) stmt.close();
            }
            catch (Exception e) {
            }

            try {
                if (conn != null) conn.close();
            }
            catch (Exception e) {
            }
            stmt = null;
            res = null;
            conn = null;
        }
        return tables;
    }

    public Collection getAllAdminTables() throws DAOException {
        Collection tables = null;
        Connection conn = null;
        Statement stmt = null;
        ResultSet res = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext ic = new InitialContext();
            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            stmt = conn.createStatement();
            res = stmt.executeQuery("SELECT DISTINCT TBL_NM FROM TBL_ADMN_CNTL");
            tables = new ArrayList();
            while (res.next()) {
                Hashtable table = new Hashtable();
                table.put("TBL_NM", res.getString("TBL_NM"));
                tables.add(table);
            }
        }
        catch (Exception e) {
            throw new DAOException(e.getClass().getName() + "has ocurred in the getAllAdminTables() method of the AdminDaoBean class", e);
        }
        finally {
            try {
                if (res != null) res.close();
            }
            catch (Exception e) {
            }

            try {
                if (stmt != null) stmt.close();
            }
            catch (Exception e) {
            }

            try {
                if (conn != null) conn.close();
            }
            catch (Exception e) {
            }
            stmt = null;
            res = null;
            conn = null;
        }
        return tables;
    }

    public Collection getAllColumnsOfTable(String name) throws DAOException {
        Collection columns = null;
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet res = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext ic = new InitialContext();
            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            pstmt = conn.prepareStatement("SELECT COLUMN_NAME \n" +
                    "FROM ALL_TAB_COLUMNS atc, PARAMETER p\n" +
                    "WHERE TABLE_NAME = ?\n" +
                    "AND OWNER=PARM_VALUE_CD\n" +
                    "AND PARM_NM='app.db.schema.name'\n" +
                    "AND COLUMN_NAME NOT IN (SELECT COL_NM FROM TBL_ADMN_CNTL WHERE TBL_NM = ? )");
            pstmt.setString(1, name);
            pstmt.setString(2, name);
            res = pstmt.executeQuery();
            columns = new ArrayList();
            while (res.next()) {
                columns.add(res.getString("COLUMN_NAME"));
            }
        }
        catch (Exception e) {
            throw new DAOException(e.getClass().getName() + "has ocurred in the getAllColumnsOfTable(name) method of the AdminDaoBean class", e);
        }
        finally {
            try {
                if (res != null) res.close();
            }
            catch (Exception e) {
            }

            try {
                if (pstmt != null) pstmt.close();
            }
            catch (Exception e) {
            }

            try {
                if (conn != null) conn.close();
            }
            catch (Exception e) {
            }
            pstmt = null;
            res = null;
            conn = null;
        }
        return columns;
    }

    public Collection getColumnsOfAdminTable(String name) throws DAOException {
        Collection columns = null;
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet res = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext ic = new InitialContext();
            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            pstmt = conn.prepareStatement("SELECT COL_NM," +
                    "NVL(SEL_FLG,'0') SEL_FLG, " +
                    "NVL(UPD_FLG,'0') UPD_FLG, " +
                    "NVL(SRCH_FLG,'0') SRCH_FLG, " +
                    "NVL(PRIM_KEY_FLG,'0') PRIM_KEY_FLG " +
                    "FROM TBL_ADMN_CNTL " +
                    "WHERE TBL_NM = ?");
            pstmt.setString(1, name);
            res = pstmt.executeQuery();
            columns = new ArrayList();
            while (res.next()) {
                Hashtable column = new Hashtable();
                column.put("COL_NM", res.getString("COL_NM"));
                column.put("SEL_FLG", res.getString("SEL_FLG"));
                column.put("UPD_FLG", res.getString("UPD_FLG"));
                column.put("SRCH_FLG", res.getString("SRCH_FLG"));
                column.put("PRIM_KEY_FLG", res.getString("PRIM_KEY_FLG"));
                columns.add(column);
            }
        }
        catch (Exception e) {
            throw new DAOException(e.getClass().getName() + "has ocurred in the getColumnsOfAdminTable(name) method of the AdminDaoBean class", e);
        }
        finally {
            try {
                if (res != null) res.close();
            }
            catch (Exception e) {
            }

            try {
                if (pstmt != null) pstmt.close();
            }
            catch (Exception e) {
            }

            try {
                if (conn != null) conn.close();
            }
            catch (Exception e) {
            }
            pstmt = null;
            res = null;
            conn = null;
        }
        return columns;
    }

    public void createAdminTable(String name) throws DAOException {
        Collection columns = null;
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet res = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext ic = new InitialContext();
            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            pstmt = conn.prepareStatement("INSERT INTO TBL_ADMN_CNTL (TBL_NM,COL_NM,SEL_FLG,UPD_FLG,SRCH_FLG,PRIM_KEY_FLG) " +
                    "VALUES (?,?,?,?,?,?) ");
            columns = getAllColumnsOfTable(name);
            Iterator it = columns.iterator();
            while (it.hasNext()) {
                pstmt.setString(1, name);
                pstmt.setString(2, it.next().toString());
                pstmt.setString(3, "0");
                pstmt.setString(4, "0");
                pstmt.setString(5, "0");
                pstmt.setString(6, "0");
                pstmt.executeUpdate();
            }
        }
        catch (Exception e) {
            throw new DAOException(e.getClass().getName() + "has ocurred in the createAdminTable(name) method of the AdminDaoBean class", e);
        }
        finally {
            try {
                if (res != null) res.close();
            }
            catch (Exception e) {
            }

            try {
                if (pstmt != null) pstmt.close();
            }
            catch (Exception e) {
            }

            try {
                if (conn != null) conn.close();
            }
            catch (Exception e) {
            }
            pstmt = null;
            res = null;
            conn = null;
        }
    }

    public void updateAdminTableColumn(String table, String column, String flag, String value) throws DAOException {
        Connection conn = null;
        Statement stmt = null;
        PreparedStatement pstmt = null;
        String qry = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext ic = new InitialContext();
            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();

            qry = "UPDATE TBL_ADMN_CNTL " +
                    "SET " + flag + " = ? " +
                    "WHERE TBL_NM = ? " +
                    "AND COL_NM = ?";

            pstmt = conn.prepareStatement(qry);
            pstmt.setString(1, value);
            pstmt.setString(2, table);
            pstmt.setString(3, column);
            pstmt.executeUpdate();

        }
        catch (Exception e) {
            throw new DAOException(e.getClass().getName() + "has ocurred in the updateAdminTableColumn(table,column,flag) method of the AdminDaoBean class", e);
        }
        finally {
            try {
                if (stmt != null) stmt.close();
            }
            catch (Exception e) {
            }

            try {
                if (conn != null) conn.close();
            }
            catch (Exception e) {
            }
            stmt = null;
            conn = null;
        }
    }

    public EntityAdminVO getEntity(String entCd) throws DAOException {
        Connection conn = null;
        CallableStatement stmt = null;
        ResultSet res = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext ic = new InitialContext();
            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            stmt = conn.prepareCall("SELECT ENT_CD,LOC_CD,CNTRY_CD,REGION_CD,SUB_REGION_CD,NER_CD,GL_ENT_CD,GL_CURR_CD,DTRC_UPLD_ACT_FLG," +
            		"PS_OPR_EMP_ID_NBR,RIH_ENT_CD,POA_PYMT_UPLD_FLG,ROD_UPLD_ACT_FLG,\n" +
            		"PRP_UPLD_ACT_FLG,FTC_UPLD_ACT_FLG,OTH_UPLD_ACT_FLG,GRD_UPLD_ACT_FLG,PAYMENT_ACT_NBR \n" +
                    "FROM ENTITY\n" +
                    "WHERE ENT_CD=?\n" +
                    "ORDER BY LOC_CD");
            stmt.setString(1, entCd);
            res = stmt.executeQuery();

            EntityAdminVO entVO = new EntityAdminVO();
            entVO.setLocations(new ArrayList());
            boolean firstTime = true;
            while (res.next()) {
                entVO.getLocations().add(res.getString(2));
                if (firstTime) {
                    entVO.setEntCd(res.getString(1));
                    entVO.setCntryCd(res.getString(3));
                    entVO.setRegionCd(res.getString(4));
                    entVO.setSubRegionCd(res.getString(5));
                    entVO.setNerCd(res.getString(6));
                    entVO.setGlEntCd(res.getString(7));
                    entVO.setGlCurrCd(res.getString(8));
                    entVO.setDtrcUpldActFlg(res.getInt(9));
                    entVO.setPsOprEmpId(res.getString(10));
                    entVO.setRihEntCd(res.getString(11));
                    entVO.setPoaUpldOceanFlg(res.getInt(12));
                    /*
                     * Change new fields introduced in Entity Class
                     * Author : Kapil Rana
                     * 
                     */
                    entVO.setRodUpldActFlg(res.getInt(13));
                    entVO.setPrpUpldActFlg(res.getInt(14));
                    entVO.setFtcUpldActFlg(res.getInt(15));
                    entVO.setOthUpldActFlg(res.getInt(16));
                    entVO.setGrdUpldActFlg(res.getInt(17));
                    entVO.setPaymentAccountNbr(res.getString(18));
                    /*
                     * End here 
                     */
                    firstTime = false;
                }
            }

            return entVO;
        }
        catch (Exception e) {
            throw new DAOException(e.getClass().getName() + "has ocurred in the getEntity() method of the AdminDaoBean class", e);
        }
        finally {
            try {
                if (res != null) res.close();
            }
            catch (Exception e) {
            }

            try {
                if (stmt != null) stmt.close();
            }
            catch (Exception e) {
            }

            try {
                if (conn != null) conn.close();
            }
            catch (Exception e) {
            }
            stmt = null;
            conn = null;
        }
    }

    public void setEntity(EntityAdminVO entVO) throws DAOException {
        Connection conn = null;
        CallableStatement stmt = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext ic = new InitialContext();
            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            stmt = conn.prepareCall("DELETE FROM ENTITY \n" +
                    "WHERE ENT_CD=?");

            stmt.setString(1, entVO.getEntCd());
            stmt.executeUpdate();

            try {
                if (stmt != null) stmt.close();
            }
            catch (Exception e) {
            }
            String updtStmt = "INSERT INTO ENTITY(" +
            		"ENT_CD,LOC_CD,CNTRY_CD,REGION_CD,SUB_REGION_CD,NER_CD,GL_ENT_CD,GL_CURR_CD," +
            		"DTRC_UPLD_ACT_FLG,PS_OPR_EMP_ID_NBR,RIH_ENT_CD,POA_PYMT_UPLD_FLG,ROD_UPLD_ACT_FLG," +
            		"PRP_UPLD_ACT_FLG,FTC_UPLD_ACT_FLG,OTH_UPLD_ACT_FLG,GRD_UPLD_ACT_FLG,PAYMENT_ACT_NBR)\n" +
                    "SELECT ?,LOC_CD,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?\n" +
                    "FROM LOCATION\n" +
                    "WHERE LOC_CD IN (";

            Iterator iterLocs = entVO.getLocations().iterator();
            StringBuffer sb = new StringBuffer("");
            while (iterLocs.hasNext()) {
                if (!"".equals(sb.toString())) sb.append(",\n");
                sb.append("'" + iterLocs.next() + "'");
            }

            String inLocs = "".equals(sb.toString()) ? "'ZZZZZZZZ'" : sb.toString();
            updtStmt = updtStmt + inLocs;
            updtStmt = updtStmt + ")";
            stmt = conn.prepareCall(updtStmt);

            stmt.setString(1, entVO.getEntCd());
            stmt.setString(2, entVO.getCntryCd());
            stmt.setString(3, entVO.getRegionCd());
            stmt.setString(4, entVO.getSubRegionCd());
            stmt.setString(5, entVO.getNerCd());
            stmt.setString(6, entVO.getGlEntCd());
            stmt.setString(7, entVO.getGlCurrCd());
            stmt.setInt(8, entVO.getDtrcUpldActFlg());
            stmt.setString(9, entVO.getPsOprEmpId());
            stmt.setString(10, entVO.getRihEntCd());
            stmt.setInt(11, entVO.getPoaUpldOceanFlg());
            /*
             * Change new fields introduced in Entity Class
             * Author : Kapil Rana
             * 
             */
            stmt.setInt(12, entVO.getRodUpldActFlg());
            stmt.setInt(13, entVO.getPrpUpldActFlg());
            stmt.setInt(14, entVO.getFtcUpldActFlg());
            stmt.setInt(15, entVO.getOthUpldActFlg());
            stmt.setInt(16, entVO.getGrdUpldActFlg());
            stmt.setString(17, entVO.getPaymentAccountNbr());
            /*
             * End here
             */

            stmt.execute();
        }
        catch (Exception e) {
            throw new DAOException(e.getClass().getName() + "has ocurred in the setEntity method of the AdminDaoBean class", e);
        }
        finally {
            try {
                if (stmt != null) stmt.close();
            }
            catch (Exception e) {
            }

            try {
                if (conn != null) conn.close();
            }
            catch (Exception e) {
            }
            stmt = null;
            conn = null;
        }
    }

    public void removeAdminTableColumn(String table, String column) throws DAOException {
        Connection conn = null;
        Statement stmt = null;
        PreparedStatement pstmt = null;
        String qry = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext ic = new InitialContext();
            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();

            qry = "DELETE FROM TBL_ADMN_CNTL " +
                    "WHERE TBL_NM = ? " +
                    "AND COL_NM = ? ";

            pstmt = conn.prepareStatement(qry);
            pstmt.setString(1, table);
            pstmt.setString(2, column);
            pstmt.executeUpdate();



        }
        catch (Exception e) {
            throw new DAOException(e.getClass().getName() + "has ocurred in the removeAdminTableColumn(table,column) method of the AdminDaoBean class", e);
        }
        finally {
            try {
                if (stmt != null) stmt.close();
            }
            catch (Exception e) {
            }

            try {
                if (conn != null) conn.close();
            }
            catch (Exception e) {
            }
            stmt = null;
            conn = null;
        }
    }

    public void removeAdminTable(String table) throws DAOException {
        Connection conn = null;
        Statement stmt = null;
        PreparedStatement pstmt = null;
        String qry = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext ic = new InitialContext();
            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();

            qry = "DELETE FROM TBL_ADMN_CNTL " +
                    "WHERE TBL_NM = ?";

            pstmt = conn.prepareStatement(qry);
            pstmt.setString(1, table);
            pstmt.executeUpdate();


        }
        catch (Exception e) {
            throw new DAOException(e.getClass().getName() + "has ocurred in the removeAdminTable(table) method of the AdminDaoBean class", e);
        }
        finally {
            try {
                if (stmt != null) stmt.close();
            }
            catch (Exception e) {
            }

            try {
                if (conn != null) conn.close();
            }
            catch (Exception e) {
            }
            stmt = null;
            conn = null;
        }
    }

    public void createAdminTableColumn(String table, String column) throws DAOException {
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet res = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext ic = new InitialContext();
            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            pstmt = conn.prepareStatement("INSERT INTO TBL_ADMN_CNTL (TBL_NM,COL_NM,SEL_FLG,UPD_FLG,SRCH_FLG,PRIM_KEY_FLG) " +
                    "VALUES (?,?,?,?,?,?) ");
            pstmt.setString(1, table);
            pstmt.setString(2, column);
            pstmt.setString(3, "0");
            pstmt.setString(4, "0");
            pstmt.setString(5, "0");
            pstmt.setString(6, "0");
            pstmt.executeUpdate();
        }
        catch (Exception e) {
            throw new DAOException(e.getClass().getName() + "has ocurred in the createAdminTableColumn(table,column) method of the AdminDaoBean class", e);
        }
        finally {
            try {
                if (res != null) res.close();
            }
            catch (Exception e) {
            }

            try {
                if (pstmt != null) pstmt.close();
            }
            catch (Exception e) {
            }

            try {
                if (conn != null) conn.close();
            }
            catch (Exception e) {
            }
            pstmt = null;
            res = null;
            conn = null;
        }
    }

    public Collection getEntities() throws DAOException {
        Connection conn = null;
        Statement stmt = null;
        ResultSet res = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext ic = new InitialContext();
            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            stmt = conn.createStatement();
            res = stmt.executeQuery("SELECT DISTINCT ENT_CD\n" +
                    "FROM ENTITY\n" +
                    "ORDER BY ENT_CD");

            Collection ents = new ArrayList();

            while (res.next()) {
                ents.add(new Entry(res.getString(1), res.getString(1)));
            }

            return ents;
        }
        catch (Exception e) {
            throw new DAOException(e.getClass().getName() + "has ocurred in the getEntities method of the AdminDaoBean class", e);
        }
        finally {
            try {
                if (res != null) res.close();
            }
            catch (Exception e) {
            }

            try {
                if (stmt != null) stmt.close();
            }
            catch (Exception e) {
            }

            try {
                if (conn != null) conn.close();
            }
            catch (Exception e) {
            }
            stmt = null;
            conn = null;
        }
    }

    public Collection getEntCntryAccounts(String entCd) throws DAOException {
        Connection conn = null;
        CallableStatement stmt = null;
        ResultSet res = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext ic = new InitialContext();
            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            stmt = conn.prepareCall("SELECT DISTINCT BANK_ACCT_CD,BANK_NM || ' - ' || ACCT_NBR\n" +
                    "FROM BANK_ACCT ba, BANK b, ENTITY e\n" +
                    "WHERE ba.BANK_ID_NBR=b.BANK_ID_NBR\n" +
                    "AND b.CNTRY_CD=e.CNTRY_CD\n" +
                    "AND e.ENT_CD=?");
            stmt.setString(1, entCd);

            res = stmt.executeQuery();

            Collection entsCntryAccts = new ArrayList();

            while (res.next()) {
                entsCntryAccts.add(new Entry(new Integer(res.getInt(1)), res.getString(2)));
            }

            return entsCntryAccts;
        }
        catch (Exception e) {
            throw new DAOException(e.getClass().getName() + "has ocurred in the getEntCntryAccounts method of the AdminDaoBean class", e);
        }
        finally {
            try {
                if (res != null) res.close();
            }
            catch (Exception e) {
            }

            try {
                if (stmt != null) stmt.close();
            }
            catch (Exception e) {
            }

            try {
                if (conn != null) conn.close();
            }
            catch (Exception e) {
            }
            stmt = null;
            conn = null;
        }
    }

    public void removeEntAcct(EntityAcctAdminVO entVO) throws DAOException {
        Connection conn = null;
        CallableStatement stmt = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext ic = new InitialContext();
            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            stmt = conn.prepareCall("DELETE FROM ENTITY_PS_ACCT \n" +
                    "WHERE ENT_CD=?" +
                    "AND BANK_ACC_CD=?");

            stmt.setString(1, entVO.getEntCd());
            stmt.setInt(2, entVO.getBankAccCd());
            stmt.executeUpdate();

        } catch (Exception e) {
            throw new DAOException(e.getClass().getName() + "has ocurred in the removeEntAcct method of the AdminDaoBean class", e);
        }
        finally {
            try {
                if (stmt != null) stmt.close();
            }
            catch (Exception e) {
            }

            try {
                if (conn != null) conn.close();
            }
            catch (Exception e) {
            }
            stmt = null;
            conn = null;
        }
    }

    public void setEntAcct(EntityAcctAdminVO entVO) throws DAOException {
        Connection conn = null;
        CallableStatement stmt = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext ic = new InitialContext();
            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            stmt = conn.prepareCall("DELETE FROM ENTITY_PS_ACCT \n" +
                    "WHERE ENT_CD=?" +
                    "AND BANK_ACC_CD=?");

            stmt.setString(1, entVO.getEntCd());
            stmt.setInt(2, entVO.getBankAccCd());
            stmt.executeUpdate();

            try {
                if (stmt != null) stmt.close();
            }
            catch (Exception e) {
            }

            String updtStmt = "INSERT INTO ENTITY_PS_ACCT(ENT_CD,BANK_ACC_CD,DEP_LOC_CURR_ACC_NBR,DEP_USD_CURR_ACC_NBR,COST_CENTER_NBR,ROD_ACC_NBR,PRP_ACC_NBR,POA_ACC_NBR,WOFF_ROD_DBT_ACC_NBR,WOFF_PRP_DBT_ACC_NBR,WOFF_CRDT_ACC_NBR,PS_CASH_ACT_FLG,PS_WOFF_ACT_FLG)\n" +
                    "VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)";

            stmt = conn.prepareCall(updtStmt);

            stmt.setString(1, entVO.getEntCd());
            stmt.setInt(2, entVO.getBankAccCd());
            stmt.setString(3, entVO.getDepLocCurrAccNbr());
            stmt.setString(4, entVO.getDepUsdCurrAccNbr());
            stmt.setString(5, entVO.getCostCenterNbr());
            stmt.setString(6, entVO.getRodAccNbr());
            stmt.setString(7, entVO.getPrpAccNbr());
            stmt.setString(8, entVO.getPoaAccNbr());
            stmt.setString(9, entVO.getWoffRodDbtAccNbr());
            stmt.setString(10, entVO.getWoffPrpDbtAccNbr());
            stmt.setString(11, entVO.getWoffCrdtAccNbr());
            stmt.setInt(12, entVO.getPsCashActFlg());
            stmt.setInt(13, entVO.getPsWoffActFlg());

            stmt.execute();
        }
        catch (Exception e) {
            throw new DAOException(e.getClass().getName() + "has ocurred in the setEntAcct method of the AdminDaoBean class", e);
        }
        finally {
            try {
                if (stmt != null) stmt.close();
            }
            catch (Exception e) {
            }

            try {
                if (conn != null) conn.close();
            }
            catch (Exception e) {
            }
            stmt = null;
            conn = null;
        }
    }

    public EntityAcctAdminVO getEntAcct(String entCd, int bankAcct) throws DAOException {
        Connection conn = null;
        CallableStatement stmt = null;
        ResultSet res = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext ic = new InitialContext();
            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            stmt = conn.prepareCall("SELECT ENT_CD,BANK_ACC_CD,DEP_LOC_CURR_ACC_NBR,DEP_USD_CURR_ACC_NBR,COST_CENTER_NBR,ROD_ACC_NBR,PRP_ACC_NBR,POA_ACC_NBR,WOFF_ROD_DBT_ACC_NBR,WOFF_PRP_DBT_ACC_NBR,WOFF_CRDT_ACC_NBR,PS_CASH_ACT_FLG,PS_WOFF_ACT_FLG\n" +
                    "FROM ENTITY_PS_ACCT\n" +
                    "WHERE ENT_CD=?\n" +
                    "AND BANK_ACC_CD=?");
            stmt.setString(1, entCd);
            stmt.setInt(2, bankAcct);
            res = stmt.executeQuery();

            EntityAcctAdminVO entVO = new EntityAcctAdminVO();
            entVO.setEntCd(entCd);
            entVO.setBankAccCd(bankAcct);
            while (res.next()) {
                entVO.setDepLocCurrAccNbr(res.getString(3));
                entVO.setDepUsdCurrAccNbr(res.getString(4));
                entVO.setCostCenterNbr(res.getString(5));
                entVO.setRodAccNbr(res.getString(6));
                entVO.setPrpAccNbr(res.getString(7));
                entVO.setPoaAccNbr(res.getString(8));
                entVO.setWoffRodDbtAccNbr(res.getString(9));
                entVO.setWoffPrpDbtAccNbr(res.getString(10));
                entVO.setWoffCrdtAccNbr(res.getString(11));
                entVO.setPsCashActFlg(res.getInt(12));
                entVO.setPsWoffActFlg(res.getInt(13));
            }

            return entVO;
        }
        catch (Exception e) {
            throw new DAOException(e.getClass().getName() + "has ocurred in the getEntAcct() method of the AdminDaoBean class", e);
        }
        finally {
            try {
                if (res != null) res.close();
            }
            catch (Exception e) {
            }

            try {
                if (stmt != null) stmt.close();
            }
            catch (Exception e) {
            }

            try {
                if (conn != null) conn.close();
            }
            catch (Exception e) {
            }
            stmt = null;
            conn = null;
        }
    }

    public Collection getOracleTimeZones() throws DAOException {
        Connection conn = null;
        CallableStatement stmt = null;
        ResultSet res = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext ic = new InitialContext();
            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            stmt = conn.prepareCall("SELECT DISTINCT TZNAME FROM V$TIMEZONE_NAMES ORDER BY TZNAME ASC");

            res = stmt.executeQuery();

            Collection oracleTimeZones = new ArrayList();

            while (res.next()) {
                oracleTimeZones.add(res.getString(1));
            }

            return oracleTimeZones;
        }
        catch (Exception e) {
            throw new DAOException(e.getClass().getName() + "has ocurred in the getOracleTimeZones method of the AdminDaoBean class", e);
        }
        finally {
            try {
                if (res != null) res.close();
            }
            catch (Exception e) {
            }

            try {
                if (stmt != null) stmt.close();
            }
            catch (Exception e) {
            }

            try {
                if (conn != null) conn.close();
            }
            catch (Exception e) {
            }
            stmt = null;
            conn = null;
        }
    }

    /**
     * This method updates set the RIHTaskId for all the
     * locations of the same ENTITY
     */
    public void setCntryLocsRIHTask(String locCd, int taskId) throws DAOException {
        Connection conn = null;
        CallableStatement stmt = null;
        ResultSet res = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext ic = new InitialContext();
            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            stmt = conn.prepareCall("UPDATE LOCATION " +
                    "SET RIH_TSK_ID_NBR=?" +
                    "WHERE LOC_CD IN (SELECT LOC_CD " +
                    "                   FROM ENTITY " +
                    "                   WHERE ENT_CD=(SELECT MIN(ENT_CD)" +
                    "                                 FROM ENTITY" +
                    "                                 WHERE LOC_CD=?))");
            stmt.setInt(1, taskId);
            stmt.setString(2, locCd);
            stmt.execute();
        }
        catch (Exception e) {
            throw new DAOException(e.getClass().getName() + "has ocurred in the getOracleTimeZones method of the AdminDaoBean class", e);
        }
        finally {
            try {
                if (res != null) res.close();
            }
            catch (Exception e) {
            }

            try {
                if (stmt != null) stmt.close();
            }
            catch (Exception e) {
            }

            try {
                if (conn != null) conn.close();
            }
            catch (Exception e) {
            }
            stmt = null;
            conn = null;
        }
    }

    public boolean isLocationParent(String locCd) throws DAOException {
        Connection conn = null;
        CallableStatement stmt = null;
        ResultSet res = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext ic = new InitialContext();
            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            stmt = conn.prepareCall("SELECT COUNT(LOC_CD) FROM LOCATION WHERE PARNT_LOC_CD=?");
            stmt.setString(1, locCd);
            res = stmt.executeQuery();

            while (res.next()) {
                if (res.getInt(1) > 0)
                    return true;
            }

            return false;

        }
        catch (Exception e) {
            throw new DAOException(e.getClass().getName() + "has ocurred in the getOracleTimeZones method of the AdminDaoBean class", e);
        }
        finally {
            try {
                if (res != null) res.close();
            }
            catch (Exception e) {
            }

            try {
                if (stmt != null) stmt.close();
            }
            catch (Exception e) {
            }

            try {
                if (conn != null) conn.close();
            }
            catch (Exception e) {
            }
            stmt = null;
            conn = null;
        }
    }
    
    //misselenous enhancemnets  saveStationsAdminInput
    public void saveStationsAdminInput(StationsAdminVO stationsAdminVO) throws DAOException {
        Connection conn = null;
        PreparedStatement pstmt = null;
        DateFormat df = new SimpleDateFormat("MM/dd/yyyy");
        try {
        	
            InitialContext ic = new InitialContext();
            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            
            pstmt = conn.prepareStatement("INSERT INTO EMPLOYEE_CLEARING(EMP_ID_NBR,LOC_CD,EMP_CLEAR_DT,CTFN_TYPE_DESC,EMP_CLEAR_STAT_CD,COMMENTS_DESC) VALUES(?,?,?,?,?,?)");
            pstmt.setString(1, stationsAdminVO.getFedexId()); //EMP_ID_NBR
            pstmt.setString(2, stationsAdminVO.getLocCode());//LOC_CD            
            pstmt.setDate(3,new java.sql.Date(df.parse( stationsAdminVO.getDateEntered()).getTime()) );//EMP_CLEAR_DT 
            pstmt.setString(4, stationsAdminVO.getCertificationTypeDescription());//CTFN_TYPE_DESC
            pstmt.setInt(5, stationsAdminVO.getStatus());//EMP_CLEAR_STAT_CD
            pstmt.setString(6, stationsAdminVO.getComments()); //COMMENTS_DESC
           
           
            
            pstmt.executeUpdate();

        }
        
        catch (java.sql.SQLException se) {
            throw new DAOException(se.getClass().getName() + "has ocurred in the saveStationsAdminInput method of the AdminDaoBean class", se);
        }
      
        catch (Exception e) {
        	e.printStackTrace();
            throw new DAOException(e.getClass().getName() + "has ocurred in the saveStationsAdminInput method of the AdminDaoBean class", e);
            
        }
        finally {
            try {
                if (pstmt != null) pstmt.close();
            }
            catch (Exception e) {
            }

            try {
                if (conn != null) conn.close();
            }
            catch (Exception e) {
            }
            pstmt = null;
            conn = null;
        }
    }
    
    
}




























