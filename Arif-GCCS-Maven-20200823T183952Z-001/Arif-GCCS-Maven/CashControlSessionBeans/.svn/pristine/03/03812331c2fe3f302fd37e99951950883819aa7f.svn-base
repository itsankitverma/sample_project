package com.fedex.lacitd.cashcontrol.datatier.dao;

import com.fedex.lacitd.cashcontrol.biztier.common.*;
import com.fedex.lacitd.cashcontrol.datatier.exception.DAOException;
import com.fedex.lacitd.cashcontrol.datatier.valueobject.ChkinAgtCommentVO;
import com.fedex.lacitd.cashcontrol.datatier.valueobject.CosmosScanVO;
import com.fedex.lacitd.cashcontrol.datatier.valueobject.PymtImptLogVO;

import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.naming.Context;
import javax.sql.DataSource;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.Date;

/**
 * Created 18/11/2003 16:01:05
 * Code generated by the Sun ONE Studio EJB Builder
 *
 * @author ccardenas
 */


public class CommonOpsDaoBean implements javax.ejb.SessionBean {
    private javax.ejb.SessionContext context;


    /**
     * @see javax.ejb.SessionBean#setSessionContext(javax.ejb.SessionContext)
     */
    public void setSessionContext(javax.ejb.SessionContext aContext) {
        context = aContext;
    }


    /**
     * @see javax.ejb.SessionBean#ejbActivate()
     */
    public void ejbActivate() {

    }


    /**
     * @see javax.ejb.SessionBean#ejbPassivate()
     */
    public void ejbPassivate() {

    }


    /**
     * @see javax.ejb.SessionBean#ejbRemove()
     */
    public void ejbRemove() {

    }


    /**
     * See section 7.10.3 of the EJB 2.0 specification
     */
    public void ejbCreate() {

    }

    public boolean closeCourier(String checkInEmpCodePk, String locationCd, String employeeId) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_CLOSE_COURIER(?,?,?,?); END;");

            cs.setString(1, checkInEmpCodePk);
            cs.setString(2, locationCd);
            cs.setString(3, employeeId);
            cs.registerOutParameter(4, oracle.jdbc.OracleTypes.INTEGER);

            cs.execute();

            return (cs.getInt(4) == 1);
        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on closeCourier() method of CommonOpsDaoBean class.", e);
        } finally {
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            cs = null;
            conn = null;
        }
    }

    public void assignBankReference(int depositId) throws DAOException {
        Connection conn = null;
        PreparedStatement cs = null;
        ResultSet rs = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareStatement("BEGIN SP_ASSIGN_BANK_REF_TO_DEPOSIT(?); END;");
            cs.setInt(1, depositId);

            cs.execute();
        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on assignBankReference() method of RODDaoBean class.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
    }

    /**
     * This method returns a integer with the following meaning:
     * 0-No errors
     * 1-Employee does not
     * 2-Location does not exist
     * 3-Employee and location do not exist
     */
    public int existsEmployeeLocation(String loc, String emp) throws DAOException {
        Connection conn = null;
        PreparedStatement cs = null;
        ResultSet rs = null;
        try {
            boolean locExist = false;
            boolean empExist = false;

           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareStatement("SELECT COUNT(*) FROM LOCATION WHERE LOC_CD= ?");
            cs.setString(1, loc);

            rs = cs.executeQuery();

            if (rs.next()) {
                locExist = rs.getInt(1) > 0;
            }
            System.out.println("locExist=="+locExist);
            cs.close();

            cs = conn.prepareStatement("SELECT COUNT(*) FROM EMPLOYEE WHERE EMP_ID_NBR= ?");
            cs.setString(1, emp);

            rs = cs.executeQuery();

            if (rs.next()) {
                empExist = rs.getInt(1) > 0;
            }
            System.out.println("empExist=="+empExist);
            
            if (locExist)
                if (empExist){
                	System.out.println("emp and location Exist");
                	return 0;
                }
                else{
                	System.out.println("emp does not exist-location exists");
                    return 1;
                }
            else if (empExist){
            	System.out.println("emp alone exist");
                return 2;
            }
            else{
            	System.out.println("emp and location does not exist");
                return 3;
            }

        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on existsEmployeeLocation() method of RODDaoBean class.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
    }

    public void getAssingDepositSlipNumber(Collection depos) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        try {
            /*
            InitialContext c=new InitialContext();
            DataSource ds=(DataSource)c.lookup(Constants.CCSDataSource);
            conn=ds.getConnection();
            cs=conn.prepareCall("BEGIN SP_DEPOSIT_SLIP_NUMBER_ASSIGN  (?,?); END;");
             
            Iterator iterDepos = depos.iterator();
            while (iterDepos.hasNext()){
                DepositSlipReportVO dep=(DepositSlipReportVO)iterDepos.next();
                cs.clearParameters();
                cs.setInt(1,dep.getDepositSlipId());
                cs.setString(2,dep.getDepositSlipNumber());
                cs.execute();
            }*/
        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getAssingDepositSlipNumber() method of RODDaoBean class.", e);
        } finally {
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }
            cs = null;
            conn = null;
        }
    }

    public java.util.Collection getBankAccByLocation(String locationCd) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_BANK_ACC_BY_LOCATION  (?,?); END;");
            cs.setString(1, locationCd);
            cs.registerOutParameter(2, oracle.jdbc.OracleTypes.CURSOR);

            cs.execute();

            rs = (ResultSet) cs.getObject(2);
            Collection colRec = new ArrayList();
            while (rs.next()) {
                Entry rsVO = new Entry();
                rsVO.setKey(String.valueOf(rs.getInt(1)));
                rsVO.setValue(rs.getString(2));
                colRec.add(rsVO);
            }
            return colRec;

        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getBankAccByLocation() method of RODDaoBean class.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
    }

    public java.util.Collection getCreditCardPaymentsBatchs(String locationCd) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_GET_CREDIT_CARD_PYMT_BATCHS (?,?); END;");
            cs.setString(1, locationCd);
            cs.registerOutParameter(2, oracle.jdbc.OracleTypes.CURSOR);

            cs.execute();

            rs = (ResultSet) cs.getObject(2);
            Collection colCCP = new ArrayList();
            while (rs.next()) {
                CreditCardPymtTableVO ccpVO = new CreditCardPymtTableVO();
                ccpVO.setCreditCardPymtId(rs.getInt(1));
                ccpVO.setTotalAmt(rs.getDouble(2));
                ccpVO.setTotalReimbursed(rs.getDouble(3));
                ccpVO.setPaymentType(rs.getString(4));
                ccpVO.setPaymentDocNbr(rs.getString(5));
                ccpVO.setComments(rs.getString(6));
                ccpVO.setStatusId(rs.getInt(7));
                ccpVO.setEmployeeId(rs.getString(8));
                ccpVO.setBatchDt(rs.getDate(9));
                ccpVO.setCurrencyCd(rs.getString(10));
                colCCP.add(ccpVO);

                ccpVO.setPaymentDocNbrPrev(ccpVO.getPaymentDocNbrPrev());
                ccpVO.setStatusIdPrev(ccpVO.getStatusIdPrev());
                ccpVO.setTotalReimbursedPrev(ccpVO.getTotalReimbursedPrev());

            }
            return colCCP;

        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getCreditCardPaymentsBatchs() method of RODDaoBean class.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
    }

    public java.util.Hashtable getDepositSlipReport(String locationCd, Integer pageNumber) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        Hashtable result = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_DEPOSIT_SLIP_SHOW  (?,?,?,?,?); END;");
            cs.setString(1, locationCd);
            cs.setInt(2, pageNumber.intValue());
            cs.setInt(3, 25); //!Hard coded
            cs.registerOutParameter(4, oracle.jdbc.OracleTypes.CURSOR);
            cs.registerOutParameter(5, oracle.jdbc.OracleTypes.INTEGER);
            cs.execute();
            rs = (ResultSet) cs.getObject(4);
            Integer numberOfPages = (Integer) cs.getObject(5);
            Collection colRec = new ArrayList();
            while (rs.next()) {
                DepositSlipTableVO rsVO = new DepositSlipTableVO();
                rsVO.setDepositSlipCd(rs.getInt(1));
                rsVO.setDepositSlipDt(rs.getDate(2));
                rsVO.setBankAccountCd(rs.getInt(3));
                rsVO.setDepositSlipNbr(rs.getString(4));
                rsVO.setSrcType(rs.getString(5));
                rsVO.setCurrencyCd(rs.getString(6));
                rsVO.setPymtType(rs.getString(7));
                rsVO.setDepositSlipTotAmt(rs.getDouble(8));
                rsVO.setActualAmt(rs.getDouble(9));
                rsVO.setBankAmt(rs.getDouble(10));
                rsVO.setComments(rs.getString(11));
                rsVO.setStatusId(rs.getInt(12));
                rsVO.setDepoDt(rs.getDate(13));
                rsVO.setBankDepoDt(rs.getDate(14));
                rsVO.setFedexDepositId(rs.getString(15));
                rsVO.setTemplId(rs.getInt(16));
                rsVO.setTemplCd(rs.getString(17));

                rsVO.setBankAccountCdPrev(rsVO.getBankAccountCd());
                rsVO.setDepositSlipNbrPrev(rsVO.getDepositSlipNbr());
                rsVO.setActualAmtPrev(rsVO.getActualAmt());
                rsVO.setBankAmtPrev(rsVO.getBankAmt());
                rsVO.setStatusIdPrev(rsVO.getStatusId());
                rsVO.setDepoDtPrev(rsVO.getDepoDt());
                rsVO.setBankDepoDtPrev(rsVO.getBankDepoDt());
                //rsVO.setCommentsPrev(rsVO.getComments());
                colRec.add(rsVO);
            }
            result = new Hashtable();
            result.put("NUMBEROFPAGES", numberOfPages);
            result.put("RESULTSET", colRec);
            return result;
        }
        catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getDepositSlipReport() method of RODDaoBean class.", e);
        }
        finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }
            rs = null;
            cs = null;
            conn = null;
        }
    }

    public java.util.Collection getEmployeesWithPayments(java.lang.String locationCd) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_EMPLOYEES_WITH_PAYMENTS(?,?); END;");

            cs.setString(1, locationCd);
            cs.registerOutParameter(2, oracle.jdbc.OracleTypes.CURSOR);

            cs.execute();

            rs = (ResultSet) cs.getObject(2);

            Collection colEmpWithPayments = new ArrayList();

            while (rs.next()) {
                colEmpWithPayments.add(new Entry(rs.getString(1), rs.getString(2)));
            }
            return colEmpWithPayments;

        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getEmployeeWithPayments() method of RODDaoBean class.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;

        }
    }

    public java.util.Collection getPaymentsSummaryByEmp(java.lang.String locationCd) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_PAYMENTS_SUMMARY_BY_EMP(?,?,?,?); END;");

            cs.setString(1, locationCd);
            cs.registerOutParameter(2, oracle.jdbc.OracleTypes.CURSOR);
            cs.registerOutParameter(3, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(4, oracle.jdbc.OracleTypes.FLOAT);

            cs.execute();

            rs = (ResultSet) cs.getObject(2);

            ExpressCheckinTableVO expVO = new ExpressCheckinTableVO();

            expVO.setEmployeeId("XXXXXX"); //first object holds other payment total amount
            expVO.setLocalAppliedAmount(cs.getDouble(3));
            expVO.setUsdAppliedAmount(cs.getDouble(4));

            Collection colExpCheckin = new ArrayList();
            colExpCheckin.add(expVO);


            while (rs.next()) {
                expVO = new ExpressCheckinTableVO();
                expVO.setEmployeeId(rs.getString(1));
                expVO.setEmployeeName(rs.getString(2));
                expVO.setLocalExpectedAmount(rs.getDouble(3));
                expVO.setLocalAppliedAmount(rs.getDouble(4));
                expVO.setUsdExpectedAmount(rs.getDouble(5));
                expVO.setUsdAppliedAmount(rs.getDouble(6));
                
                expVO.setLocalExpectedAmount_COD(rs.getDouble(7));
                expVO.setLocalAppliedAmount_COD(rs.getDouble(8));
                expVO.setUsdExpectedAmount_COD(rs.getDouble(9));
                expVO.setUsdAppliedAmount_COD(rs.getDouble(10));

                expVO.setLocalExpectedAmount_FTC(rs.getDouble(11));
                expVO.setLocalAppliedAmount_FTC(rs.getDouble(12));
                expVO.setUsdExpectedAmount_FTC(rs.getDouble(13));
                expVO.setUsdAppliedAmount_FTC(rs.getDouble(14));
                
                expVO.setPrepaidLocalAmount(rs.getDouble(15));
                expVO.setPrepaidUsdAmount(rs.getDouble(16));
                expVO.setPoaLocalAmount(rs.getDouble(17));
                expVO.setPoaUsdAmount(rs.getDouble(18));
                expVO.setGroundLocalAmount(rs.getDouble(19));
                expVO.setGroundUsdAmount(rs.getDouble(20));
                expVO.setCanClose(rs.getInt(21) == 1);
                expVO.setClosed(rs.getInt(22) == 1);
                colExpCheckin.add(expVO);
            }
            return colExpCheckin;

        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getPaymentsSummaryByEmp() method of CommonOpsDaoBeanBean class.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;

        }
    }

    public int processEndOfDay(String locationCd, String employeeId) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_PROCESS_END_OF_DAY(?,?,?); END;");

            cs.setString(1, locationCd);
            cs.setString(2, employeeId);
            cs.registerOutParameter(3, oracle.jdbc.OracleTypes.INTEGER);

            cs.execute();

            return cs.getInt(3);
        } catch (SQLException e) {
            this.context.setRollbackOnly();
            throw new DAOException(e.toString() + " SQLException ocurred on processEndOfDay() method of RODDaoBean class.", e);
        } catch (NamingException e) {
            this.context.setRollbackOnly();
            throw new DAOException(e.toString() + " NamingException ocurred on processEndOfDay() method of RODDaoBean class.", e);
        } catch (Exception e) {
            this.context.setRollbackOnly();
            throw new DAOException(e.toString() + " Exception ocurred on processEndOfDay() method of RODDaoBean class.", e);
        } finally {
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
                throw new DAOException(e.toString() + " ocurred when trying to close callable statement on processEndOfDay() method of RODDaoBean class.", e);
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
                throw new DAOException(e.toString() + " ocurred when trying to close connection on processEndOfDay() method of RODDaoBean class.", e);
            }

            cs = null;
            conn = null;
        }
    }

    public int openEndOfDay(String locationCd, String employeeId, int openDeposits) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_OPEN_END_OF_DAY(?,NULL,?,?,?); END;");

            cs.setString(1, locationCd);
            cs.setString(2, employeeId);
            cs.registerOutParameter(3, oracle.jdbc.OracleTypes.INTEGER);
            cs.setInt(4, openDeposits);

            cs.execute();

            return cs.getInt(3);
        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on openEndOfDay() method of RODDaoBean class.", e);
        } finally {
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            cs = null;
            conn = null;

        }
    }


    public void insertCosmosScan(CosmosScanVO scanVO) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_INSERT_COSMOS_SCAN(?,?,?,?,?,?,?); END;");

            cs.setString(1, scanVO.getScanLocationCd());
            cs.setString(2, scanVO.getAwbNbr());
            cs.setString(3, scanVO.getTinUniqId());
            cs.setString(4, scanVO.getScanType());
            cs.setString(5, scanVO.getScanSeqNbr());
            cs.setTimestamp(6, new java.sql.Timestamp(scanVO.getScanDt().getTime()));
            cs.setString(7, scanVO.getCourierId());

            cs.execute();
        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocuerred on insertCosmosScan method of RODDaoBean class.", e);
        } finally {
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            cs = null;
            conn = null;

        }
    }

    public void reassignPayments(String oldEmployee, String newEmployee, String oldLocation, String newLocation, String reassEmployee, boolean moveRec, boolean movePrep, boolean movePoa, boolean moveGrn) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            Constants.logger.debug("\n\n ****** " + oldEmployee + newEmployee + oldLocation + newLocation + reassEmployee + moveRec + movePrep + movePoa + moveGrn);
            cs = conn.prepareCall("BEGIN SP_REASSIGN_PAYMENTS(?,?,?,?,?,?,?,?,?); END;");

            cs.setString(1, oldEmployee);
            cs.setString(2, newEmployee);
            cs.setString(3, oldLocation);
            cs.setString(4, newLocation);
            cs.setString(5, reassEmployee);
            cs.setInt(6, moveRec ? 1 : 0);
            cs.setInt(7, movePrep ? 1 : 0);
            cs.setInt(8, movePoa ? 1 : 0);
            cs.setInt(9, moveGrn ? 1 : 0);

            cs.execute();
        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocuerred on reassignPayments method of CommonOpsDaoBean class.", e);
        } finally {
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            cs = null;
            conn = null;

        }
    }

    public java.util.Collection validateTemplOverlaps(Integer templId) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_VALIDATE_TEMPL_OVERLAPS(?,?); END;");

            cs.setInt(1, templId.intValue());
            cs.registerOutParameter(2, oracle.jdbc.OracleTypes.CURSOR);

            cs.execute();

            rs = (ResultSet) cs.getObject(2);

            Collection colErrors = new ArrayList();

            while (rs.next()) {
                colErrors.add(rs.getString(1));
            }
            Constants.logger.debug("\n **** colErrors size => " + colErrors.size());
            return colErrors;

        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on validateTemplRules() method of RODDaoBean class.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;

        }
    }

    public Collection getExternalFilesImportingStatus(String empId) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_IMPORT_EXTERNAL_FILE_REPORT(?,?); END;");

            cs.setString(1, empId);
            cs.registerOutParameter(2, oracle.jdbc.OracleTypes.CURSOR);

            cs.execute();

            rs = (ResultSet) cs.getObject(2);
            Collection colDet = new ArrayList();
            while (rs.next()) {
                PymtImptLogVO pilVO = new PymtImptLogVO();
                pilVO.setImptId(new Integer(rs.getInt(1)));
                pilVO.setImptFileNm(rs.getString(2));
                pilVO.setImptDt(rs.getTimestamp(3));
                pilVO.setLocationCd(rs.getString(4));
                pilVO.setStatusCd(rs.getInt(5));
                pilVO.setMessage(rs.getString(6));

                colDet.add(pilVO);
            }
            return colDet;

        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getExternalFilesImportingStatus() method of CommonOpsDaoBean class.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
    }

    public Collection getComments(java.lang.String countryCd) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_GET_COMMENTS(?,?); END;");

            cs.setString(1, countryCd);
            cs.registerOutParameter(2, oracle.jdbc.OracleTypes.CURSOR);
            cs.execute();

            rs = (ResultSet) cs.getObject(2);
            Collection colDet = new ArrayList();

            while (rs.next()) {
                ChkinAgtCommentVO comment = new ChkinAgtCommentVO();
                comment.setCommentId(new Integer(rs.getInt(1)));
                comment.setCommentCd(rs.getString(2));
                comment.setCommentDesc(rs.getString(3));

                colDet.add(comment);
            }
            return colDet;

        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getComments(java.lang.String countryCd) method of CommonOpsDaoBean class.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
    }

    public Collection getDailyDtrcUpload(int dayOffSet) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        System.out.println("here in the commonopsdaobean.getdailyDTRCUpload method -----");
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_DTRC_UPLOAD(?,?); END;");

            cs.setInt(1, dayOffSet);
            cs.registerOutParameter(2, oracle.jdbc.OracleTypes.CURSOR);
            cs.execute();

            rs = (ResultSet) cs.getObject(2);
            Collection colDet = new ArrayList();

            while (rs.next()) {
                colDet.add(rs.getString(1));
            }

            return colDet;
        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getDailyDtrcUpload(int dayOffSet) method of CommonOpsDaoBean class.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
    }

    public void markWriteOff() throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_PUT_WRITE_OFF_STATUS; END;");
            cs.execute();
        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on markWriteOff() method of CommonOpsDaoBean class.", e);
        } finally {
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            cs = null;
            conn = null;

        }
    }

    public Collection getBatchesToAdmin(String locationCd, Date startDt, Date endDt) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_BATCHES_TO_ADMIN  (?,?,?,?); END;");
            cs.setString(1, locationCd);
            cs.setDate(2, (java.sql.Date) startDt);
            cs.setDate(3, (java.sql.Date) endDt);
            cs.registerOutParameter(4, oracle.jdbc.OracleTypes.CURSOR);

            cs.execute();

            rs = (ResultSet) cs.getObject(4);
            Collection colRec = new ArrayList();
            while (rs.next()) {
                DepositSlipTableVO rsVO = new DepositSlipTableVO();
                rsVO.setDepositSlipCd(rs.getInt(1));
                rsVO.setDepositSlipDt(rs.getDate(2));
                rsVO.setBankAccountCd(rs.getInt(3));
                rsVO.setDepositSlipNbr(rs.getString(4));
                rsVO.setSrcType(rs.getString(5));
                rsVO.setCurrencyCd(rs.getString(6));
                rsVO.setPymtType(rs.getString(7));
                rsVO.setDepositSlipTotAmt(rs.getDouble(8));
                rsVO.setActualAmt(rs.getDouble(9));
                rsVO.setBankAmt(rs.getDouble(10));
                rsVO.setComments(rs.getString(11));
                rsVO.setStatusId(rs.getInt(12));
                rsVO.setDepoDt(rs.getDate(13));
                rsVO.setBankDepoDt(rs.getDate(14));
                rsVO.setFedexDepositId(rs.getString(15));
                rsVO.setTemplId(rs.getInt(16));
                rsVO.setTemplCd(rs.getString(17));
                rsVO.setEodId(rs.getInt(18));

                rsVO.setBankAccountCdPrev(rsVO.getBankAccountCd());
                rsVO.setDepositSlipNbrPrev(rsVO.getDepositSlipNbr());
                rsVO.setActualAmtPrev(rsVO.getActualAmt());
                rsVO.setBankAmtPrev(rsVO.getBankAmt());
                rsVO.setStatusIdPrev(rsVO.getStatusId());
                rsVO.setDepoDtPrev(rsVO.getDepoDt());
                rsVO.setBankDepoDtPrev(rsVO.getBankDepoDt());

                colRec.add(rsVO);
            }
            return colRec;

        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getBatchesToAdmin() method of RODDaoBean class.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
    }

    public void changeDepoPaymentsDate(String locationCd, int depoId, String dt) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_CHANGE_DEPO_PAYMENTS_DATE(?,?,?); END;");


            cs.setString(1, locationCd);
            cs.setInt(2, depoId);
            cs.setString(3, dt);
            cs.execute();
        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on changeDepoPaymentsDate() method of RODDaoBean class.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
    }

    public void changePaymentsDate(String locationCd, String eodId, String toDt) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_CHANGE_PAYMENTS_DATE(?,?,?); END;");


            cs.setString(1, locationCd);
            cs.setString(2, eodId);
            cs.setString(3, toDt);
            cs.execute();
        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on changePaymentsDate() method of RODDaoBean class.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
    }

    public void openSpecificEndOfDay(String locationCd, String eodId) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_OPEN_END_OF_DAY (?,?,NULL,?,1); END;");


            cs.setString(1, locationCd);
            cs.setString(2, eodId);
            cs.registerOutParameter(3, oracle.jdbc.OracleTypes.INTEGER);
            cs.execute();
        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on openSpecificEndOfDay() method of RODDaoBean class.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
    }

    public void quickCollectLaters(String locationCd) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();

            StringBuffer sb = null;
            sb = new StringBuffer("UPDATE RECEIVABLES r\n");
            sb.append("SET STATUS_ID_NBR=4 ");
            sb.append("WHERE LOC_CD IN (SELECT LOC_CD FROM LOCATION WHERE LOC_CD=? OR PARNT_LOC_CD=?) ");
            sb.append("AND (TRACKING_STAT_CD=1 OR EMP_ID_NBR='000000') ");
            sb.append("AND (NVL(CASH_PYMT_AMT,0)+NVL(OTHER_PYMT_AMT,0))=0 ");
            sb.append("AND STATUS_ID_NBR<>1 ");

            cs = conn.prepareCall(sb.toString());
            cs.setString(1, locationCd);
            cs.setString(2, locationCd);
            cs.executeUpdate();

            sb = new StringBuffer("UPDATE RECEIVABLES r\n");
            sb.append("SET STATUS_ID_NBR=2, ");
            sb.append("	   EOD_DT=NULL ");
            sb.append("WHERE LOC_CD IN (SELECT LOC_CD FROM LOCATION WHERE LOC_CD=? OR PARNT_LOC_CD=?) ");
            sb.append("AND NVL(EOD_ID_NBR,0)=0 ");
            sb.append("AND (nvl(DEX16_CASH_PYMT_AMT,0)+nvl(DEX16_FGT_AMT,0)+nvl(DEX16_OTHER_PYMT_AMT,0))=0 ");
            sb.append("AND TRACKING_STAT_CD IN (2,3) ");
            sb.append("AND STATUS_ID_NBR=0 ");

            cs = conn.prepareCall(sb.toString());
            cs.setString(1, locationCd);
            cs.setString(2, locationCd);
            cs.executeUpdate();
        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on quickCollectLaters(String locationCd) method of CommonOpsDaoBean class.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
    }

    public void quickClear(String locationCd) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();

            StringBuffer sb = null;
            sb = new StringBuffer("UPDATE RECEIVABLES r\n");
            sb.append("SET STATUS_ID_NBR=1, ");
            sb.append("	   EOD_DT=NULL ");
            sb.append("WHERE LOC_CD IN (SELECT LOC_CD FROM LOCATION WHERE LOC_CD=? OR PARNT_LOC_CD=?) ");
            sb.append("AND NVL(EOD_ID_NBR,0)=0 ");
            sb.append("AND REC_AMT=(nvl(DEX16_CASH_PYMT_AMT,0)+nvl(DEX16_FGT_AMT,0)+nvl(DEX16_OTHER_PYMT_AMT,0)) ");
            sb.append("AND STATUS_ID_NBR=0 ");

            cs = conn.prepareCall(sb.toString());
            cs.setString(1, locationCd);
            cs.setString(2, locationCd);
            cs.executeUpdate();

            sb = new StringBuffer("UPDATE PREPAID r\n");
            sb.append("SET STATUS_CD=1, ");
            sb.append("	   EOD_DT=NULL ");
            sb.append("WHERE LOC_CD IN (SELECT LOC_CD FROM LOCATION WHERE LOC_CD=? OR PARNT_LOC_CD=?) ");
            sb.append("AND NVL(EOD_ID_NBR,0)=0 ");
            sb.append("AND (nvl(PUX16_CASH_PYMT_AMT,0)+nvl(PUX16_FGT_AMT,0)+nvl(PUX16_OTHER_PYMT_AMT,0)+nvl(PUX16_COUP_PYMT_AMT,0))>0 ");
            sb.append("AND STATUS_CD<>1 ");

            cs = conn.prepareCall(sb.toString());
            cs.setString(1, locationCd);
            cs.setString(2, locationCd);
            cs.executeUpdate();
        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on quickClear(String locationCd) method of CommonOpsDaoBean class.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }

    }

    /**
     * This method is used to move AWBs from Australia locations
     * ended in 'X' to SYDX. This method will be removed when
     * the "locations hierarchy"
     *
     * @throws DAOException
     */
    public void moveToSYDX() throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            StringBuffer sb = null;

            sb = new StringBuffer("UPDATE RECEIVABLES r\n");
            sb.append("SET LOC_CD='SYDX' ");
            sb.append("WHERE LOC_CD LIKE '%X' AND STATUS_ID_NBR<>1 AND LOC_CD IN (SELECT LOC_CD FROM LOCATION WHERE CNTRY_CD='AU') AND LOC_CD<>'SYDX'");

            cs = conn.prepareCall(sb.toString());
            cs.executeUpdate();

            sb = new StringBuffer("UPDATE PREPAID r\n");
            sb.append("SET LOC_CD='SYDX' ");
            sb.append("WHERE LOC_CD LIKE '%X' AND STATUS_CD<>1 AND LOC_CD IN (SELECT LOC_CD FROM LOCATION WHERE CNTRY_CD='AU') AND LOC_CD<>'SYDX'");

            cs = conn.prepareCall(sb.toString());
            cs.executeUpdate();
        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on moveToSYDX() method of CommonOpsDaoBean class.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
    }

    public int getSplitCountTable(String locationCd, String courier, String operation) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_SPLIT_CURRENCY_CHECK(?,?,?,?); END;");


            cs.setString(1, locationCd);
            cs.setString(2, courier);
            cs.setString(3, operation);
            cs.registerOutParameter(4, oracle.jdbc.OracleTypes.INTEGER);
            cs.execute();

            return cs.getInt(4);

        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getSplitCountTable(String locationCd, String courier, String operation) method of CommonOpsDaoBean class.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
    }


    /**
     * Method to help to show data of Ground and Acillary Outbound in the new summary screen
     *
     * @param locationCd
     * @return Collection of payments
     * @throws DAOException
     */
    public java.util.Collection getMorePaymentsSummaryByEmp(java.lang.String locationCd) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        ResultSet rs = null;
        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_MORE_SUMMARY_BY_EMP(?,?,?,?); END;");

            cs.setString(1, locationCd);
            cs.registerOutParameter(2, oracle.jdbc.OracleTypes.CURSOR);
            cs.registerOutParameter(3, oracle.jdbc.OracleTypes.FLOAT);
            cs.registerOutParameter(4, oracle.jdbc.OracleTypes.FLOAT);

            cs.execute();

            rs = (ResultSet) cs.getObject(2);

            ExpressCheckinTableVO expVO = new ExpressCheckinTableVO();

            expVO.setEmployeeId("XXXXXX"); //first object holds other payment total amount
            expVO.setLocalAppliedAmount(cs.getDouble(3));
            expVO.setUsdAppliedAmount(cs.getDouble(4));

            Collection colExpCheckin = new ArrayList();
            colExpCheckin.add(expVO);


            while (rs.next()) {
                expVO = new ExpressCheckinTableVO();
                expVO.setEmployeeId(rs.getString(1));
                expVO.setEmployeeName(rs.getString(2));
                expVO.setGroundLocalAmount(rs.getDouble(3));
                expVO.setGroundUsdAmount(rs.getDouble(4));
                expVO.setCanClose(rs.getInt(5) == 1);
                expVO.setClosed(rs.getInt(6) == 1);
                colExpCheckin.add(expVO);
            }
            return colExpCheckin;

        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getMorePaymentsSummaryByEmp() method of CommonOpsDaoBean class.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;

        }
    }

    public java.util.HashMap getCreditCardPymt(String entityCd, Date startDt, Date endDt) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;

        ResultSet rsRec = null;
        ResultSet rsPre = null;
        ResultSet rsOAC = null;
        ResultSet rsPOA = null;
        ResultSet rsOther = null;
        ResultSet rsGround = null;

        try {
           /* Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_CREDIT_CARD_PYMT(?,?,?,?,?,?,?,?,?); END;");

            SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");

            Constants.logger.debug("------>getCreditCardPymt() value of startDt : " + sdf.format(startDt));

            cs.setString(1, entityCd);
            if (startDt != null)
                cs.setString(2, sdf.format(startDt));
            else
                cs.setString(2, null);
            if (endDt != null)
                cs.setString(3, sdf.format(endDt));
            else
                cs.setString(3, null);
            cs.registerOutParameter(4, oracle.jdbc.OracleTypes.CURSOR);
            cs.registerOutParameter(5, oracle.jdbc.OracleTypes.CURSOR);
            cs.registerOutParameter(6, oracle.jdbc.OracleTypes.CURSOR);
            cs.registerOutParameter(7, oracle.jdbc.OracleTypes.CURSOR);
            cs.registerOutParameter(8, oracle.jdbc.OracleTypes.CURSOR);
            cs.registerOutParameter(9, oracle.jdbc.OracleTypes.CURSOR);

            cs.execute();
            Constants.logger.debug("------>getCreditCardPymt() after calling SP");

            //Get the cursor for receivables
            rsRec = (ResultSet) cs.getObject(4);

            //Get the cursor for Prepaid
            rsPre = (ResultSet) cs.getObject(5);

            //Get the cursor for OAC
            rsOAC = (ResultSet) cs.getObject(6);

            //Get the cursor for POA
            rsPOA = (ResultSet) cs.getObject(7);

            //Get the cursor for Other
            rsOther = (ResultSet) cs.getObject(8);

            //Get the cursor for Ground
            rsGround = (ResultSet) cs.getObject(9);

            Collection colRec = new ArrayList();
            Collection colPre = new ArrayList();
            Collection colOAC = new ArrayList();
            Collection colPOA = new ArrayList();
            Collection colOther = new ArrayList();
            Collection colGround = new ArrayList();

            CreditCardPymtReportVO creditCardVO = null;
            HashMap ccpymt = new HashMap();

            while (rsRec.next()) {
                creditCardVO = new CreditCardPymtReportVO();
                creditCardVO.setLocationCd(rsRec.getString(1));
                creditCardVO.setBatchId(rsRec.getString(2));
                creditCardVO.setAwbNbr(rsRec.getString(3));
                creditCardVO.setCloseDt(rsRec.getString(4));
                creditCardVO.setPaymentAmt(rsRec.getString(6));
                creditCardVO.setPaymentType(rsRec.getString(7));
                creditCardVO.setOtherNbr(rsRec.getString(8));
                creditCardVO.setComment(rsRec.getString(9));

                colRec.add(creditCardVO);
            }

            while (rsPre.next()) {
                creditCardVO = new CreditCardPymtReportVO();
                creditCardVO.setLocationCd(rsPre.getString(1));
                creditCardVO.setBatchId(rsPre.getString(2));
                creditCardVO.setAwbNbr(rsPre.getString(3));
                creditCardVO.setCloseDt(rsPre.getString(4));
                creditCardVO.setPaymentAmt(rsPre.getString(6));
                creditCardVO.setPaymentType(rsPre.getString(7));
                creditCardVO.setOtherNbr(rsPre.getString(8));
                creditCardVO.setComment(rsPre.getString(9));

                colPre.add(creditCardVO);
            }

            while (rsOAC.next()) {
                creditCardVO = new CreditCardPymtReportVO();
                creditCardVO.setLocationCd(rsOAC.getString(1));
                creditCardVO.setBatchId(rsOAC.getString(2));
                creditCardVO.setAwbNbr(rsOAC.getString(3));
                creditCardVO.setCloseDt(rsOAC.getString(4));
                creditCardVO.setPaymentAmt(rsOAC.getString(6));
                creditCardVO.setPaymentType(rsOAC.getString(7));
                creditCardVO.setOtherNbr(rsOAC.getString(8));
                creditCardVO.setComment(rsOAC.getString(9));

                colOAC.add(creditCardVO);
            }

            while (rsPOA.next()) {
                creditCardVO = new CreditCardPymtReportVO();
                creditCardVO.setLocationCd(rsPOA.getString(1));
                creditCardVO.setBatchId(rsPOA.getString(2));
                creditCardVO.setAcctNbr(rsPOA.getString(3));
                creditCardVO.setCloseDt(rsPOA.getString(4));
                creditCardVO.setPaymentAmt(rsPOA.getString(6));
                creditCardVO.setPaymentType(rsPOA.getString(7));
                creditCardVO.setOtherNbr(rsPOA.getString(8));
                creditCardVO.setComment(rsPOA.getString(9));

                colPOA.add(creditCardVO);
            }

            while (rsOther.next()) {
                creditCardVO = new CreditCardPymtReportVO();
                creditCardVO.setLocationCd(rsOther.getString(1));
                creditCardVO.setBatchId(rsOther.getString(2));
                creditCardVO.setDescription(rsOther.getString(3));
                creditCardVO.setCloseDt(rsOther.getString(4));
                creditCardVO.setPaymentAmt(rsOther.getString(6));
                creditCardVO.setPaymentType(rsOther.getString(7));
                creditCardVO.setOtherNbr(rsOther.getString(8));
                creditCardVO.setComment(rsOther.getString(9));

                colOther.add(creditCardVO);
            }

            while (rsGround.next()) {
                creditCardVO = new CreditCardPymtReportVO();
                creditCardVO.setLocationCd(rsGround.getString(1));
                creditCardVO.setBatchId(rsGround.getString(2));
                creditCardVO.setGndTkNbr(rsGround.getString(3));
                creditCardVO.setCloseDt(rsGround.getString(4));
                creditCardVO.setPaymentAmt(rsGround.getString(6));
                creditCardVO.setPaymentType(rsGround.getString(7));
                creditCardVO.setOtherNbr(rsGround.getString(8));
                creditCardVO.setComment(rsGround.getString(9));

                colGround.add(creditCardVO);
            }

            Constants.logger.debug("------>getCreditCardPymt() Size of Receivables List:" + colRec.size());
            Constants.logger.debug("------>getCreditCardPymt() Size of Prepaid List:" + colPre.size());

            //Adding receivables to HashMap
            ccpymt.put("RECEIVABLES", colRec);
            //Adding prepaid to HashMap
            ccpymt.put("PREPAID", colPre);
            //Adding OAC to HashMap
            ccpymt.put("OAC", colOAC);
            //Adding POA to HashMap
            ccpymt.put("POA", colPOA);
            //Adding OTHER to HashMap
            ccpymt.put("OTHER", colOther);
            //Adding GROUND to HashMap
            ccpymt.put("GROUND", colGround);

            return ccpymt;

        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getCreditCardPymt() method of CommonOpsDaoBean class.", e);
        } finally {
            try {
                if (rsRec != null) rsRec.close();
                if (rsPre != null) rsPre.close();
                if (rsOAC != null) rsOAC.close();
                if (rsPOA != null) rsPOA.close();
                if (rsOther != null) rsOther.close();
                if (rsGround != null) rsGround.close();

            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rsRec = null;
            rsPre = null;
            rsOAC = null;
            rsPOA = null;
            rsOther = null;
            rsGround = null;
            cs = null;
            conn = null;

        }
    }

    public void saveCreditCardPymtLog(String employeeId, String entityCd, String locationCd, String startDateTxt, String endDateTxt) throws DAOException {
        Connection conn = null;
        CallableStatement cs = null;
        try {
           /* Hashtable prop=new Hashtable();
           prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);
           prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/

            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_CREDIT_CARD_PYMT_REPORT_LOG(?,?,?,?,?); END;");
            cs.setString(1, employeeId);
            cs.setString(2, entityCd);
            cs.setString(3, locationCd);
            cs.setString(4, startDateTxt);
            cs.setString(5, endDateTxt);
            cs.execute();

        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on saveCreditCardPymtLog(String employeeId, String entityCd, String locationCd, Date startDate, Date endDate) method of CommonOpsDaoBean class.", e);
        } finally {
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            cs = null;
            conn = null;
        }
    }

    public java.util.Collection getEntities() throws DAOException {
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            /*Hashtable prop=new Hashtable();             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();
            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            ps = conn.prepareStatement("SELECT DISTINCT ENT_CD FROM ENTITY ORDER BY ENT_CD");


            rs = ps.executeQuery();

            String ent = null;

            Collection colEnt = new ArrayList();

            while (rs.next()) {
                ent = rs.getString(1);
                colEnt.add(ent);
            }
            return colEnt;

        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getEntities() method of CommonOpsDaoBean class.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (ps != null) ps.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            ps = null;
            conn = null;
        }
    }

    public java.util.Collection getEntities(String employeeId) throws DAOException {
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            /*Hashtable prop=new Hashtable();
            prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);
            prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext c= new InitialContext();

            DataSource ds = (DataSource) c.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            ps = conn.prepareStatement("SELECT DISTINCT e.ENT_CD FROM EMP_X_LOCATION_X_ROLE r, ENTITY e WHERE r.LOC_CD=e.LOC_CD AND r.ROLE_ID_NBR=4 AND r.EMP_ID_NBR=?");
            ps.setString(1, employeeId);

            rs = ps.executeQuery();

            String ent = null;

            Collection colEnt = new ArrayList();

            while (rs.next()) {
                ent = rs.getString(1);
                colEnt.add(ent);
            }
            return colEnt;

        } catch (Exception e) {
            throw new DAOException(e.toString() + " ocurred on getEntities(" + employeeId + ") method of CommonOpsDaoBean class.", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (ps != null) ps.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            ps = null;
            conn = null;
        }
    }


}
