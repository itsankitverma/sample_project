package com.fedex.lacitd.cashcontrol.datatier.dao;

import com.fedex.lacitd.cashcontrol.biztier.common.Constants;
import com.fedex.lacitd.cashcontrol.biztier.common.SupportedCurrencyVO;
import com.fedex.lacitd.cashcontrol.datatier.exception.DAOException;

import javax.naming.InitialContext;
import javax.sql.DataSource;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
//import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Properties;

/**
 * Created Nov 8, 2002 4:58:14 PM
 * Code generated by the Forte For Java EJB Builder
 *
 * @author ccardenas
 */


public class SystemUtilsDaoBean implements javax.ejb.SessionBean {
    private javax.ejb.SessionContext context;


    /**
     * @see javax.ejb.SessionBean#setSessionContext(javax.ejb.SessionContext)
     */
    public void setSessionContext(javax.ejb.SessionContext aContext) {
        context = aContext;
    }


    /**
     * @see javax.ejb.SessionBean#ejbActivate()
     */
    public void ejbActivate() {

    }


    /**
     * @see javax.ejb.SessionBean#ejbPassivate()
     */
    public void ejbPassivate() {

    }


    /**
     * @see javax.ejb.SessionBean#ejbRemove()
     */
    public void ejbRemove() {

    }


    /**
     * See section 7.10.3 of the EJB 2.0 specification
     */
    public void ejbCreate() {

    }

    public int login(String username, String pwd) throws DAOException {
        CallableStatement cs = null;
        Connection conn = null;
        try {
            InitialContext ic = new InitialContext();
            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);

            conn = ds.getConnection();

            cs = conn.prepareCall("BEGIN SP_LOGIN_USER(?,?,?); END;");

            cs.setString(1, username);
            cs.setString(2, pwd);
            cs.registerOutParameter(3, oracle.jdbc.OracleTypes.INTEGER);

            cs.execute();

            return cs.getInt(3);

        } catch (Exception e) {
            throw new DAOException(e.getClass().getName() + " has ocurred in the login() method of the SystemUtilsDaoBean class", e);
        } finally {
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }
            cs = null;
            conn = null;
        }


    }

    public int login(String username) throws DAOException {
        CallableStatement cs = null;
        Connection conn = null;
        try {
            /*Hashtable prop=new Hashtable();
            prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);
            prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/

            InitialContext ic= new InitialContext();

            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);

            conn = ds.getConnection();

            cs = conn.prepareCall("BEGIN GCCS_SCHEMA.SP_LOGIN_USER_WSSO(?,?); END;");
            System.out.println("username=="+username);
            cs.setString(1, username);
            cs.registerOutParameter(2, oracle.jdbc.OracleTypes.INTEGER);

            cs.execute();

            return cs.getInt(2);

        } catch (Exception e) {
            throw new DAOException(e.getClass().getName() + " has ocurred in the loginnn() method of the SystemUtilsDaoBean class", e);
        } finally {
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }
            cs = null;
            conn = null;
        }


    }


    public Collection getCountryCurrencies(String countryCodePk) throws DAOException {
        CallableStatement cs = null;
        Connection conn = null;
        ResultSet rs = null;
        try {
           /*Hashtable prop=new Hashtable();
             prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);
             prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);
            */
            InitialContext ic= new InitialContext();
            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);

            conn = ds.getConnection();

            cs = conn.prepareCall("BEGIN SP_GET_CURRENCIES_BY_COUNTRY(?,?); END;");

            cs.setString(1, countryCodePk);
            cs.registerOutParameter(2, oracle.jdbc.OracleTypes.CURSOR);

            cs.execute();

            rs = (ResultSet) cs.getObject(2);

            Collection colResults = new ArrayList();

            while (rs.next()) {
                SupportedCurrencyVO sc = new SupportedCurrencyVO();
                sc.setCurrencyCode(rs.getString(1));
                sc.setCurrencyName(rs.getString(2));
                sc.setCurrencySymbol(rs.getString(3));
                sc.setDefaultCurrency(rs.getInt(4) == 1);
                colResults.add(sc);
            }
            return colResults;
        } catch (Exception e) {
            throw new DAOException(e.getClass().getName() + " has ocurred in the login() method of the SystemUtilsDaoBean class", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }
    }

    public Properties getProperties(String category) throws DAOException {
        Properties prop = new Properties();
        CallableStatement cs = null;
        Connection conn = null;
        ResultSet rs = null;
        try {
            /*Hashtable p=new Hashtable();
            p.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);
            p.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/

            InitialContext ic= new InitialContext();

            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("BEGIN SP_GET_PARAMETERS(?,?); END;");
            //System.out.println("category=="+category);
            cs.setString(1, category);
            cs.registerOutParameter(2, oracle.jdbc.OracleTypes.CURSOR);
            cs.execute();
            rs = (ResultSet) cs.getObject(2);

            while (rs.next()) {
            	//System.out.println("in rs.next...");
            	//System.out.println("rs.getString(PARM_NM)=="+rs.getString("PARM_NM"));
            	//System.out.println("rs.getString(PARM_VALUE_CD)=="+rs.getString("PARM_VALUE_CD"));
                prop.setProperty(rs.getString("PARM_NM"), ((rs.getString("PARM_VALUE_CD") == null)? "" : rs.getString("PARM_VALUE_CD")));
            }

        } catch (Exception e) {
            throw new DAOException(e.getClass().getName() + " has ocurredDDD in the getProperties(String category) method of the SystemUtilsDaoBean class", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }

        return prop;
    }

    public String getCheckDecodeJS(String countryCd) throws DAOException {
        CallableStatement cs = null;
        Connection conn = null;
        ResultSet rs = null;
        try {
            /*Hashtable prop=new Hashtable();
            prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);
            prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/
            InitialContext ic= new InitialContext();
            
            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();
            cs = conn.prepareCall("SELECT CHECK_DECODE_JS_CD FROM COUNTRY WHERE CNTRY_CD = ?");
            cs.setString(1, countryCd);

            rs = cs.executeQuery();

            if (rs.next()) {
                return rs.getString(1);
            } else {
                return null;
            }

        } catch (Exception e) {
            throw new DAOException(e.getClass().getName() + " has ocurred in the getProperties(String category) method of the SystemUtilsDaoBean class", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {
            }
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }

            rs = null;
            cs = null;
            conn = null;
        }

    }

    /**
     * Method to delete data fom table COSMOS_SCAN older than 180 days.
     *
     * @throws DAOException
     */
    public void runPurgeCosmosScans() throws DAOException {
        CallableStatement cs = null;
        Connection conn = null;

        try {

            InitialContext ctx = new InitialContext();
            DataSource ds = (DataSource) ctx.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();

            cs = conn.prepareCall("BEGIN SP_PURGE_COSMOS_SCAN; END;");
            cs.execute();

        } catch (Exception e) {
            throw new DAOException(e.getClass().getName() + " has ocurred in the runPurgeCosmosScans(String purgingDays) method of the SystemUtilsDaoBean class", e);
        } finally {
            try {
                if (cs != null) cs.close();
            } catch (Exception e) {
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
            }
            cs = null;
            conn = null;
        }
    }
    //Miscellaneous enhancements
    //Station manager's role_id_nbr= 3 
	public List getEmailCertificationAddresses(int role_id_nbr)
			throws DAOException {
		PreparedStatement ps = null;
		Connection conn = null;
		ResultSet rs = null;
		ArrayList arraylist = new ArrayList();
		// Queries
		String EmailAddresses_SQL = "SELECT email_desc FROM employee WHERE emp_id_nbr IN (SELECT emp_id_nbr FROM emp_x_location_x_role WHERE role_id_nbr="
				+ role_id_nbr + ")";
		try {
			InitialContext ctx = new InitialContext();
			DataSource ds = (DataSource) ctx.lookup(Constants.CCSDataSource);
			conn = ds.getConnection();
			ps = conn.prepareCall(EmailAddresses_SQL);
			rs = ps.executeQuery();
			// Get email addresses from result set
			while (rs.next()) {
				String email_Address = rs.getString("EMAIL_DESC");
				arraylist.add(email_Address);
			}
			return arraylist;
		} catch (Exception e) {
			throw new DAOException(
					e.getClass().getName()
							+ " has ocurred in the getEmailCertificationAddresses() method of the SystemUtilsDaoBean class",
					e);
		} finally {
			try {
				if (ps != null)
					ps.close();
			} catch (Exception e) {
			}
			try {
				if (conn != null)
					conn.close();
			} catch (Exception e) {
			}
			ps = null;
			conn = null;
		}
	}

    /**
     *  Method to get the URLS and roles to control access to the application
     * @return Hashmap of URLS and Roles
     * @throws DAOException
     */
    public HashMap getUrlsAndRoles() throws DAOException {
        HashMap urlsRoles     = new HashMap();
        Collection roles      = null;
        PreparedStatement ps = null;
        CallableStatement cs = null;
        ResultSet rsURL;
        ResultSet rsRoles;
        Connection conn = null;
        String urlAddrId;
        String urlAddrDesc;

        String gotURL;
        String gotRoles;
        Integer roleIdNbr;
        try {
            /*Hashtable prop=new Hashtable();
            prop.put(Context.SECURITY_PRINCIPAL,Constants.WLUSER);
            prop.put(Context.SECURITY_CREDENTIALS,Constants.WLPWD);*/

            InitialContext ic= new InitialContext();

            DataSource ds = (DataSource) ic.lookup(Constants.CCSDataSource);
            conn = ds.getConnection();

            //Queries
            gotURL="SELECT a.url_addr_desc, a.url_site_desc FROM access_url a ";
            gotRoles="SELECT ur.role_id_nbr FROM ACCESS_URL u, ACCESS_URL_ROLE ur " +
                     "WHERE u.url_addr_desc=ur.url_addr_desc and ur.url_addr_desc=? ";

            //Get urls
            ps = conn.prepareCall(gotURL);
            ps.executeQuery();

            rsURL = ps.executeQuery();

            //Get url from result set
            while(rsURL.next()){
               urlAddrId      = rsURL.getString("url_addr_desc");
               urlAddrDesc    = rsURL.getString("url_site_desc");

               //Get urls
                cs = conn.prepareCall(gotRoles);
                cs.setString(1,urlAddrId);

                rsRoles=cs.executeQuery();

                //Get roles from result set
                roles=new ArrayList();
                while(rsRoles.next()){
                    roleIdNbr = new Integer(rsRoles.getInt("role_id_nbr"));
                    roles.add(roleIdNbr);
                }
              //Put into Hasmap the url and role list
              urlsRoles.put(urlAddrId,roles);
            }

            return urlsRoles;

        } catch (Exception e) {
            throw new DAOException(e.getClass().getName() + " has ocurred in the getUrlsAndRoles() method of the SystemUtilsDaoBean class", e);
        } finally {
            try {
                if (ps != null) ps.close();
            } catch (Exception e) {
                throw new DAOException(e.getClass().getName() + " has ocurred in the getUrlsAndRoles() method of the SystemUtilsDaoBean class when try to close CallableStatement.", e);
            }
            try {
                if (conn != null) conn.close();
            } catch (Exception e) {
                throw new DAOException(e.getClass().getName() + " has ocurred in the getUrlsAndRoles() method of the SystemUtilsDaoBean class when try to close DB Connection.", e);
            }
            ps = null;
            conn = null;
        }
    }
}//Finish class
