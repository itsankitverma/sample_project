package com.fedex.lacitd.cashcontrol.datatier.dao;

import com.fedex.lacitd.cashcontrol.biztier.common.TotalSummaryVO;
import com.fedex.lacitd.cashcontrol.datatier.exception.DAOException;

import java.util.Collection;
import java.util.Hashtable;

/**
 * Created 10-07-2002 03:27:43 PM
 * Code generated by the Forte For Java EJB Builder
 *
 * @author ccardenas
 */

public interface RODDaoLocal extends javax.ejb.EJBLocalObject {
    public Collection getAwbToQueryCosmos(java.lang.String locationCodePk, java.lang.String employeeCodePk) throws DAOException;

    public Hashtable getCourierCashRecapTable(String locationCd, String employeeId, String currencyCode, Integer pageNumber, Integer rowsByPage, String sortColumn, String sortDirection) throws DAOException;

    public Collection getAllRecStatus() throws DAOException;

    public Collection getInvoicesByAwb(String awbNumber) throws DAOException;

    public Collection getCouriersWithPendents(String location) throws DAOException;

    public Collection getAwbToQuerySTAT44() throws DAOException;

    public boolean existsFileProcessed(String fileName) throws DAOException;

    public Collection getRodFilesImportingStatus(String empId) throws DAOException;

    public void insertRODFileProcLog(com.fedex.lacitd.cashcontrol.datatier.valueobject.RodFileProcLogVO rodVO) throws DAOException;

    public boolean existsRecDuplicates(com.fedex.lacitd.cashcontrol.datatier.valueobject.ReceivablesVO recVO) throws DAOException;

    public Collection getRODUsedCurrencies(String locationCd, String employeeId) throws DAOException;

    public void runInCageExceptionsTask() throws DAOException;

    public Collection applyRODScans(Collection colChanges) throws DAOException;

    public Collection getRodFilesImportingDetails(int logId) throws DAOException;

    public Hashtable getSplitCourierCashRecapTable(String locationCd, String employeeId, Integer pageNumber, Integer rowsByPage, String sortColumn, String sortDirection) throws DAOException;

    public Collection applyPaymentToInvoices(String courierId, String locationCd, String countryCd, String paymentCurrency, int paymentType, String otherDocNbr, boolean isCash, boolean isFindByAWB, Collection invoices) throws DAOException;

    public TotalSummaryVO getRODDetailsTotal(String locationCd, String employeeId, String currencyCode, Integer pageNumber, Integer rowsByPage, String sortColumn, String sortDirection) throws DAOException;

    public TotalSummaryVO getRODDetailsSplitTotal(String locationCd, String employeeId, Integer pageNumber, Integer rowsByPage, String sortColumn, String sortDirection) throws DAOException;
}

