package com.fedex.lacitd.cashcontrol.datatier.dao;

import com.fedex.lacitd.cashcontrol.datatier.exception.DAOException;

import java.util.Collection;
import java.util.Date;

/**
 * Created 18/11/2003 16:01:05
 * Code generated by the Sun ONE Studio EJB Builder
 *
 * @author ccardenas
 */

public interface CommonOpsDaoLocal extends javax.ejb.EJBLocalObject {
    public boolean closeCourier(java.lang.String checkInEmpCodePk, java.lang.String locationCodePk, java.lang.String employeeCodePk) throws com.fedex.lacitd.cashcontrol.datatier.exception.DAOException;

    public int processEndOfDay(String locationCodePk, String employeeCodePk) throws DAOException;

    public int openEndOfDay(String locationCd, String employeeId, int openDeposits) throws DAOException;

    public Collection getPaymentsSummaryByEmp(java.lang.String locationCodePk) throws DAOException;

    public int existsEmployeeLocation(String loc, String emp) throws DAOException;

    public java.util.Collection getBankAccByLocation(String locationCodePk) throws DAOException;

    public java.util.Collection getCreditCardPaymentsBatchs(String locationCd) throws DAOException;

    public java.util.Hashtable getDepositSlipReport(String locationCodePk, Integer pageNumber) throws DAOException;

    public java.util.Collection getEmployeesWithPayments(java.lang.String locationCd) throws DAOException;

    public void assignBankReference(int depositId) throws DAOException;

    public void getAssingDepositSlipNumber(Collection depos) throws DAOException;

    public void insertCosmosScan(com.fedex.lacitd.cashcontrol.datatier.valueobject.CosmosScanVO scanVO) throws DAOException;

    public java.util.Collection validateTemplOverlaps(Integer templId) throws DAOException;

    public Collection getExternalFilesImportingStatus(String empId) throws DAOException;

    public Collection getComments(java.lang.String countryCd) throws DAOException;

    public void markWriteOff() throws DAOException;

    public Collection getDailyDtrcUpload(int dayOffSet) throws DAOException;

    public Collection getBatchesToAdmin(String locationCd, Date startDt, Date endDt) throws DAOException;

    public void changePaymentsDate(String locationCd, String eodId, String toDt) throws DAOException;

    public void openSpecificEndOfDay(String locationCd, String eodId) throws DAOException;

    public void changeDepoPaymentsDate(String locationCd, int depoId, String dt) throws DAOException;

    public void quickClear(String locationCd) throws DAOException;

    public void quickCollectLaters(String locationCd) throws DAOException;

    public void moveToSYDX() throws DAOException;

    public void reassignPayments(String oldEmployee, String newEmployee, String oldLocation, String newLocation, String reassEmployee, boolean moveRec, boolean movePrep, boolean movePoa, boolean moveGrn) throws DAOException;

    public int getSplitCountTable(String locationCd, String courier, String operation) throws DAOException;

    public Collection getMorePaymentsSummaryByEmp(String locationCd) throws DAOException;

    public java.util.HashMap getCreditCardPymt(String entityCd, Date startDt, Date endDt) throws DAOException;

    public void saveCreditCardPymtLog(String employeeId, String entityCd, String locationCd, String startDateTxt, String endDateTxt) throws DAOException;

    public Collection getEntities() throws DAOException;

    public Collection getEntities(String employeeId) throws DAOException;
}

