package com.fedex.lacitd.cashcontrol.biztier.facades;

import com.fedex.lacitd.cashcontrol.biztier.common.CountryConfigVO;
import com.fedex.lacitd.cashcontrol.biztier.common.EntityAcctAdminVO;
import com.fedex.lacitd.cashcontrol.biztier.common.EntityAdminVO;
import com.fedex.lacitd.cashcontrol.biztier.common.StationsAdminVO;
import com.fedex.lacitd.cashcontrol.biztier.exception.BizDelegateException;
import com.fedex.lacitd.cashcontrol.biztier.exception.FacadeException;
import com.fedex.lacitd.cashcontrol.datatier.valueobject.*;

import java.rmi.RemoteException;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

/**
 * Created Apr 21, 2003 12:27:31 PM
 * Code generated by the Forte For Java EJB Builder
 *
 * @author ccardenas
 */

public interface AdminFacade extends javax.ejb.EJBObject {
    public Collection getUserProfileToAdmin(String country_cd, String locCd) throws java.rmi.RemoteException, FacadeException;

    public Collection getAllCountry() throws java.rmi.RemoteException, FacadeException;

    public void addEmployee(EmployeeVO employee, EmpXLocationXRoleVO empLocRole) throws java.rmi.RemoteException, FacadeException;

    public void updateEmployee(EmployeeVO employee) throws java.rmi.RemoteException, FacadeException;

    public void deleteUser(String userId, String countryCd) throws java.rmi.RemoteException, FacadeException;

    public void deleteUserPermanently(String userId) throws java.rmi.RemoteException, FacadeException;

    public void disableUser(String userId) throws java.rmi.RemoteException, FacadeException;

    public void addUser(com.fedex.lacitd.cashcontrol.datatier.valueobject.EmployeeVO employee, com.fedex.lacitd.cashcontrol.datatier.valueobject.EmpXLocationXRoleVO empLocRole) throws java.rmi.RemoteException, FacadeException;

    public Collection getAllRoles() throws java.rmi.RemoteException, java.rmi.RemoteException, FacadeException;

    public Collection getLocationsByCountry(String countryCd) throws java.rmi.RemoteException, FacadeException;

    public void addLocationRole(com.fedex.lacitd.cashcontrol.datatier.valueobject.EmpXLocationXRoleVO empLocRole) throws java.rmi.RemoteException, com.fedex.lacitd.cashcontrol.biztier.exception.FacadeException;

    public EmployeeVO getEmployee(String userId) throws java.rmi.RemoteException, FacadeException;

    public void deleteLocation(String userId, String locationCd) throws java.rmi.RemoteException, FacadeException;

    public void deleteRole(String userId, String locationCd, java.lang.Integer roleId) throws java.rmi.RemoteException, FacadeException;

    public Collection getLocationsByCountryEmployee(String country, String userId) throws java.rmi.RemoteException, FacadeException;

    public LocationVO getLocation(String locationCd) throws java.rmi.RemoteException, FacadeException;

    public void updateLocation(LocationVO location, String inCageFlag, String rihFlag) throws java.rmi.RemoteException, FacadeException;

    public void updateCountryCurrency(CountryCurrencyVO countryCurrency, String operation) throws java.rmi.RemoteException, FacadeException;

    public CountryConfigVO getCountryCurrency(String countryCd) throws java.rmi.RemoteException, FacadeException;

    public Collection getAllLocations() throws java.rmi.RemoteException, FacadeException;

    public String getCodedPassword(String employeeId, String password) throws java.rmi.RemoteException, FacadeException;

    public Collection getEmployeesByRole(Integer roleId) throws java.rmi.RemoteException, FacadeException;

    public Collection getAdminEmployees(String countryCd) throws java.rmi.RemoteException, FacadeException;

    public Collection getBankAccounts(String country, Integer bank, String location) throws java.rmi.RemoteException, FacadeException;

    public void saveBankAccount(BankAccVO bankAccount, Collection locations) throws java.rmi.RemoteException, FacadeException;

    public void deleteAccount(Integer accountCd) throws java.rmi.RemoteException, FacadeException;

    public Collection getLocationsForAdminCountryRole(String employeeId, Integer roleId) throws java.rmi.RemoteException, FacadeException;

    public Collection getCountriesForAdminCountryRole(String employeeId, Integer roleId) throws java.rmi.RemoteException, FacadeException;

    public void revokeEmployee(List employeeToRevokeList, String adminId) throws java.rmi.RemoteException, FacadeException;

    public HashMap getAdminTableByTableName(String table) throws FacadeException, RemoteException;

    public Collection getDataForTableAdmin(String sql, String tableName, int pageNumber, String sqlCount) throws FacadeException, RemoteException;

    public Collection getRow(String primaryKey, String table) throws FacadeException, RemoteException;

    public void updateAdminMainTable(Collection columnToUpdate) throws FacadeException, RemoteException;

    public Collection getEntityPSActiveEnt(String oper) throws FacadeException, RemoteException;

    public Collection getCashInBankPSUpload(String ent) throws FacadeException, RemoteException;

    public Collection getWriteOffPSUpload(String ent) throws FacadeException, RemoteException;

    public void updateCountryFlags(String countryCd, int dtrcUpldFlg, int psCashUpldFlg, int psWoffUpldFlg, String psOperId) throws FacadeException, RemoteException;

    public Date getNextClosingDate() throws FacadeException, RemoteException;

    public void updateTasks(TasksVO tasks) throws FacadeException, RemoteException;

    public TasksVO getTasks(Integer tasksId) throws FacadeException, RemoteException;

    public Collection getAllTables() throws FacadeException, RemoteException;

    public Collection getAllAdminTables() throws FacadeException, RemoteException;

    public Collection getAllColumnsOfTable(String name) throws FacadeException, RemoteException;

    public Collection getColumnsOfAdminTable(String name) throws FacadeException, RemoteException;

    public void createAdminTable(String name) throws FacadeException, RemoteException;

    public void updateAdminTableColumn(String table, String column, String flag, String value) throws FacadeException, RemoteException;

    public void removeAdminTableColumn(String table, String column) throws FacadeException, RemoteException;

    public void removeAdminTable(String table) throws FacadeException, RemoteException;

    public void createAdminTableColumn(String table, String column) throws FacadeException, RemoteException;

    public void setEntity(EntityAdminVO entVO) throws FacadeException, RemoteException;

    public EntityAdminVO getEntity(String entCd) throws FacadeException, RemoteException;

    public Collection getEntities() throws FacadeException, RemoteException;

    EntityAcctAdminVO getEntAcct(String entCd, int bankAcct) throws FacadeException, RemoteException;

    void setEntAcct(EntityAcctAdminVO entVO) throws FacadeException, RemoteException;

    Collection getEntCntryAccounts(String entCd) throws FacadeException, RemoteException;

    void removeEntAcct(EntityAcctAdminVO entVO) throws FacadeException, RemoteException;

    public Collection getTimeZones() throws FacadeException, RemoteException;

    public Collection getPossibleParentLocations(String locationCd, String countryCd) throws FacadeException, RemoteException;

	public void saveStationsAdminInput(StationsAdminVO stationsAdminVO)throws FacadeException, RemoteException;
    
    

}